openapi: 3.1.0
info:
  title: Backend API
  version: 1.0.0

paths:
  /api/v1/projects/{project_id}/features:
    get:
      summary: List features for project
      operationId: ListProjectFeatures
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: kind
          in: query
          required: false
          description: Filter by feature kind
          schema:
            type: string
            enum: [simple, multivariant]
        - name: enabled
          in: query
          required: false
          description: Filter by enabled state
          schema:
            type: boolean
        - name: text_selector
          in: query
          required: false
          description: Case-insensitive text search across key, name, description, rollout_key
          schema:
            type: string
        - name: tag_ids
          in: query
          required: false
          description: Filter by tag IDs (comma-separated)
          schema:
            type: string
            example: "550e8400-e29b-41d4-a716-446655440000,550e8400-e29b-41d4-a716-446655440001"
        - name: sort_by
          in: query
          required: false
          description: Sort by field
          schema:
            type: string
            enum: [name, key, enabled, kind, created_at, updated_at]
        - name: sort_order
          in: query
          required: false
          description: Sort order
          schema:
            $ref: '#/components/schemas/SortOrder'
        - name: page
          in: query
          required: false
          description: Page number (starts from 1)
          schema:
            type: integer
            format: uint
            minimum: 1
            default: 1
        - name: per_page
          in: query
          required: false
          description: Items per page
          schema:
            type: integer
            format: uint
            minimum: 1
            default: 20
      responses:
        '200':
          description: List of features for the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFeaturesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create feature for project
      operationId: CreateProjectFeature
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeatureRequest'
      responses:
        '201':
          description: Feature created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  # Пример нового эндпоинта - получение feature по ID
  /api/v1/projects/{project_id}/features/{feature_id}:
    get:
      summary: Get feature by ID
      operationId: GetProjectFeature
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  # Project Settings CRUD endpoints
  /api/v1/projects/{project_id}/settings:
    get:
      summary: List project settings
      operationId: ListProjectSettings
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 20
      responses:
        '200':
          description: List of project settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectSettingsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create project setting
      operationId: CreateProjectSetting
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingRequest'
      responses:
        '201':
          description: Project setting created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Setting already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/projects/{project_id}/settings/{setting_name}:
    get:
      summary: Get project setting by name
      operationId: GetProjectSetting
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project setting details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      summary: Update project setting
      operationId: UpdateProjectSetting
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectSettingRequest'
      responses:
        '200':
          description: Project setting updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      summary: Delete project setting
      operationId: DeleteProjectSetting
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project setting deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

# ---------------------------------------------------
#                Components / Schemas
# ---------------------------------------------------
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Pagination:
      type: object
      properties:
        total:
          type: integer
          format: uint
          example: 125
        page:
          type: integer
          format: uint
          example: 1
          minimum: 1
        per_page:
          type: integer
          format: uint
          example: 20
          minimum: 1
      required: [ total, page, per_page ]

    SortOrder:
      type: string
      description: Sort order (ascending or descending)
      enum: [asc, desc]

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"
    # ---- Generic entities ----
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
      required: [error]

    ErrorInternalServerError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "internal"
              message: "Internal server error"

    ErrorBadRequest:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "bad_request"
              message: "Bad request"

    ErrorUnauthorized:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "unauthorized"
              message: "Authentication required"

    ErrorPermissionDenied:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "permission_denied"
              message: "Permission denied"

    ErrorTooManyRequests:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "too_many_requests"
              message: "Too many requests"
    ErrorConflict:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: "Entity is already locked by another pending change"
            code:
              type: string
              example: "CONFLICT"
      required: [error]

    ErrorNotFound:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "not_found"
              message: "Resource not found"

    ErrorInvalidCredentials:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "invalid_credentials"
              message: "Invalid username or password"

    ErrorInvalidToken:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "invalid_token"
              message: "Invalid or expired token"

    Error2FARequired:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "2fa_required"
              message: "Two-factor authentication required"

    # ---- Common Request/Response Patterns ----
    CreateFeatureRequest:
      type: object
      properties:
        key:
          type: string
          example: "new_ui"
        name:
          type: string
          example: "New UI"
        description:
          type: string
          nullable: true
          example: "Optional description"
        kind:
          $ref: '#/components/schemas/FeatureKind'
        default_variant:
          type: string
          example: "on"
        enabled:
          type: boolean
          example: true
        rollout_key:
          type: string
          example: "user.id"
      required: [key, name, kind, default_variant, enabled]

    FeatureResponse:
      allOf:
        - $ref: '#/components/schemas/FeatureExtended'

    ListFeaturesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FeatureExtended'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # ---- Common Entity Schemas ----
    ProjectTag:
      type: object
      properties:
        id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "frontend"
        color:
          type: string
          example: "#FF5733"
        project_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
      required: [id, name, color, project_id]

    # ---- Feature Flags ----
    FeatureKind:
      type: string
      enum:
        - simple
        - multivariant

    Feature:
      type: object
      properties:
        id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        project_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        key:
          type: string
          example: "new_ui"
        name:
          type: string
          example: "New UI"
        description:
          type: string
          nullable: true
          example: "Optional description"
        kind:
          $ref: '#/components/schemas/FeatureKind'
        default_variant:
          type: string
          example: "on"
        enabled:
          type: boolean
          example: true
        rollout_key:
          type: string
          example: "user.id"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T01:00:00Z"
      required: [id, project_id, key, name, kind, default_variant, enabled, created_at, updated_at]

    FeatureExtended:
      allOf:
        - $ref: '#/components/schemas/Feature'
        - type: object
          properties:
            is_active:
              type: boolean
              description: "Indicates if the feature is currently active (taking schedules)"
              example: true
            next_state:
              type: boolean
              nullable: true
              description: "Indicates the next state the feature will transition to based on schedule (null if no schedule)"
              example: false
            next_state_time:
              type: string
              format: date-time
              nullable: true
              description: "Timestamp when the feature will transition to the next state (null if no schedule)"
              example: "2025-09-20T14:00:00Z"
            tags:
              type: array
              items:
                $ref: '#/components/schemas/ProjectTag'
              description: "Tags associated with this feature"
              example: []
          required: [is_active]

    # ---- Project Settings ----
    ProjectSetting:
      type: object
      properties:
        id:
          type: integer
          example: 1
        project_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        name:
          type: string
          example: "auto_approve"
        value:
          type: object
          example: {"enabled": true, "threshold": 5}
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T01:00:00Z"
      required: [id, project_id, name, value, created_at, updated_at]

    CreateProjectSettingRequest:
      type: object
      properties:
        name:
          type: string
          example: "auto_approve"
          maxLength: 100
        value:
          type: object
          example: {"enabled": true, "threshold": 5}
      required: [name, value]

    UpdateProjectSettingRequest:
      type: object
      properties:
        value:
          type: object
          example: {"enabled": false, "threshold": 10}
      required: [value]

    ProjectSettingResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectSetting'

    ListProjectSettingsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSetting'
        pagination:
          $ref: '#/components/schemas/Pagination'
