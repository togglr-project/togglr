openapi: 3.1.0
info:
  title: Backend API
  version: 1.0.0

paths:
  # --- Authentication Endpoints ---
  /api/v1/auth/login:
    post:
      summary: Authenticate user and get access token
      operationId: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidCredentials'
        '403':
          description: 2FA required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error2FARequired'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/refresh:
    post:
      summary: Refresh access token
      operationId: RefreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/forgot-password:
    post:
      summary: Request a password reset
      operationId: ForgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '204':
          description: Password reset email sent successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '403':
          description: External user can't change password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/reset-password:
    post:
      summary: Reset password using token
      operationId: ResetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '204':
          description: Password reset successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/2fa/verify:
    post:
      summary: Verify 2FA-code on login
      operationId: Verify2FA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFAVerifyRequest'
      responses:
        '200':
          description: Success, returns access/refresh tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFAVerifyResponse'
        '400':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorTooManyRequests'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/sso/callback:
    post:
      summary: Handle SSO callback from Keycloak
      operationId: SSOCallback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SSOCallbackRequest'
      responses:
        '200':
          description: SSO authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid SSO token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: SSO authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/sso/initiate:
    get:
      summary: Initiate SSO login flow
      operationId: SSOInitiate
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            type: string
          description: Name of the SSO provider to use
      responses:
        '200':
          description: SSO login URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSOInitiateResponse'
        '400':
          description: Invalid provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/sso/providers:
    get:
      summary: Get available SSO providers
      operationId: GetSSOProviders
      responses:
        '200':
          description: List of available SSO providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSOProvidersResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/saml/metadata:
    get:
      summary: Get SAML metadata
      operationId: GetSAMLMetadata
      responses:
        '200':
          description: SAML metadata XML
          content:
            application/samlmetadata+xml:
              schema:
                type: string
                example: |
                  <?xml version="1.0" encoding="UTF-8"?>
                  <md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" entityID="http://localhost:8080/api/v1/auth/sso">
                    <md:SPSSODescriptor protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
                      <md:AssertionConsumerService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="http://localhost:8080/api/v1/auth/sso/callback" index="0"/>
                    </md:SPSSODescriptor>
                  </md:EntityDescriptor>
        '404':
          description: SAML metadata not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/saml/acs:
    post:
      summary: Assertion Consumer Service (ACS) endpoint
      description: |
        Finishes the SAML authentication flow.  
        The Identity Provider sends an HTTP-POST request that contains **SAMLResponse** (mandatory,
        Base64-encoded `<samlp:Response>` XML) and the optional **RelayState** parameter.  
        On success the service creates a user session (cookie or JWT) and redirects the browser
        to the application UI.
      operationId: ConsumeSAMLAssertion
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                SAMLResponse:
                  type: string
                  description: Base64-encoded IdP `<samlp:Response>` document
                RelayState:
                  type: string
                  description: Value round-tripped from the initial authentication request
              required:
                - SAMLResponse
                - RelayState
      responses:
        '302':
          description: Successful authentication — browser will be redirected
          headers:
            Location:
              description: Target URL for the redirect (e.g. `/login/success?token=…`)
              schema:
                type: string
            Set-Cookie:
              description: Session cookie or JWT issued to the client
              schema:
                type: string
        '400':
          description: Malformed or expired SAML response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Authentication failed (invalid issuer or signature)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/license/status:
    get:
      summary: Get license status
      description: Returns the current license status including validity, expiration date, and type
      operationId: GetLicenseStatus
      responses:
        '200':
          description: License status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseStatusResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/license:
    put:
      summary: Update license
      description: Updates the system license with a new license key
      operationId: UpdateLicense
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLicenseRequest'
      responses:
        '200':
          description: License updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseStatusResponse'
        '400':
          description: Invalid license key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # --- User Endpoints ---
  /api/v1/users/me:
    get:
      summary: Get current user information
      operationId: GetCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentUserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/change-password:
    post:
      summary: Change my password
      operationId: userChangeMyPassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordRequest'
      responses:
        '204':
          description: Password changed successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '403':
          description: External user can't change password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/license-acceptance:
    put:
      summary: Update license acceptance status
      operationId: UpdateLicenseAcceptance
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLicenseAcceptanceRequest'
      responses:
        '204':
          description: License acceptance status updated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users:
    get:
      summary: List all users (superuser only)
      operationId: ListUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new user (superuser only)
      operationId: CreateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Not a superuser
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/{user_id}:
    delete:
      summary: Delete a user (superuser only, cannot delete superusers)
      operationId: DeleteUser
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Not a superuser or trying to delete a superuser
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/{user_id}/superuser:
    put:
      summary: Set or unset superuser status (superuser only, cannot modify admin user)
      operationId: SetSuperuserStatus
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetSuperuserStatusRequest'
      responses:
        '200':
          description: Superuser status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Not a superuser
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/{user_id}/active:
    put:
      summary: Set or unset user active status (superuser only)
      operationId: SetUserActiveStatus
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUserActiveStatusRequest'
      responses:
        '200':
          description: User active status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Not a superuser
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/projects:
    get:
      summary: Get projects list
      operationId: ListProjects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/projects/add:
    post:
      summary: Add new project
      operationId: addProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProjectRequest'
      responses:
        '201':
          description: Project created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '409':
          description: Project already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/projects/{project_id}:
    get:
      summary: Get project details
      operationId: GetProject
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update project name and description
      operationId: UpdateProject
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Archive a project
      operationId: ArchiveProject
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Project archived successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/2fa/setup:
    post:
      summary: Begin setup 2FA (generate secret and QR-code)
      operationId: Setup2FA
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Secret + QR-code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFASetupResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/2fa/confirm:
    post:
      summary: Approve enable 2FA (code from app)
      operationId: Confirm2FA
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFAConfirmRequest'
      responses:
        '204':
          description: 2FA enabled
        '400':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorTooManyRequests'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/2fa/disable:
    post:
      summary: Disable 2FA (using email-confirmation)
      operationId: Disable2FA
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFADisableRequest'
      responses:
        '204':
          description: 2FA disabled
        '400':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/2fa/reset:
    post:
      summary: Reset/generate secret 2FA (using email-confirmation)
      operationId: Reset2FA
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFAResetRequest'
      responses:
        '200':
          description: Secret + QR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFASetupResponse'
        '400':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/me/2fa/send_code:
    post:
      summary: Send 2FA email code for disable/reset
      operationId: send2FACode
      tags:
        - users
      responses:
        '204':
          description: Code sent
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ---------------------------------------------------
  #                LDAP Sync Endpoints
  # ---------------------------------------------------

  # --- LDAP Configuration Endpoints ---
  /api/v1/ldap/config:
    get:
      summary: Get LDAP configuration
      operationId: GetLDAPConfig
      responses:
        '200':
          description: LDAP configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPConfig'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: LDAP configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create or update LDAP configuration
      operationId: UpdateLDAPConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LDAPConfig'
      responses:
        '200':
          description: LDAP configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPConfigResponse'
        '400':
          description: Invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      summary: Delete LDAP configuration
      operationId: DeleteLDAPConfig
      responses:
        '200':
          description: LDAP configuration deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/ldap/test-connection:
    post:
      summary: Test LDAP connection
      operationId: TestLDAPConnection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LDAPConnectionTest'
      responses:
        '200':
          description: Connection test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPConnectionTestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  # --- LDAP Sync Endpoints ---
  /api/v1/ldap/sync/users:
    post:
      summary: Start user synchronization
      operationId: SyncLDAPUsers
      responses:
        '202':
          description: Synchronization started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPSyncStartResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '409':
          description: Sync already in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/ldap/sync/cancel:
    delete:
      summary: Cancel ongoing synchronization
      operationId: CancelLDAPSync
      responses:
        '200':
          description: Synchronization cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: No active synchronization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/ldap/sync/status:
    get:
      summary: Get synchronization status
      operationId: GetLDAPSyncStatus
      responses:
        '200':
          description: Synchronization status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPSyncStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/ldap/sync/progress:
    get:
      summary: Get synchronization progress
      operationId: GetLDAPSyncProgress
      responses:
        '200':
          description: Synchronization progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPSyncProgress'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/ldap/sync/logs:
    get:
      summary: Get synchronization logs
      operationId: GetLDAPSyncLogs
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
            maximum: 1000
        - name: level
          in: query
          required: false
          schema:
            type: string
            enum: [info, warning, error]
        - name: sync_id
          in: query
          required: false
          schema:
            type: string
        - name: username
          in: query
          required: false
          schema:
            type: string
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Synchronization logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPSyncLogs'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/ldap/sync/logs/{id}:
    get:
      summary: Get synchronization log details
      operationId: GetLDAPSyncLogDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: Synchronization log details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPSyncLogDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/ldap/statistics:
    get:
      summary: Get LDAP statistics
      operationId: GetLDAPStatistics
      responses:
        '200':
          description: LDAP statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LDAPStatistics'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Superuser access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/product/info:
    get:
      summary: Get product information including client ID
      operationId: GetProductInfo
      responses:
        '200':
          description: Product information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfoResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/projects/{project_id}/features:
    get:
      summary: List features for project
      operationId: ListProjectFeatures
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          description: Environment key (dev, stage, prod) to filter features
          schema:
            type: string
            example: "prod"
        - name: kind
          in: query
          required: false
          description: Filter by feature kind
          schema:
            type: string
            enum: [simple, multivariant]
        - name: enabled
          in: query
          required: false
          description: Filter by enabled state
          schema:
            type: boolean
        - name: text_selector
          in: query
          required: false
          description: Case-insensitive text search across key, name, description, rollout_key
          schema:
            type: string
        - name: tag_ids
          in: query
          required: false
          description: Filter by tag IDs (comma-separated)
          schema:
            type: string
            example: "550e8400-e29b-41d4-a716-446655440000,550e8400-e29b-41d4-a716-446655440001"
        - name: sort_by
          in: query
          required: false
          description: Sort by field
          schema:
            type: string
            enum: [name, key, enabled, kind, created_at, updated_at]
        - name: sort_order
          in: query
          required: false
          description: Sort order
          schema:
            $ref: '#/components/schemas/SortOrder'
        - name: page
          in: query
          required: false
          description: Page number (starts from 1)
          schema:
            type: integer
            format: uint
            minimum: 1
            default: 1
        - name: per_page
          in: query
          required: false
          description: Items per page
          schema:
            type: integer
            format: uint
            minimum: 1
            default: 20
      responses:
        '200':
          description: List of features for the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFeaturesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create feature for project
      operationId: CreateProjectFeature
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeatureRequest'
      responses:
        '201':
          description: Feature created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/features/{feature_id}:
    get:
      summary: Get feature with rules and variants
      operationId: GetFeature
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature details with rules and variants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureDetailsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      summary: Update feature with rules and variants
      operationId: UpdateFeature
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeatureRequest'
      responses:
        '200':
          description: Updated feature details with rules and variants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureDetailsResponse'
        '202':
          description: Change is pending approval (for guarded features)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingChangeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      summary: Delete feature
      operationId: DeleteFeature
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Feature deleted successfully
        '202':
          description: Deletion is pending approval (for guarded features)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingChangeResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /api/v1/features/{feature_id}/rules:
    get:
      summary: List rules for feature
      operationId: ListFeatureRules
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of rules for the feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRulesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create rule for feature
      operationId: CreateFeatureRule
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleRequest'
      responses:
        '201':
          description: Rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature or related resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/features/{feature_id}/rules/{rule_id}/sync:
    put:
      summary: Synchronize customized feature rule
      operationId: SyncCustomizedFeatureRule
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: rule_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature rule synchronized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature or related resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]

  /api/v1/features/{feature_id}/schedules:
    get:
      summary: List schedules for feature
      operationId: ListFeatureSchedules
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of schedules for the feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFeatureSchedulesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create schedule for feature
      operationId: CreateFeatureSchedule
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeatureScheduleRequest'
      responses:
        '201':
          description: Schedule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureScheduleResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature or related resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/feature-schedules:
    get:
      summary: List all feature schedules
      operationId: ListAllFeatureSchedules
      responses:
        '200':
          description: List of feature schedules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFeatureSchedulesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/feature-schedules/{schedule_id}:
    get:
      summary: Get feature schedule by ID
      operationId: GetFeatureSchedule
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature schedule details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureScheduleResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      summary: Update feature schedule by ID
      operationId: UpdateFeatureSchedule
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFeatureScheduleRequest'
      responses:
        '200':
          description: Feature schedule updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureScheduleResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      summary: Delete feature schedule by ID
      operationId: DeleteFeatureSchedule
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Feature schedule deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/features/{feature_id}/variants:
    get:
      summary: List flag variants for feature
      operationId: ListFeatureFlagVariants
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of flag variants for the feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFlagVariantsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create flag variant for feature
      operationId: CreateFeatureFlagVariant
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFlagVariantRequest'
      responses:
        '201':
          description: Flag variant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlagVariantResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/features/{feature_id}/toggle:
    put:
      summary: Toggle feature enabled state
      operationId: ToggleFeature
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: environment_key
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleFeatureRequest'
      responses:
        '200':
          description: Feature toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureResponse'
        '202':
          description: Feature is guarded and change is pending approval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingChangeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Feature is already locked by another pending change
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/features/{feature_id}/timeline:
    get:
      summary: Get feature timeline within period
      operationId: GetFeatureTimeline
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: true
          description: Start of the period (inclusive)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: true
          description: End of the period (exclusive)
          schema:
            type: string
            format: date-time
        - name: location
          in: query
          required: true
          description: Browser's location string
          schema:
            type: string
      responses:
        '200':
          description: Feature timeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureTimelineResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/features/{feature_id}/timeline/test:
    post:
      summary: Test feature timeline with mock schedules
      operationId: TestFeatureTimeline
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: true
          description: Start of the period (inclusive)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: true
          description: End of the period (exclusive)
          schema:
            type: string
            format: date-time
        - name: location
          in: query
          required: true
          description: Browser's location string
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestFeatureTimelineRequest'
      responses:
        '200':
          description: Feature timeline with test schedules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureTimelineResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/features/{feature_id}/tags:
    get:
      summary: List feature tags
      operationId: ListFeatureTags
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of feature tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectTagsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add tag to feature
      operationId: AddFeatureTag
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFeatureTagRequest'
      responses:
        '201':
          description: Tag added to feature
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature or tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Tag already associated with feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove tag from feature
      operationId: RemoveFeatureTag
      parameters:
        - name: feature_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tag_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Tag removed from feature
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Feature or tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Project Settings CRUD endpoints
  /api/v1/projects/{project_id}/settings:
    get:
      summary: List project settings
      operationId: ListProjectSettings
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 20
      responses:
        '200':
          description: List of project settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectSettingsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create project setting
      operationId: CreateProjectSetting
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectSettingRequest'
      responses:
        '201':
          description: Project setting created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Setting already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/projects/{project_id}/settings/{setting_name}:
    get:
      summary: Get project setting by name
      operationId: GetProjectSetting
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project setting details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      summary: Update project setting
      operationId: UpdateProjectSetting
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectSettingRequest'
      responses:
        '200':
          description: Project setting updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      summary: Delete project setting
      operationId: DeleteProjectSetting
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project setting deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Setting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/projects/{project_id}/segments:
    get:
      summary: List segments for project
      operationId: ListProjectSegments
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: text_selector
          in: query
          required: false
          description: Case-insensitive text search across name, description
          schema:
            type: string
        - name: sort_by
          in: query
          required: false
          description: Sort by field
          schema:
            type: string
            enum: [name, created_at, updated_at]
        - name: sort_order
          in: query
          required: false
          description: Sort order
          schema:
            $ref: '#/components/schemas/SortOrder'
        - name: page
          in: query
          required: false
          description: Page number (starts from 1)
          schema:
            type: integer
            format: uint
            minimum: 1
            default: 1
        - name: per_page
          in: query
          required: false
          description: Items per page
          schema:
            type: integer
            format: uint
            minimum: 1
            default: 20
      responses:
        '200':
          description: List of segments for the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSegmentsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create segment for project
      operationId: CreateProjectSegment
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSegmentRequest'
      responses:
        '201':
          description: Segment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/segments/{segment_id}:
    get:
      summary: Get segment by ID
      operationId: GetSegment
      parameters:
        - name: segment_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Segment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      summary: Update segment
      operationId: UpdateSegment
      parameters:
        - name: segment_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSegmentRequest'
      responses:
        '200':
          description: Segment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      summary: Delete segment
      operationId: DeleteSegment
      parameters:
        - name: segment_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Segment deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/segments/{segment_id}/desync-features:
    get:
      summary: Get desync feature IDs by segment ID
      operationId: ListSegmentDesyncFeatureIDs
      parameters:
        - name: segment_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feature IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFeatureIDsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/projects/{project_id}/changes:
    get:
      summary: Get project changes history
      description: Get history of changes made to project features, rules, and other entities grouped by request_id
      operationId: ListProjectChanges
      parameters:
        - name: project_id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          description: Page number (starts from 1)
          schema:
            type: integer
            format: uint
            minimum: 1
            default: 1
        - name: per_page
          in: query
          required: false
          description: Items per page
          schema:
            type: integer
            format: uint
            minimum: 1
            maximum: 100
            default: 20
        - name: sort_by
          in: query
          required: false
          description: Sort by field
          schema:
            type: string
            enum: [created_at, actor, entity]
            default: created_at
        - name: sort_order
          in: query
          required: false
          description: Sort order
          schema:
            $ref: '#/components/schemas/SortOrder'
            default: desc
        - name: actor
          in: query
          required: false
          description: Filter by actor (system, sdk, user:<user_id>)
          schema:
            type: string
            example: "user:123"
        - name: entity
          in: query
          required: false
          description: Filter by entity type
          schema:
            $ref: '#/components/schemas/EntityType'
        - name: action
          in: query
          required: false
          description: Filter by action type
          schema:
            $ref: '#/components/schemas/AuditAction'
        - name: feature_id
          in: query
          required: false
          description: Filter by specific feature ID
          schema:
            type: string
            format: uuid
        - name: from
          in: query
          required: false
          description: Filter changes from this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
            example: "2025-01-01T00:00:00Z"
        - name: to
          in: query
          required: false
          description: Filter changes until this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
            example: "2025-12-31T23:59:59Z"
      responses:
        '200':
          description: List of change groups for the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChangesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []

  /api/v1/rule_attributes:
    get:
      summary: List of rule attributes
      operationId: ListRuleAttributes
      responses:
        '200':
          description: List of rule attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRuleAttributesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create rule attribute
      operationId: CreateRuleAttribute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleAttributeRequest'
      responses:
        '204':
          description: Attribute created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '409':
          description: Attribute already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /api/v1/rule_attributes/{name}:
    delete:
      summary: Delete rule attribute
      operationId: DeleteRuleAttribute
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Attribute deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # Categories API (superuser only)
  # ========================================
  /api/v1/categories:
    get:
      summary: Get categories list
      operationId: ListCategories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategoriesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create new category
      operationId: CreateCategory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '409':
          description: Category already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/categories/{category_id}:
    get:
      summary: Get category details
      operationId: GetCategory
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update category
      operationId: UpdateCategory
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete category
      operationId: DeleteCategory
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Category deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # Tags API (project management required)
  # ========================================
  /api/v1/projects/{project_id}/tags:
    get:
      summary: Get tags list for project
      operationId: ListProjectTags
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: category_id
          in: query
          required: false
          description: Filter by category ID
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tags for project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectTagsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create new tag for project
      operationId: CreateProjectTag
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectTagRequest'
      responses:
        '201':
          description: Tag created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTagResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Tag already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/projects/{project_id}/tags/{tag_id}:
    get:
      summary: Get tag details
      operationId: GetProjectTag
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tag_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Tag details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTagResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update tag
      operationId: UpdateProjectTag
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tag_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectTagRequest'
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTagResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete tag
      operationId: DeleteProjectTag
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tag_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Tag deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # --- Environment Endpoints ---
  /api/v1/projects/{project_id}/environments:
    get:
      summary: List project environments
      operationId: ListProjectEnvironments
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of environments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEnvironmentsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create environment
      operationId: CreateEnvironment
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEnvironmentRequest'
      responses:
        '201':
          description: Environment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '409':
          description: Environment already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/environments/{environment_id}:
    get:
      summary: Get environment
      operationId: GetEnvironment
      parameters:
        - name: environment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Environment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Environment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update environment
      operationId: UpdateEnvironment
      parameters:
        - name: environment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEnvironmentRequest'
      responses:
        '200':
          description: Environment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Environment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete environment
      operationId: DeleteEnvironment
      parameters:
        - name: environment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Environment deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Environment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  # --- Pending Changes Endpoints ---
  /api/v1/pending_changes:
    get:
      summary: List pending changes
      operationId: ListPendingChanges
      security:
        - bearerAuth: []
      parameters:
        - name: environment_id
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: project_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, approved, rejected, cancelled]
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
            format: uint
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: uint
            minimum: 1
            default: 1
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            format: uint
            minimum: 1
            maximum: 100
            default: 20
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [created_at, status, requested_by]
            default: created_at
        - name: sort_desc
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: List of pending changes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingChangesListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/pending_changes/{pending_change_id}:
    get:
      summary: Get pending change by ID
      operationId: GetPendingChange
      security:
        - bearerAuth: []
      parameters:
        - name: pending_change_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Pending change details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingChangeResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '404':
          description: Pending change not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/pending_changes/{pending_change_id}/initiate-totp:
    post:
      summary: Initiate TOTP approval session
      operationId: InitiateTOTPApproval
      security:
        - bearerAuth: []
      parameters:
        - name: pending_change_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateTOTPApprovalRequest'
      responses:
        '200':
          description: TOTP approval session initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateTOTPApprovalResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Pending change not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Conflict - pending change is not in pending status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/pending_changes/{pending_change_id}/approve:
    post:
      summary: Approve a pending change
      operationId: ApprovePendingChange
      security:
        - bearerAuth: []
      parameters:
        - name: pending_change_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovePendingChangeRequest'
      responses:
        '200':
          description: Pending change approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized or invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Pending change not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Conflict - pending change is not in pending status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/pending_changes/{pending_change_id}/reject:
    post:
      summary: Reject a pending change
      operationId: RejectPendingChange
      security:
        - bearerAuth: []
      parameters:
        - name: pending_change_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectPendingChangeRequest'
      responses:
        '200':
          description: Pending change rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Pending change not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Conflict - pending change is not in pending status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/pending_changes/{pending_change_id}/cancel:
    post:
      summary: Cancel a pending change
      operationId: CancelPendingChange
      security:
        - bearerAuth: []
      parameters:
        - name: pending_change_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelPendingChangeRequest'
      responses:
        '200':
          description: Pending change cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPermissionDenied'
        '404':
          description: Pending change not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'
        '409':
          description: Conflict - pending change is not in pending status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorConflict'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


# ---------------------------------------------------
#                Components / Schemas
# ---------------------------------------------------
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Pagination:
      type: object
      properties:
        total:
          type: integer
          format: uint
          example: 125
        page:
          type: integer
          format: uint
          example: 1
          minimum: 1
        per_page:
          type: integer
          format: uint
          example: 20
          minimum: 1
      required: [ total, page, per_page ]

    SortOrder:
      type: string
      description: Sort order (ascending or descending)
      enum: [asc, desc]

    # LDAP Configuration Schemas
    LDAPConfig:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether LDAP integration is enabled
        url:
          type: string
          description: LDAP server URL
          example: "ldap://ldap.example.com:389"
        bind_dn:
          type: string
          description: DN for binding to LDAP server
          example: "cn=admin,dc=example,dc=com"
        bind_password:
          type: string
          description: Password for binding to LDAP server
          format: password
        user_base_dn:
          type: string
          description: Base DN for user search
          example: "ou=users,dc=example,dc=com"
        user_filter:
          type: string
          description: Filter for user search
          example: "(objectClass=person)"
        user_name_attr:
          type: string
          description: Attribute for username
          example: "uid"
        user_email_attr:
          type: string
          description: Attribute for user email
          example: "mail"
        start_tls:
          type: boolean
          description: Whether to use StartTLS
        insecure_tls:
          type: boolean
          description: Whether to skip TLS certificate verification
        timeout:
          type: string
          description: Connection timeout
          example: "30s"
        sync_interval:
          type: integer
          format: uint
          description: Background synchronization interval
          example: 3600
      required:
        - enabled
        - url
        - bind_dn
        - bind_password
        - user_base_dn
        - user_filter
        - user_name_attr
        - user_email_attr
        - start_tls
        - insecure_tls
        - timeout
        - sync_interval

    LDAPConfigResponse:
      type: object
      properties:
        message:
          type: string
          example: "LDAP configuration updated successfully"
        config:
          $ref: '#/components/schemas/LDAPConfig'

    LDAPConnectionTest:
      type: object
      properties:
        url:
          type: string
          description: LDAP server URL
          example: "ldap://ldap.example.com:389"
        bind_dn:
          type: string
          description: DN for binding to LDAP server
          example: "cn=admin,dc=example,dc=com"
        bind_password:
          type: string
          description: Password for binding to LDAP server
          format: password
        user_base_dn:
          type: string
          description: Base DN for user search
          example: "ou=users,dc=example,dc=com"
        user_filter:
          type: string
          description: Filter for user search
          example: "(objectClass=person)"
        user_name_attr:
          type: string
          description: Attribute for username
          example: "uid"
        start_tls:
          type: boolean
          description: Whether to use StartTLS
        insecure_tls:
          type: boolean
          description: Whether to skip TLS certificate verification
        timeout:
          type: string
          description: Connection timeout
          example: "30s"
      required:
        - url
        - bind_dn
        - bind_password

    LDAPConnectionTestResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Connection test successful"
        details:
          type: object
          properties:
            server_info:
              type: string
              example: "OpenLDAP 2.4.44"
            user_count:
              type: integer
              example: 150
            test_user:
              type: string
              example: "testuser"

    # LDAP Sync Schemas
    LDAPSyncStartResponse:
      type: object
      properties:
        message:
          type: string
          example: "Synchronization started"
        sync_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        estimated_duration:
          type: string
          example: "5m"

    LDAPSyncStatus:
      type: object
      required:
        - status
        - is_running
        - total_users
        - synced_users
        - errors
        - warnings
      properties:
        status:
          type: string
          example: completed
        is_running:
          type: boolean
          example: false
        last_sync_time:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        total_users:
          type: integer
          example: 150
        synced_users:
          type: integer
          example: 145
        errors:
          type: integer
          example: 2
        warnings:
          type: integer
          example: 1
        last_sync_duration:
          type: string
          example: "5m30s"

    LDAPSyncProgress:
      type: object
      required:
        - is_running
        - progress
        - current_step
        - processed_items
        - total_items
        - estimated_time
        - start_time
        - sync_id
      properties:
        is_running:
          type: boolean
          example: true
        progress:
          type: number
          format: float
          example: 65.5
        current_step:
          type: string
          example: "Syncing users"
        processed_items:
          type: integer
          example: 98
        total_items:
          type: integer
          example: 150
        estimated_time:
          type: string
          example: "2m15s"
        start_time:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        sync_id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"

    LDAPSyncLogs:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LDAPSyncLogEntry'
        total:
          type: integer
          example: 4
        has_more:
          type: boolean
          example: false

    LDAPSyncLogEntry:
      type: object
      required:
        - id
        - timestamp
        - level
        - message
        - sync_session_id
      properties:
        id:
          type: integer
          format: uint
          example: 1
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:05Z"
        level:
          type: string
          enum: [info, warning, error]
          example: "info"
        message:
          type: string
          example: "Starting user synchronization"
        username:
          type: string
          nullable: true
          example: "john.doe"
        details:
          type: string
          nullable: true
          example: "Created new user account"
        sync_session_id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"

    LDAPSyncLogDetails:
      type: object
      required:
        - id
        - timestamp
        - level
        - message
        - sync_session_id
      properties:
        id:
          type: integer
          format: uint
          example: 4
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:20Z"
        level:
          type: string
          enum: [info, warning, error]
          example: "error"
        message:
          type: string
          example: "Failed to sync user"
        username:
          type: string
          nullable: true
          example: "invalid.user"
        details:
          type: string
          nullable: true
          example: "User not found in LDAP directory"
        sync_session_id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        stack_trace:
          type: string
          nullable: true
          example: "github.com/togglr-project/togglr/internal/services/ldap.(*Service).syncUser\n\t/togglr/internal/services/ldap/ldap.go:161\n..."
        ldap_error_code:
          type: integer
          nullable: true
          example: 32
        ldap_error_message:
          type: string
          nullable: true
          example: "No such object"

    LDAPStatistics:
      type: object
      properties:
        ldap_users:
          type: integer
          example: 150
        local_users:
          type: integer
          example: 145
        active_users:
          type: integer
          example: 140
        inactive_users:
          type: integer
          example: 5
        sync_history:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                example: "2024-01-15"
              users_synced:
                type: integer
                example: 145
              errors:
                type: integer
                example: 2
              duration_minutes:
                type: number
                format: float
                example: 5.5
        sync_success_rate:
          type: number
          format: float
          example: 96.7

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"
    # ---- Generic entities ----
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
      required: [error]

    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        username:
          type: string
          example: "john.doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        is_superuser:
          type: boolean
          example: false
        is_active:
          type: boolean
          example: true
        is_external:
          type: boolean
          example: false
        is_tmp_password:
          type: boolean
          example: true
        two_fa_enabled:
          type: boolean
          example: true
        license_accepted:
          type: boolean
          example: false
          description: Flag indicating whether the user has accepted the license agreement
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        last_login:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00Z"
        project_permissions:
          type: object
          description: Map of project_id to list of permission keys for that project. Contains only projects where user has membership.
          additionalProperties:
            type: array
            items:
              type: string
      required: [id, username, email, is_superuser, is_active, is_tmp_password, is_external, two_fa_enabled, license_accepted, created_at]

    AddProjectRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 128
        description:
          type: string
          minLength: 10
          maxLength: 300

    UpdateProjectRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 128
        description:
          type: string
          minLength: 10
          maxLength: 300

    # ---- /auth/login ----
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "user@example.com"
          minLength: 1
          maxLength: 255
        password:
          type: string
          example: "password123"
          minLength: 1
          maxLength: 255
      required: [username, password]

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "<JWT_ACCESS_TOKEN>"
        refresh_token:
          type: string
          example: "<JWT_REFRESH_TOKEN>"
        expires_in:
          type: integer
          example: 3600
        is_tmp_password:
          type: boolean
          example: true
      required: [access_token, refresh_token, expires_in, is_tmp_password]

    ErrorInvalidCredentials:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "invalid_credentials"
              message: "Invalid username or password"

    # ---- SSO Authentication ----
    SSOCallbackRequest:
      type: object
      properties:
        provider:
          type: string
          description: Name of the SSO provider
          example: "keycloak"
          minLength: 1
        response:
          type: string
          description: Response from SSO provider (code for OIDC, SAML response for SAML)
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
          minLength: 1
        state:
          type: string
          description: State parameter for CSRF protection
          example: "abc123def456"
          minLength: 1
      required: [provider, response, state]

    SSOInitiateResponse:
      type: object
      properties:
        redirect_url:
          type: string
          description: URL to redirect user for SSO login
          example: "https://keycloak.example.com/auth/realms/togglr/protocol/openid-connect/auth?client_id=togglr-client&response_type=code&scope=openid+email+profile&redirect_uri=https://togglr.example.com/api/v1/auth/sso/callback&state=abc123def456"
      required: [redirect_url]

    SSOProvidersResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            $ref: '#/components/schemas/SSOProvider'
      required: [providers]

    SSOProvider:
      type: object
      properties:
        name:
          type: string
          description: Internal name of the provider
          example: "ad_saml"
        display_name:
          type: string
          description: Display name for UI
          example: "Sign in with Active Directory"
        type:
          type: string
          description: Type of SSO provider
          example: "saml"
          enum: [saml]
        icon_url:
          type: string
          description: URL to provider icon
          example: "https://example.com/ad-icon.png"
        enabled:
          type: boolean
          description: Whether the provider is enabled
          example: true
      required: [name, display_name, type, enabled]

    # ---- /auth/refresh ----
    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: "<JWT_REFRESH_TOKEN>"
          minLength: 1
      required: [refresh_token]

    RefreshTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "<JWT_ACCESS_TOKEN>"
        refresh_token:
          type: string
          example: "<JWT_REFRESH_TOKEN>"
        expires_in:
          type: integer
          example: 3600
      required: [access_token, refresh_token, expires_in]

    ErrorInvalidToken:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "invalid_token"
              message: "Invalid refresh token"

    # ---- /auth/forgot-password ----
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
          minLength: 5
          maxLength: 255
      required: [email]

    # ---- /auth/reset-password ----
    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          example: "reset_token_123456"
          minLength: 1
          maxLength: 255
        new_password:
          type: string
          example: "newpassword123"
          minLength: 8
          maxLength: 255
      required: [token, new_password]

    # ---- /users/me ----
    GetCurrentUserResponse:
      $ref: '#/components/schemas/User'

    ErrorInternalServerError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "internal"
              message: "Internal server error"

    ErrorBadRequest:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "bad_request"
              message: "Bad request"

    ErrorUnauthorized:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "unauthorized"
              message: "Authentication required"

    ErrorPermissionDenied:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "permission_denied"
              message: "Permission denied"

    ErrorTooManyRequests:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "too_many_requests"
              message: "Too many requests"

    ErrorConflict:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: "Entity is already locked by another pending change"
            code:
              type: string
              example: "CONFLICT"
      required: [error]

    # ---- /users ----
    ListUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/User'

    Project:
      type: object
      properties:
        id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        name:
          type: string
          example: "My Project"
        description:
          type: string
          example: Mailing system project for developers
          nullable: false
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required: [id, name, description, created_at]

    ListProjectsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Project'

    ProjectResponse:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/Project'
      required: [project]

    # ---- Feature Flags ----
    FeatureKind:
      type: string
      enum:
        - simple
        - multivariant

    Feature:
      type: object
      properties:
        id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        project_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        key:
          type: string
          example: "new_ui"
        name:
          type: string
          example: "New UI"
        description:
          type: string
          nullable: true
          example: "Optional description"
        kind:
          $ref: '#/components/schemas/FeatureKind'
        rollout_key:
          type: string
          example: "user.id"
        enabled:
          type: boolean
          description: Whether the feature is enabled in the specified environment
          example: true
        default_value:
          type: string
          description: Default value for the feature in the specified environment
          example: "default"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T01:00:00Z"
      required: [id, project_id, key, name, kind, enabled, default_value, created_at, updated_at]

    FeatureExtended:
      allOf:
        - $ref: '#/components/schemas/Feature'
        - type: object
          properties:
            is_active:
              type: boolean
              description: "Indicates if the feature is currently active (taking schedules)"
              example: true
            next_state:
              type: boolean
              nullable: true
              description: "Indicates the next state the feature will transition to based on schedule (null if no schedule)"
              example: false
            next_state_time:
              type: string
              format: date-time
              nullable: true
              description: "Timestamp when the feature will transition to the next state (null if no schedule)"
              example: "2025-09-20T14:00:00Z"
            tags:
              type: array
              items:
                $ref: '#/components/schemas/ProjectTag'
              description: "Tags associated with this feature"
              example: []
          required: [is_active]

    CreateFeatureRequest:
      type: object
      properties:
        key:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[A-Za-z0-9_:@!#$.-]+$'
        name:
          type: string
          minLength: 2
          maxLength: 50
        description:
          type: string
          nullable: true
          maxLength: 300
        kind:
          $ref: '#/components/schemas/FeatureKind'
        environment_key:
          type: string
          maxLength: 20
          description: Environment key (dev, stage, prod) for this feature
          example: "prod"
        default_value:
          type: string
          minLength: 1
          maxLength: 128
          description: Default value for the feature in the specified environment
        enabled:
          type: boolean
          description: Whether the feature is enabled in the specified environment
        rollout_key:
          type: string
          maxLength: 50
        variants:
          type: array
          description: Optional list of flag variants to create along with the feature
          maxItems: 50
          items:
            $ref: '#/components/schemas/CreateFlagVariantInline'
        rules:
          type: array
          description: Optional list of rules to create along with the feature
          maxItems: 100
          items:
            $ref: '#/components/schemas/CreateRuleInline'
      required: [key, name, kind, environment_key, enabled, default_value]

    ToggleFeatureRequest:
      type: object
      properties:
        enabled:
          type: boolean
      required: [enabled]

    FeatureResponse:
      type: object
      properties:
        feature:
          $ref: '#/components/schemas/Feature'
      required: [feature]

    FeatureDetailsResponse:
      type: object
      properties:
        feature:
          $ref: '#/components/schemas/FeatureExtended'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/FlagVariant'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ProjectTag'
      required: [feature, variants, rules, tags]

    ListFeaturesResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/FeatureExtended'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required: [items, pagination]

    ListFlagVariantsResponse:
      type: array
      items:
        $ref: '#/components/schemas/FlagVariant'

    ListRulesResponse:
      type: array
      items:
        $ref: '#/components/schemas/Rule'

    FeatureTimelineEvent:
      type: object
      properties:
        time:
          type: string
          format: date-time
        enabled:
          type: boolean
      required: [time, enabled]

    FeatureTimelineResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/FeatureTimelineEvent'
      required: [events]

    TestFeatureTimelineRequest:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/TestFeatureSchedule'
          minItems: 1
          maxItems: 50
      required: [schedules]

    TestFeatureSchedule:
      type: object
      properties:
        starts_at:
          type: string
          format: date-time
          nullable: true
        ends_at:
          type: string
          format: date-time
          nullable: true
        cron_expr:
          type: string
          nullable: true
          maxLength: 255
        timezone:
          type: string
          maxLength: 50
        action:
          type: string
          enum: [enable, disable]
        cron_duration:
          type: string
          nullable: true
          format: duration
          maxLength: 30
      required: [timezone, action]

    # ---- Segments ----
    Segment:
      type: object
      properties:
        id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        project_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        name:
          type: string
          example: "VIP Users"
        description:
          type: string
          nullable: true
          example: "Users included in VIP campaign"
        conditions:
          $ref: '#/components/schemas/RuleConditionExpression'
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T01:00:00Z"
      required: [id, project_id, name, conditions, created_at, updated_at]

    CreateSegmentRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        conditions:
          $ref: '#/components/schemas/RuleConditionExpression'
      required: [name, conditions]

    UpdateSegmentRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        conditions:
          $ref: '#/components/schemas/RuleConditionExpression'
      required: [name, conditions]

    SegmentResponse:
      type: object
      properties:
        segment:
          $ref: '#/components/schemas/Segment'
      required: [segment]

    ListSegmentsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required: [items, pagination]

    ListFeatureIDsResponse:
      type: array
      items:
        type: string

    FlagVariant:
      type: object
      properties:
        id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        feature_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        name:
          type: string
          example: "A"
        rollout_percent:
          type: integer
          minimum: 1
          maximum: 100
          example: 50
      required: [id, feature_id, name, rollout_percent]

    CreateFlagVariantRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 128
        rollout_percent:
          type: integer
          minimum: 1
          maximum: 100
      required: [name, rollout_percent]

    # Inline variant schema used when creating a feature with variants
    CreateFlagVariantInline:
      type: object
      properties:
        id:
          type: string
          description: Client-provided UUID for the variant
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 128
        rollout_percent:
          type: integer
          minimum: 1
          maximum: 100
        environment_key:
          type: string
          maxLength: 20
          description: Environment key (dev, stage, prod) for this variant
          example: "prod"
      required: [id, name, rollout_percent, environment_key]

    FlagVariantResponse:
      type: object
      properties:
        flag_variant:
          $ref: '#/components/schemas/FlagVariant'
      required: [flag_variant]

    RuleConditionExpression:
      description: Boolean expression tree for conditions
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/RuleCondition'
        group:
          $ref: '#/components/schemas/RuleConditionGroup'

    RuleConditionGroup:
      type: object
      properties:
        operator:
          $ref: '#/components/schemas/LogicalOperator'
        children:
          type: array
          items:
            $ref: '#/components/schemas/RuleConditionExpression'
          minItems: 1
          maxItems: 50
      required: [operator, children]

    LogicalOperator:
      type: string
      enum: [and, or, and_not]

    RuleAttribute:
      type: string
      description: Attribute to match in the rule condition
      minLength: 1
      maxLength: 50
      pattern: '^[a-zA-Z0-9._-]+$'

    RuleOperator:
      type: string
      description: Operator for condition comparison
      enum: [eq, neq, in, not_in, gt, gte, lt, lte, regex, percentage]

    RuleCondition:
      type: object
      description: Single condition item
      properties:
        attribute:
          $ref: '#/components/schemas/RuleAttribute'
        operator:
          $ref: '#/components/schemas/RuleOperator'
        value: {}
      required: [attribute, operator, value]

    RuleAction:
      type: string
      description: Type of rule action
      enum: [assign, include, exclude]

    Rule:
      type: object
      properties:
        id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        feature_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        conditions:
          $ref: '#/components/schemas/RuleConditionExpression'
        segment_id:
          type: string
        is_customized:
          type: boolean
        action:
          $ref: '#/components/schemas/RuleAction'
        flag_variant_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        priority:
          type: integer
          minimum: 0
          maximum: 255
          example: 10
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required: [id, feature_id, conditions, is_customized, action, priority, created_at]

    CreateRuleRequest:
      type: object
      properties:
        conditions:
          $ref: '#/components/schemas/RuleConditionExpression'
        segment_id:
          type: string
          format: uuid
        is_customized:
          type: boolean
        action:
          $ref: '#/components/schemas/RuleAction'
        flag_variant_id:
          type: string
          format: uuid
        priority:
          type: integer
          minimum: 0
          maximum: 255
      required: [conditions, is_customized, action]

    # Inline rule schema used when creating a feature with rules
    CreateRuleInline:
      type: object
      properties:
        id:
          type: string
          description: Client-provided UUID for the rule
          format: uuid
        conditions:
          $ref: '#/components/schemas/RuleConditionExpression'
        segment_id:
          type: string
          format: uuid
        is_customized:
          type: boolean
        action:
          $ref: '#/components/schemas/RuleAction'
        flag_variant_id:
          type: string
          format: uuid
        priority:
          type: integer
          minimum: 0
          maximum: 255
        environment_key:
          type: string
          maxLength: 20
          description: Environment key (dev, stage, prod) for this rule
          example: "prod"
      required: [id, conditions, is_customized, action, environment_key]

    RuleResponse:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/Rule'
      required: [rule]

    FeatureScheduleAction:
      type: string
      description: Action to apply on schedule
      enum: [enable, disable]

    FeatureSchedule:
      type: object
      properties:
        id:
          type: string
        project_id:
          type: string
        feature_id:
          type: string
        starts_at:
          type: string
          format: date-time
          nullable: true
        ends_at:
          type: string
          format: date-time
          nullable: true
        cron_expr:
          type: string
          nullable: true
        cron_duration:
          type: string
          format: duration
          nullable: true
          description: "Duration for cron-based schedules. When cron triggers, feature will be enabled/disabled for this duration. Format: '1h30m', '45m', '2h', etc."
        timezone:
          type: string
        action:
          $ref: '#/components/schemas/FeatureScheduleAction'
        created_at:
          type: string
          format: date-time
      required: [id, project_id, feature_id, timezone, action, created_at]

    ListFeatureSchedulesResponse:
      type: array
      items:
        $ref: '#/components/schemas/FeatureSchedule'

    CreateFeatureScheduleRequest:
      type: object
      properties:
        starts_at:
          type: string
          format: date-time
          nullable: true
        ends_at:
          type: string
          format: date-time
          nullable: true
        cron_expr:
          type: string
          nullable: true
          maxLength: 255
        cron_duration:
          type: string
          format: duration
          nullable: true
          description: "Duration for cron-based schedules. When cron triggers, feature will be enabled/disabled for this duration. Format: '1h30m', '45m', '2h', etc."
          maxLength: 30
        timezone:
          type: string
          default: UTC
          maxLength: 50
        action:
          $ref: '#/components/schemas/FeatureScheduleAction'
      required: [timezone, action]

    UpdateFeatureScheduleRequest:
      type: object
      properties:
        starts_at:
          type: string
          format: date-time
          nullable: true
        ends_at:
          type: string
          format: date-time
          nullable: true
        cron_expr:
          type: string
          nullable: true
          maxLength: 255
        cron_duration:
          type: string
          format: duration
          nullable: true
          description: "Duration for cron-based schedules. When cron triggers, feature will be enabled/disabled for this duration. Format: '1h30m', '45m', '2h', etc."
          maxLength: 30
        timezone:
          type: string
          maxLength: 50
        action:
          $ref: '#/components/schemas/FeatureScheduleAction'
      required: [timezone, action]

    FeatureScheduleResponse:
      type: object
      properties:
        schedule:
          $ref: '#/components/schemas/FeatureSchedule'
      required: [schedule]

    ErrorNotFound:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          example:
            error:
              code: "not_found"
              message: "Resource not found"

    # ---- /users POST (Create User) ----
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: "john.doe"
          minLength: 3
          maxLength: 255
          pattern: '^[a-zA-Z0-9._-]+$'
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          minLength: 5
          maxLength: 255
        password:
          type: string
          example: "password123"
          minLength: 8
          maxLength: 255
        is_superuser:
          type: boolean
          example: false
      required: [username, email, password]

    CreateUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required: [user]

    SetSuperuserStatusRequest:
      type: object
      properties:
        is_superuser:
          type: boolean
          example: true
      required: [is_superuser]

    SetUserActiveStatusRequest:
      type: object
      properties:
        is_active:
          type: boolean
          example: true
      required: [is_active]

    ChangeUserPasswordRequest:
      type: object
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
          example: "password123"
          minLength: 1
          maxLength: 255
        new_password:
          type: string
          example: "password1234"
          minLength: 8
          maxLength: 255

    UpdateLicenseAcceptanceRequest:
      type: object
      required:
        - accepted
      properties:
        accepted:
          type: boolean
          example: true
          description: Flag indicating whether the user accepts the license agreement

    TwoFASetupResponse:
      type: object
      properties:
        secret:
          type: string
          example: "JBSWY3DPEHPK3PXP"
        qr_url:
          type: string
          example: "otpauth://totp/togglr:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=togglr"
        qr_image:
          type: string
          description: "Base64 PNG QR image"
      required: [secret, qr_url, qr_image]

    TwoFAConfirmRequest:
      type: object
      properties:
        code:
          type: string
          example: "123456"
          minLength: 6
          maxLength: 6
          pattern: '^[0-9]{6}$'
      required: [code]

    TwoFADisableRequest:
      type: object
      properties:
        email_code:
          type: string
          example: "abcdef"
          minLength: 6
          maxLength: 6
          pattern: '^[a-zA-Z0-9]{6}$'
      required: [email_code]

    TwoFAResetRequest:
      type: object
      properties:
        email_code:
          type: string
          example: "abcdef"
          minLength: 6
          maxLength: 6
          pattern: '^[a-zA-Z0-9]{6}$'
      required: [email_code]

    TwoFAVerifyRequest:
      type: object
      properties:
        code:
          type: string
          example: "123456"
          minLength: 6
          maxLength: 6
          pattern: '^[0-9]{6}$'
        session_id:
          type: string
          example: "session-uuid"
          format: uuid
      required: [code, session_id]

    TwoFAVerifyResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "<JWT_ACCESS_TOKEN>"
        refresh_token:
          type: string
          example: "<JWT_REFRESH_TOKEN>"
        expires_in:
          type: integer
          example: 3600
      required: [access_token, refresh_token, expires_in]

    Error2FARequired:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "2fa_required"
            session_id:
              type: string
              example: ldfkgjjknfsjhsjdhfsjkhdfjk3445
            message:
              type: string
              example: "2FA required"
          required: [code, session_id, message]
      required: [error]

    LicenseFeature:
      type: string
      enum: [sso, ldap, corp_notif_channels]
      description: Type of license feature
      example: "sso"

    LicenseStatusResponse:
      type: object
      properties:
        license:
          type: object
          properties:
            id:
              type: string
              description: License ID
              example: "550e8400-e29b-41d4-a716-446655440000"
            type:
              $ref: '#/components/schemas/LicenseType'
            issued_at:
              type: string
              format: date-time
              description: When the license was issued
              example: "2024-01-15T10:30:00Z"
            expires_at:
              type: string
              format: date-time
              description: When the license expires
              example: "2024-02-15T10:30:00Z"
            is_valid:
              type: boolean
              description: Whether the license is currently valid
              example: true
            is_expired:
              type: boolean
              description: Whether the license has expired
              example: false
            days_until_expiry:
              type: integer
              description: Number of days until license expires (negative if expired)
              example: 15
            license_text:
              type: string
              description: The full license text
              example: "-----BEGIN LICENSE-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA..."
            features:
              type: array
              description: List of features available in this license
              items:
                $ref: '#/components/schemas/LicenseFeature'
              example: ["sso", "ldap", "corp_notif_channels"]
      required: [license]

    LicenseType:
      type: string
      enum: [trial, trial-self-signed, commercial, individual]
      description: Type of license
      example: "trial"

    UpdateLicenseRequest:
      type: object
      properties:
        license_text:
          type: string
          description: The license key text
          example: "-----BEGIN LICENSE-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA..."
          minLength: 1
      required: [license_text]

    ProductInfoResponse:
      type: object
      properties:
        client_id:
          type: string
          description: Unique client identifier for this installation
          example: "550e8400-e29b-41d4-a716-446655440000"
        created_at:
          type: string
          format: date-time
          description: When the client ID was created
          example: "2024-01-15T10:30:00Z"
      required: [client_id, created_at]

    CreateRuleAttributeRequest:
      type: object
      properties:
        name:
          type: string
          example: "user.id"
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-Z0-9._-]+$'
        description:
          type: string
          example: "User ID"
          maxLength: 300
      required: [name]

    ListRuleAttributesResponse:
      type: array
      items:
        $ref: '#/components/schemas/RuleAttributeEntity'

    RuleAttributeEntity:
      type: object
      properties:
        name:
          type: string
          example: "user.id"
          minLength: 2
          maxLength: 50
        description:
          type: string
          example: "User ID"
          maxLength: 300
      required: [name]

    # Audit Log Schemas
    EntityType:
      type: string
      description: Type of entity that was changed
      enum: [feature, rule, flag_variant, feature_schedule]

    AuditAction:
      type: string
      description: Type of action performed on entity
      enum: [create, update, delete]

    Change:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Audit log entry ID
          example: 101
        entity:
          $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
          format: uuid
          description: ID of the changed entity
          example: "3fcebf52-99e3-47d6-bf5d-0f7e6c0d8a22"
        action:
          $ref: '#/components/schemas/AuditAction'
        old_value:
          type: object
          description: Previous value of the entity (null for create actions)
          nullable: true
          example: {"enabled": false}
        new_value:
          type: object
          description: New value of the entity (null for delete actions)
          nullable: true
          example: {"enabled": true}
      required: [id, entity, entity_id, action, old_value, new_value]

    ChangeGroup:
      type: object
      properties:
        request_id:
          type: string
          format: uuid
          description: Request ID that groups related changes
          example: "d88e40b4-8d55-4e8b-a409-5d23eb0d946f"
        actor:
          type: string
          description: Who made the changes (system, sdk, user:<user_id>)
          example: "user:123"
        username:
          type: string
          description: Username of the user who made the changes
          example: "john.doe"
        created_at:
          type: string
          format: date-time
          description: When the changes were made
          example: "2025-09-22T11:22:33Z"
        changes:
          type: array
          items:
            $ref: '#/components/schemas/Change'
          description: List of changes made in this request
      required: [request_id, actor, username, created_at, changes]

    ListChangesResponse:
      type: object
      properties:
        project_id:
          type: string
          format: uuid
          description: Project ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        items:
          type: array
          items:
            $ref: '#/components/schemas/ChangeGroup'
          description: List of change groups
        pagination:
          $ref: '#/components/schemas/Pagination'
      required: [project_id, items, pagination]

    # ========================================
    # Categories Schemas
    # ========================================
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "UI/UX"
          minLength: 1
          maxLength: 100
        slug:
          type: string
          example: "ui-ux"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "UI or UX related feature"
          maxLength: 300
          nullable: true
        color:
          type: string
          example: "#06B6D4"
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
        kind:
          type: string
          enum: [system, user, domain]
          example: "system"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required: [id, name, slug, kind, created_at, updated_at]

    ListCategoriesResponse:
      type: array
      items:
        $ref: '#/components/schemas/Category'

    CategoryResponse:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category'
      required: [category]

    CreateCategoryRequest:
      type: object
      required:
        - name
        - slug
        - kind
      properties:
        name:
          type: string
          example: "Backend"
          minLength: 1
          maxLength: 100
        slug:
          type: string
          example: "backend"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Backend logic feature"
          maxLength: 300
        color:
          type: string
          example: "#4B5563"
          pattern: '^#[0-9A-Fa-f]{6}$'
        kind:
          type: string
          enum: [user, domain]
          example: "domain"

    UpdateCategoryRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          example: "Backend"
          minLength: 1
          maxLength: 100
        slug:
          type: string
          example: "backend"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Backend logic feature"
          maxLength: 300
        color:
          type: string
          example: "#4B5563"
          pattern: '^#[0-9A-Fa-f]{6}$'

    # ========================================
    # Tags Schemas
    # ========================================
    ProjectTag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        project_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        category_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
          nullable: true
        name:
          type: string
          example: "Login Button"
          minLength: 1
          maxLength: 100
        slug:
          type: string
          example: "login-button"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Login button component"
          maxLength: 300
          nullable: true
        color:
          type: string
          example: "#3B82F6"
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        category:
          $ref: '#/components/schemas/Category'
          nullable: true
          description: Category this tag belongs to
      required: [id, project_id, name, slug, created_at, updated_at]

    ListProjectTagsResponse:
      type: array
      items:
        $ref: '#/components/schemas/ProjectTag'

    ProjectTagResponse:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/ProjectTag'
      required: [tag]

    CreateProjectTagRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          example: "Login Button"
          minLength: 1
          maxLength: 100
        slug:
          type: string
          example: "login-button"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Login button component"
          maxLength: 300
        color:
          type: string
          example: "#3B82F6"
          pattern: '^#[0-9A-Fa-f]{6}$'
        category_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: ID of category to associate with this tag
          nullable: true

    AddFeatureTagRequest:
      type: object
      required:
        - tag_id
      properties:
        tag_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: ID of tag to associate with feature

    UpdateProjectTagRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          example: "Login Button"
          minLength: 1
          maxLength: 100
        slug:
          type: string
          example: "login-button"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Login button component"
          maxLength: 300
        color:
          type: string
          example: "#3B82F6"
          pattern: '^#[0-9A-Fa-f]{6}$'
        category_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: ID of category to associate with this tag
          nullable: true

    # --- Pending Changes Schemas ---
    PendingChangePayload:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/EntityChange'
        meta:
          $ref: '#/components/schemas/PendingChangeMeta'
      required: [entities, meta]

    EntityChange:
      type: object
      properties:
        entity:
          type: string
          example: "feature"
          enum: [feature, rule, feature_schedule]
        entity_id:
          type: string
          format: uuid
          example: "11111111-1111-1111-1111-111111111111"
        action:
          type: string
          example: "update"
          enum: [insert, update, delete]
        changes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChangeValue'
          example:
            enabled:
              old: true
              new: false
            default_variant:
              old: "A"
              new: "B"
      required: [entity, entity_id, action, changes]

    ChangeValue:
      type: object
      properties:
        old:
          description: Previous value
        new:
          description: New value
      required: [old, new]

    PendingChangeMeta:
      type: object
      properties:
        reason:
          type: string
          example: "Disable due to payment outage"
          maxLength: 500
        client:
          type: string
          example: "ui"
          maxLength: 50
        origin:
          type: string
          example: "project-settings"
          maxLength: 100
        single_user_project:
          type: boolean
          description: "True if the project has only 1 active user (enables auto-approve)"
          example: false
      required: [reason, client, origin]

    PendingChangeResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        environment_key:
          type: string
          example: "prod"
        project_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        requested_by:
          type: string
          example: "alice"
        request_user_id:
          type: integer
          format: uint
          example: 123
          nullable: true
        change:
          $ref: '#/components/schemas/PendingChangePayload'
        status:
          type: string
          example: "pending"
          enum: [pending, approved, rejected, cancelled]
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        approved_by:
          type: string
          example: "bob"
          nullable: true
        approved_user_id:
          type: integer
          format: uint
          example: 456
          nullable: true
        approved_at:
          type: string
          format: date-time
          example: "2024-01-15T11:00:00Z"
          nullable: true
        rejected_by:
          type: string
          example: "charlie"
          nullable: true
        rejected_at:
          type: string
          format: date-time
          example: "2024-01-15T11:30:00Z"
          nullable: true
        rejection_reason:
          type: string
          example: "Not approved by team lead"
          nullable: true
      required: [id, project_id, requested_by, change, status, environment_key, created_at]

    PendingChangesListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PendingChangeResponse'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required: [data, pagination]

    ApprovePendingChangeRequest:
      type: object
      properties:
        approver_user_id:
          type: integer
          format: uint
          example: 456
        approver_name:
          type: string
          example: "bob"
          minLength: 1
          maxLength: 255
        auth:
          $ref: '#/components/schemas/AuthCredentials'
      required: [approver_user_id, approver_name, auth]

    RejectPendingChangeRequest:
      type: object
      properties:
        rejected_by:
          type: string
          example: "charlie"
          minLength: 1
          maxLength: 255
        reason:
          type: string
          example: "Not approved by team lead"
          minLength: 1
          maxLength: 500
      required: [rejected_by, reason]

    CancelPendingChangeRequest:
      type: object
      properties:
        cancelled_by:
          type: string
          example: "alice"
          minLength: 1
          maxLength: 255
      required: [cancelled_by]

    AuthCredentials:
      type: object
      properties:
        method:
          type: string
          example: "password"
          enum: [password, totp]
        credential:
          type: string
          example: "user_password_or_totp_code"
          minLength: 1
          maxLength: 255
        session_id:
          type: string
          example: "uuid-session-id"
          description: "Session ID for TOTP approval (required when method is 'totp')"
      required: [method, credential]

    InitiateTOTPApprovalRequest:
      type: object
      properties:
        approver_user_id:
          type: integer
          format: uint
          example: 456
      required: [approver_user_id]

    InitiateTOTPApprovalResponse:
      type: object
      properties:
        session_id:
          type: string
          example: "uuid-session-id"
          description: "Session ID to use for TOTP approval"
        message:
          type: string
          example: "TOTP approval session initiated successfully"
      required: [session_id, message]

    # ---- Project Settings ----
    ProjectSetting:
      type: object
      properties:
        id:
          type: integer
          example: 1
        project_id:
          type: string
          example: "7D5C3985-78AB-4F74-83EA-1A963908EA04"
        name:
          type: string
          example: "auto_approve"
        value:
          type: object
          example: {"enabled": true, "threshold": 5}
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T01:00:00Z"
      required: [id, project_id, name, value, created_at, updated_at]

    CreateProjectSettingRequest:
      type: object
      properties:
        name:
          type: string
          example: "auto_approve"
          maxLength: 100
        value:
          type: object
          example: {"enabled": true, "threshold": 5}
      required: [name, value]

    UpdateProjectSettingRequest:
      type: object
      properties:
        value:
          type: object
          example: {"enabled": false, "threshold": 10}
      required: [value]

    ProjectSettingResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectSetting'

    ListProjectSettingsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSetting'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Environment Schemas
    Environment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Environment ID
        project_id:
          type: string
          format: uuid
          description: Project ID
        key:
          type: string
          maxLength: 20
          description: Environment key (dev, stage, prod)
          example: "prod"
        name:
          type: string
          maxLength: 50
          description: Human-readable environment name
          example: "Production"
        api_key:
          type: string
          format: uuid
          description: API key for this environment
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
      required:
        - id
        - project_id
        - key
        - name
        - api_key
        - created_at

    CreateEnvironmentRequest:
      type: object
      properties:
        key:
          type: string
          maxLength: 20
          minLength: 1
          description: Environment key (dev, stage, prod)
          example: "prod"
        name:
          type: string
          maxLength: 50
          minLength: 1
          description: Human-readable environment name
          example: "Production"
      required:
        - key
        - name

    UpdateEnvironmentRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          minLength: 1
          description: Human-readable environment name
          example: "Production"
      required:
        - name

    EnvironmentResponse:
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/Environment'

    ListEnvironmentsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
        pagination:
          $ref: '#/components/schemas/Pagination'

