- name: success create simple feature
  fixtures:
    - empty_db
    - project

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_simple_feature
      request:
        method: POST
        path: /api/v1/projects/11111111-1111-1111-1111-111111111111/features
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body:
          key: "new_ui"
          name: "New UI"
          description: "New user interface feature"
          kind: "simple"
          default_variant: "on"
          enabled: true
          rollout_key: "user.id"
      response:
        status: 201
        headers:
          Content-Type: application/json
        json: |
          {
            "feature": {
              "id": "<<PRESENCE>>",
              "project_id": "11111111-1111-1111-1111-111111111111",
              "key": "new_ui",
              "name": "New UI",
              "description": "New user interface feature",
              "kind": "simple",
              "default_variant": "on",
              "enabled": true,
              "created_at": "<<PRESENCE>>",
              "updated_at": "<<PRESENCE>>"
            }
          }
      dbChecks:
        - query: SELECT key, name, description, kind, default_variant, enabled, rollout_key FROM features WHERE key = 'new_ui'
          result:
            - key: "new_ui"
              name: "New UI"
              description: "New user interface feature"
              kind: "simple"
              default_variant: "on"
              enabled: true
              rollout_key: "user.id"

- name: success create multivariant feature with variants and rules
  fixtures:
    - empty_db
    - project

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_multivariant_feature
      request:
        method: POST
        path: /api/v1/projects/11111111-1111-1111-1111-111111111111/features
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body:
          key: "ab_test"
          name: "A/B Test Feature"
          description: "A/B testing feature for user experience"
          kind: "multivariant"
          default_variant: "control"
          enabled: true
          rollout_key: "user.id"
          variants:
            - id: "33333333-3333-3333-3333-333333333333"
              name: "control"
              rollout_percent: 50
            - id: "44444444-4444-4444-4444-444444444444"
              name: "treatment"
              rollout_percent: 50
          rules:
            - id: "55555555-5555-5555-5555-555555555555"
              conditions:
                condition:
                  attribute: "user.id"
                  operator: "eq"
                  value: "123"
              flag_variant_id: "33333333-3333-3333-3333-333333333333"
              priority: 10
              is_customized: false
              action: "assign"
      response:
        status: 201
        headers:
          Content-Type: application/json
        json: |
          {
            "feature": {
              "id": "<<PRESENCE>>",
              "project_id": "11111111-1111-1111-1111-111111111111",
              "key": "ab_test",
              "name": "A/B Test Feature",
              "description": "A/B testing feature for user experience",
              "kind": "multivariant",
              "default_variant": "control",
              "enabled": true,
              "created_at": "<<PRESENCE>>",
              "updated_at": "<<PRESENCE>>"
            }
          }
      dbChecks:
        - query: SELECT key, name, description, kind, default_variant, enabled, rollout_key FROM features WHERE key = 'ab_test'
          result:
            - key: "ab_test"
              name: "A/B Test Feature"
              description: "A/B testing feature for user experience"
              kind: "multivariant"
              default_variant: "control"
              enabled: true
              rollout_key: "user.id"
        - query: SELECT name, rollout_percent FROM flag_variants WHERE feature_id = (SELECT id FROM features WHERE key = 'ab_test')
          result:
            - name: "control"
              rollout_percent: 50
            - name: "treatment"
              rollout_percent: 50
        - query: SELECT priority, is_customized, action::text FROM rules WHERE feature_id = (SELECT id FROM features WHERE key = 'ab_test')
          result:
            - priority: 10
              is_customized: false
              action: "assign"

- name: create feature without auth
  fixtures:
    - empty_db
    - project

  steps:
    - name: create_feature_unauthorized
      request:
        method: POST
        path: /api/v1/projects/11111111-1111-1111-1111-111111111111/features
        headers:
          Content-Type: application/json
        body:
          key: "new_ui"
          name: "New UI"
          kind: "simple"
          default_variant: "on"
      response:
        status: 401
        json: |
          {
            "error": {
              "message": "unauthorized"
            }
          }

- name: create feature without permissions
  fixtures:
    - empty_db
    - multiple_projects

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"dev4", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature
      request:
        method: POST
        path: /api/v1/projects/11111111-1111-1111-1111-111111111111/features
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body:
          key: "new_ui"
          name: "New UI"
          kind: "simple"
          default_variant: "on"
      response:
        status: 403
        json: |
          {
            "error": {
              "message": "permission denied"
            }
          }

- name: create feature for non-existent project
  fixtures:
    - empty_db
    - project

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_not_found
      request:
        method: POST
        path: /api/v1/projects/99999999-9999-9999-9999-999999999999/features
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body:
          key: "new_ui"
          name: "New UI"
          kind: "simple"
          default_variant: "on"
      response:
        status: 500

- name: create feature with validation errors - short key
  fixtures:
    - empty_db
    - project

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_short_key
      request:
        method: POST
        path: /api/v1/projects/11111111-1111-1111-1111-111111111111/features
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body:
          key: "a"
          name: "New UI"
          kind: "simple"
          default_variant: "on"
      response:
        status: 400

- name: create feature with validation errors - short name
  fixtures:
    - empty_db
    - project

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_short_name
      request:
        method: POST
        path: /api/v1/projects/11111111-1111-1111-1111-111111111111/features
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body:
          key: "new_ui"
          name: "A"
          kind: "simple"
          default_variant: "on"
      response:
        status: 400

- name: create feature with validation errors - missing required fields
  fixtures:
    - empty_db
    - project

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_missing_fields
      request:
        method: POST
        path: /api/v1/projects/11111111-1111-1111-1111-111111111111/features
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body:
          key: "new_ui"
          name: "New UI"
      response:
        status: 400
