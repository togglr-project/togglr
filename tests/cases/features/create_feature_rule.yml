- name: success create feature rule
  fixtures:
    - empty_db
    - feature_with_variants_and_rules
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_rule
      request:
        method: POST
        path: /api/v1/features/22222222-2222-2222-2222-222222222222/rules
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"conditions":{"condition":{"attribute":"user.role","operator":"eq","value":"admin"}},"action":"assign","flag_variant_id":"33333333-3333-3333-3333-333333333333","priority":20,"is_customized":false}
      response:
        status: 201
        headers:
          Content-Type: application/json
        json: |
          {
            "rule": {
              "id": "<<PRESENCE>>",
              "feature_id": "22222222-2222-2222-2222-222222222222",
              "conditions": {
                "condition": {
                  "attribute": "user.role",
                  "operator": "eq",
                  "value": "admin"
                }
              },
              "action": "assign",
              "flag_variant_id": "33333333-3333-3333-3333-333333333333",
              "priority": 20,
              "is_customized": false,
              "created_at": "<<PRESENCE>>"
            }
          }
      dbChecks:
        - query: SELECT action::text, priority, is_customized FROM rules WHERE feature_id = '22222222-2222-2222-2222-222222222222' AND priority = 20
          result:
            - action: "assign"
              priority: 20
              is_customized: false

#- name: success create feature rule with segment
#  fixtures:
#    - empty_db
#    - feature_with_variants_and_rules
#  steps:
#    - name: auth
#      request:
#        method: POST
#        path: /api/v1/auth/login
#        headers:
#          Content-Type: application/json
#        body: {"username":"admin", "password":"Warden123!"}
#      response:
#        status: 200
#        headers:
#          Content-Type: application/json
#
#    - name: create_feature_rule_with_segment
#      request:
#        method: POST
#        path: /api/v1/features/22222222-2222-2222-2222-222222222222/rules
#        headers:
#          Content-Type: application/json
#          Authorization: 'Bearer {{auth.response.access_token}}'
#        body: { "conditions": { "condition": { "attribute": "user.tier", "operator": "eq", "value": "vip" } }, "action": "include", "segment_id": "22222222-2222-2222-2222-222222222222", "priority": 30, "is_customized": true }
#      response:
#        status: 201
#        headers:
#          Content-Type: application/json
#        json: |
#          {
#            "rule": {
#              "id": "<<PRESENCE>>",
#              "feature_id": "22222222-2222-2222-2222-222222222222",
#              "project_id": "11111111-1111-1111-1111-111111111111",
#              "conditions": {
#                "condition": {
#                  "attribute": "user.tier",
#                  "operator": "eq",
#                  "value": "vip"
#                }
#              },
#              "action": "include",
#              "flag_variant_id": null,
#              "priority": 30,
#              "is_customized": true,
#              "segment_id": "22222222-2222-2222-2222-222222222222",
#              "created_at": "<<PRESENCE>>"
#            }
#          }
#      dbChecks:
#        - query: SELECT action::text, priority, is_customized, segment_id FROM rules WHERE feature_id = '22222222-2222-2222-2222-222222222222' AND priority = 30
#          result:
#            - action: "include"
#              priority: 30
#              is_customized: true
#              segment_id: "22222222-2222-2222-2222-222222222222"

- name: create feature rule without auth
  fixtures:
    - empty_db
    - feature
  steps:
    - name: create_feature_rule_no_auth
      request:
        method: POST
        path: /api/v1/features/22222222-2222-2222-2222-222222222222/rules
        headers:
          Content-Type: application/json
        body: { "conditions": { "condition": { "attribute": "user.id", "operator": "eq", "value": "123" } }, "action": "assign", "is_customized": false }
      response:
        status: 401
        json: |
          {
              "error": {
                "message": "<<PRESENCE>>"
              }
          }

- name: create feature rule without permissions
  fixtures:
    - empty_db
    - multiple_features
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"dev2", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_rule_no_permissions
      request:
        method: POST
        path: /api/v1/features/33333333-3333-3333-3333-333333333333/rules
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: { "conditions": { "condition": { "attribute": "user.id", "operator": "eq", "value": "123" } }, "action": "assign", "is_customized": false }
      response:
        status: 403
        json: |
          {
              "error": {
                "message": "<<PRESENCE>>"
              }
          }

- name: create feature rule for non-existent feature
  fixtures:
    - empty_db
    - project
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_rule_non_existent
      request:
        method: POST
        path: /api/v1/features/99999999-9999-9999-9999-999999999999/rules
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: { "conditions": { "condition": { "attribute": "user.id", "operator": "eq", "value": "123" } }, "action": "assign", "is_customized": false }
      response:
        status: 404
        json: |
          {
              "error": {
                "message": "<<PRESENCE>>"
              }
          }

- name: create feature rule with validation errors - missing required fields
  fixtures:
    - empty_db
    - feature
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_rule_missing_fields
      request:
        method: POST
        path: /api/v1/features/22222222-2222-2222-2222-222222222222/rules
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: { "priority": 10 }
      response:
        status: 400
        json: |
          {
            "error_message": "<<PRESENCE>>"
          }

- name: create feature rule with invalid JSON
  fixtures:
    - empty_db
    - feature
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: create_feature_rule_invalid_json
      request:
        method: POST
        path: /api/v1/features/22222222-2222-2222-2222-222222222222/rules
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: { "conditions": "invalid json here", "action": "assign", "is_customized": false }
      response:
        status: 400
        json: |
          {
              "error_message": "<<PRESENCE>>"
          }
