- name: success get feature with variants and rules
  fixtures:
    - empty_db
    - feature_with_variants_and_rules

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: get_feature
      request:
        method: GET
        path: /api/v1/features/22222222-2222-2222-2222-222222222222?environment_key=prod
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
      response:
        status: 200
        headers:
          Content-Type: application/json
        json: |
          {
            "feature": {
              "id": "22222222-2222-2222-2222-222222222222",
              "project_id": "11111111-1111-1111-1111-111111111111",
              "key": "multivariant_feature",
              "name": "Multivariant Feature",
              "description": "A feature with multiple variants",
              "kind": "multivariant",
              "default_value": "control",
              "enabled": true,
              "rollout_key": "user.id",
              "created_at": "<<PRESENCE>>",
              "updated_at": "<<PRESENCE>>",
              "is_active": true,
              "health_status": "<<PRESENCE>>",
              "tags": []
            },
            "variants": [
              {
                "id": "33333333-3333-3333-3333-333333333333",
                "feature_id": "22222222-2222-2222-2222-222222222222",
                "name": "control",
                "rollout_percent": 50
              },
              {
                "id": "44444444-4444-4444-4444-444444444444",
                "feature_id": "22222222-2222-2222-2222-222222222222",
                "name": "treatment",
                "rollout_percent": 50
              }
            ],
            "rules": [
              {
                "id": "55555555-5555-5555-5555-555555555555",
                "feature_id": "22222222-2222-2222-2222-222222222222",
                "segment_id": "66666666-6666-6666-6666-666666666666",
                "conditions": {
                  "condition": {
                    "attribute": "user.id",
                    "operator": "eq",
                    "value": "123"
                  }
                },
                "flag_variant_id": "33333333-3333-3333-3333-333333333333",
                "priority": 10,
                "created_at": "<<PRESENCE>>",
                "is_customized": true,
                "action": "assign"
              }
            ],
            "tags": []
          }

- name: success get simple feature
  fixtures:
    - empty_db
    - feature

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: get_feature
      request:
        method: GET
        path: /api/v1/features/22222222-2222-2222-2222-222222222222?environment_key=prod
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
      response:
        status: 200
        headers:
          Content-Type: application/json
        json: |
          {
            "feature": {
              "id": "22222222-2222-2222-2222-222222222222",
              "project_id": "11111111-1111-1111-1111-111111111111",
              "key": "new_ui",
              "name": "New UI",
              "description": "New user interface feature",
              "kind": "simple",
              "default_value": "on",
              "enabled": true,
              "rollout_key": "user.id",
              "created_at": "<<PRESENCE>>",
              "updated_at": "<<PRESENCE>>",
              "is_active": true,
              "health_status": "<<PRESENCE>>",
              "tags": []
            },
            "variants": [],
            "rules": [],
            "tags": []
          }

- name: get feature without auth
  fixtures:
    - empty_db
    - feature

  steps:
    - name: get_feature_unauthorized
      request:
        method: GET
        path: /api/v1/features/22222222-2222-2222-2222-222222222222?environment_key=prod
        headers:
          Content-Type: application/json
      response:
        status: 401
        json: |
          {
            "error": {
              "message": "unauthorized"
            }
          }

- name: get feature without permissions
  fixtures:
    - empty_db
    - multiple_features

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"dev2", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: get_feature
      request:
        method: GET
        path: /api/v1/features/33333333-3333-3333-3333-333333333333?environment_key=prod
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
      response:
        status: 403
        json: |
          {
            "error": {
              "message": "permission denied"
            }
          }

- name: get non-existent feature
  fixtures:
    - empty_db
    - feature

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: get_feature_not_found
      request:
        method: GET
        path: /api/v1/features/99999999-9999-9999-9999-999999999999?environment_key=prod
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
      response:
        status: 404
        json: |
          {
            "error": {
              "message": "feature not found"
            }
          }
