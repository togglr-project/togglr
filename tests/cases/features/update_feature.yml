- name: success update feature
  fixtures:
    - empty_db
    - feature
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: update_feature
      request:
        method: PUT
        path: /api/v1/features/22222222-2222-2222-2222-222222222222
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: { "key": "updated_ui", "name": "Updated UI", "description": "Updated user interface feature", "kind": "simple", "default_variant": "off", "enabled": false }
      response:
        status: 200
        headers:
          Content-Type: application/json
        json: |
          {
            "feature": {
              "id": "22222222-2222-2222-2222-222222222222",
              "project_id": "11111111-1111-1111-1111-111111111111",
              "key": "updated_ui",
              "name": "Updated UI",
              "description": "Updated user interface feature",
              "kind": "simple",
              "default_variant": "off",
              "enabled": false,
              "created_at": "<<PRESENCE>>",
              "updated_at": "<<PRESENCE>>",
              "is_active": false
            },
            "variants": [],
            "rules": []
          }
      dbChecks:
        - query: SELECT key, name, description, enabled FROM features WHERE id = '22222222-2222-2222-2222-222222222222'
          result:
            - key: "updated_ui"
              name: "Updated UI"
              description: "Updated user interface feature"
              enabled: false

- name: success update feature with variants and rules
  fixtures:
    - empty_db
    - feature_with_variants_and_rules
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: update_feature_with_variants_and_rules
      request:
        method: PUT
        path: /api/v1/features/22222222-2222-2222-2222-222222222222
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: { "key": "updated_multivariant", "name": "Updated Multivariant Feature", "description": "Updated feature with multiple variants", "kind": "multivariant", "default_variant": "treatment", "enabled": true, "rollout_key": "user.country" }
      response:
        status: 200
        headers:
          Content-Type: application/json
        json: |
          {
            "feature": {
              "id": "22222222-2222-2222-2222-222222222222",
              "project_id": "11111111-1111-1111-1111-111111111111",
              "key": "updated_multivariant",
              "name": "Updated Multivariant Feature",
              "description": "Updated feature with multiple variants",
              "kind": "multivariant",
              "default_variant": "treatment",
              "enabled": true,
              "rollout_key": "user.country",
              "created_at": "<<PRESENCE>>",
              "updated_at": "<<PRESENCE>>",
              "is_active": true
            },
            "variants": "<<PRESENCE>>",
            "rules": "<<PRESENCE>>"
          }
      dbChecks:
        - query: SELECT key, name, description, enabled, rollout_key FROM features WHERE id = '22222222-2222-2222-2222-222222222222'
          result:
            - key: "updated_multivariant"
              name: "Updated Multivariant Feature"
              description: "Updated feature with multiple variants"
              enabled: true
              rollout_key: "user.country"

- name: update feature without auth
  fixtures:
    - empty_db
    - feature
  steps:
    - name: update_feature_no_auth
      request:
        method: PUT
        path: /api/v1/features/22222222-2222-2222-2222-222222222222
        headers:
          Content-Type: application/json
        body: { "key": "unauthorized_update", "name": "Unauthorized Update", "kind": "simple", "default_variant": "on" }
      response:
        status: 401
        json: |
          {
            "error": {
              "message": "unauthorized"
            }
          }

- name: update feature without permissions
  fixtures:
    - empty_db
    - multiple_features
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"dev2", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: update_feature_no_permissions
      request:
        method: PUT
        path: /api/v1/features/33333333-3333-3333-3333-333333333333
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: { "key": "no_permissions_update", "name": "No Permissions Update", "kind": "simple", "default_variant": "on" }
      response:
        status: 403
        json: |
          {
            "error": {
              "message": "permission denied"
            }
          }

- name: update non-existent feature
  fixtures:
    - empty_db
    - project
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: update_non_existent_feature
      request:
        method: PUT
        path: /api/v1/features/99999999-9999-9999-9999-999999999999
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: { "key": "non_existent", "name": "Non Existent Feature", "kind": "simple", "default_variant": "on" }
      response:
        status: 404
        json: |
          {
            "error": {
              "message": "feature not found"
            }
          }

- name: update feature with validation errors - empty name
  fixtures:
    - empty_db
    - feature
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: update_feature_empty_name
      request:
        method: PUT
        path: /api/v1/features/22222222-2222-2222-2222-222222222222
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: '{ "key": "empty_name", "name": "", "kind": "simple", "default_variant": "on" }'
      response:
        status: 400
        json: |
          {
              "error_message": "<<PRESENCE>>"
          }

- name: update feature with validation errors - missing required fields
  fixtures:
    - empty_db
    - feature
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: update_feature_missing_fields
      request:
        method: PUT
        path: /api/v1/features/22222222-2222-2222-2222-222222222222
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: '{ "description": "Missing required fields" }'
      response:
        status: 400
        json: |
          {
              "error_message": "<<PRESENCE>>"
          }

- name: update feature with invalid JSON
  fixtures:
    - empty_db
    - feature
  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json

    - name: update_feature_invalid_json
      request:
        method: PUT
        path: /api/v1/features/22222222-2222-2222-2222-222222222222
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: '{ "key": "invalid_json", "name": "Invalid JSON", "kind": "simple", "default_variant": "invalid json here" }'
      response:
        status: 400
        json: |
          {
              "error_message": "<<PRESENCE>>"
          }

