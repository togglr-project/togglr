- name: success create user as superuser
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"newuser", "email":"newuser@togglr.tech", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 201
        json: |
          {
            "user": {
              "id": 2,
              "username": "newuser",
              "email": "newuser@togglr.tech",
              "is_superuser": false,
              "is_active": true,
              "is_tmp_password": true,
              "two_fa_enabled": false,
              "created_at": "<<PRESENCE>>",
              "is_external": false,
              "license_accepted": false,
              "project_roles": {},
              "project_permissions": {}
            }
          }
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 2
        - query: SELECT username, email, is_superuser, is_active, is_tmp_password FROM users WHERE username = 'newuser'
          result:
            - username: "newuser"
              email: "newuser@togglr.tech"
              is_superuser: false
              is_active: true
              is_tmp_password: true

- name: success create superuser as superuser
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_superuser
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"newadmin", "email":"newadmin@togglr.tech", "password":"NewPassword123!", "is_superuser":true}
      response:
        status: 201
        json: |
          {
            "user": {
              "id": 2,
              "username": "newadmin",
              "email": "newadmin@togglr.tech",
              "is_superuser": true,
              "is_active": true,
              "is_tmp_password": true,
              "two_fa_enabled": false,
              "created_at": "<<PRESENCE>>",
              "is_external": false,
              "license_accepted": false,
              "project_roles": {},
              "project_permissions": {}
            }
          }
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 2
        - query: SELECT username, email, is_superuser, is_active, is_tmp_password FROM users WHERE username = 'newadmin'
          result:
            - username: "newadmin"
              email: "newadmin@togglr.tech"
              is_superuser: true
              is_active: true
              is_tmp_password: true

- name: create user without auth
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: create_user_unauthorized
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
        body: {"username":"newuser", "email":"newuser@togglr.tech", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 401
        json: |
          {
            "error": {
              "message": "unauthorized"
            }
          }

- name: create user as regular user
  fixtures:
    - empty_db
    - regular_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"user", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_forbidden
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"newuser", "email":"newuser@togglr.tech", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 403
        json: |
          {
            "error": {
              "message": "Only superusers can create new users"
            }
          }

- name: create user with duplicate username
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_duplicate_username
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"admin", "email":"newuser@togglr.tech", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 400
        json: |
          {
            "error": {
              "message": "username already in use"
            }
          }

- name: create user with duplicate email
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_duplicate_email
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"newuser", "email":"admin@togglr.tech", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 400
        json: |
          {
            "error": {
              "message": "email already in use"
            }
          }
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 1
        - query: SELECT username FROM users WHERE email = 'admin@togglr.tech'
          result:
            - username: "admin"

- name: create user with short username
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_short_username
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"ab", "email":"newuser@togglr.tech", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 400
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 1
        - query: SELECT username FROM users WHERE email = 'newuser@togglr.tech'
          result: []

- name: create user with short password
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_short_password
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"newuser", "email":"newuser@togglr.tech", "password":"short", "is_superuser":false}
      response:
        status: 400
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 1
        - query: SELECT username FROM users WHERE email = 'newuser@togglr.tech'
          result: []

- name: create user with invalid email
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_invalid_email
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"newuser", "email":"invalid-email", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 400
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 1
        - query: SELECT username FROM users WHERE email = 'invalid-email'
          result: []

- name: create user with missing username
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_missing_username
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"email":"newuser@togglr.tech", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 400
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 1
        - query: SELECT username FROM users WHERE email = 'newuser@togglr.tech'
          result: []

- name: create user with missing email
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_missing_email
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"newuser", "password":"NewPassword123!", "is_superuser":false}
      response:
        status: 400
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 1
        - query: SELECT username FROM users WHERE username = 'newuser'
          result: []

- name: create user with missing password
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_missing_password
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"username":"newuser", "email":"newuser@togglr.tech", "is_superuser":false}
      response:
        status: 400
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 1
        - query: SELECT username FROM users WHERE username = 'newuser'
          result: []

- name: create user with malformed JSON
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: create_user_malformed_json
      request:
        method: POST
        path: /api/v1/users
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: '{"username":"newuser", "email":"newuser@togglr.tech", "password":"NewPassword123!"'
      response:
        status: 400
      dbChecks:
        - query: SELECT COUNT(*) AS cnt FROM users
          result:
            - cnt: 1
        - query: SELECT username FROM users WHERE username = 'newuser'
          result: []
