- name: success confirm 2FA
  fixtures:
    - empty_db
    - admin_user_with_2fa_setup

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: confirm_2fa
      request:
        method: POST
        path: /api/v1/users/me/2fa/confirm
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"code":"123456"}
      response:
        status: 204
      dbChecks:
        - query: SELECT two_fa_enabled, two_fa_secret, two_fa_confirmed_at FROM users WHERE username = 'admin'
          result:
            - two_fa_enabled: true
              two_fa_secret: "<<PRESENCE>>"
              two_fa_confirmed_at: "<<PRESENCE>>"

- name: confirm 2FA without auth
  fixtures:
    - empty_db
    - admin_user_with_2fa_setup

  steps:
    - name: confirm_2fa_unauthorized
      request:
        method: POST
        path: /api/v1/users/me/2fa/confirm
        headers:
          Content-Type: application/json
        body: {"code":"123456"}
      response:
        status: 401
        json: |
          {
            "error": {
              "message": "unauthorized"
            }
          }
      dbChecks:
        - query: SELECT two_fa_enabled, two_fa_secret, two_fa_confirmed_at FROM users WHERE username = 'admin'
          result:
            - two_fa_enabled: false
              two_fa_secret: "<<PRESENCE>>"
              two_fa_confirmed_at: null

- name: confirm 2FA with invalid code
  fixtures:
    - empty_db
    - admin_user_with_2fa_setup

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: confirm_2fa_invalid_code
      request:
        method: POST
        path: /api/v1/users/me/2fa/confirm
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"code":"000000"}
      response:
        status: 400
        json: |
          {
            "error": {
              "message": "invalid code"
            }
          }
      dbChecks:
        - query: SELECT two_fa_enabled, two_fa_secret, two_fa_confirmed_at FROM users WHERE username = 'admin'
          result:
            - two_fa_enabled: false
              two_fa_secret: "<<PRESENCE>>"
              two_fa_confirmed_at: null

- name: confirm 2FA without setup
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: confirm_2fa_not_setup
      request:
        method: POST
        path: /api/v1/users/me/2fa/confirm
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"code": "123456"}
      response:
        status: 400
        json: |
          {
            "error": {
              "message": "2FA secret not set"
            }
          }
      dbChecks:
        - query: SELECT two_fa_enabled, two_fa_secret, two_fa_confirmed_at FROM users WHERE username = 'admin'
          result:
            - two_fa_enabled: false
              two_fa_secret: null
              two_fa_confirmed_at: null

- name: confirm 2FA with missing code
  fixtures:
    - empty_db
    - admin_user_with_2fa_setup

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: confirm_2fa_missing_code
      request:
        method: POST
        path: /api/v1/users/me/2fa/confirm
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {}
      response:
        status: 400
        json: |
          {
            "error_message": "operation UserConfirm2FA: decode request: validate: invalid: code (string: required)"
          }
      dbChecks:
        - query: SELECT two_fa_enabled, two_fa_secret, two_fa_confirmed_at FROM users WHERE username = 'admin'
          result:
            - two_fa_enabled: false
              two_fa_secret: null
              two_fa_confirmed_at: null

- name: confirm 2FA with empty code
  fixtures:
    - empty_db
    - admin_user_with_2fa_setup

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: confirm_2fa_empty_code
      request:
        method: POST
        path: /api/v1/users/me/2fa/confirm
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"code": ""}
      response:
        status: 400
        json: |
          {
            "error_message": "operation UserConfirm2FA: decode request: validate: invalid: code (string: len 0 less than minimum 6)"
          }
      dbChecks:
        - query: SELECT two_fa_enabled, two_fa_secret, two_fa_confirmed_at FROM users WHERE username = 'admin'
          result:
            - two_fa_enabled: false
              two_fa_secret: null
              two_fa_confirmed_at: null

- name: confirm 2FA when not setup
  fixtures:
    - empty_db
    - admin_user

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: confirm_2fa_not_setup
      request:
        method: POST
        path: /api/v1/users/me/2fa/confirm
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"code":"123456"}
      response:
        status: 400
        json: |
          {
            "error": {
              "message": "2FA secret not set"
            }
          }
      dbChecks:
        - query: SELECT two_fa_enabled, two_fa_secret, two_fa_confirmed_at FROM users WHERE username = 'admin'
          result:
            - two_fa_enabled: false
              two_fa_secret: null
              two_fa_confirmed_at: null

- name: confirm 2FA when already enabled
  fixtures:
    - empty_db
    - admin_user_with_2fa

  steps:
    - name: auth
      request:
        method: POST
        path: /api/v1/auth/login
        headers:
          Content-Type: application/json
        body: {"username":"admin", "password":"Warden123!"}
      response:
        status: 200
        headers:
          Content-Type: application/json
    - name: confirm_2fa_already_enabled
      request:
        method: POST
        path: /api/v1/users/me/2fa/confirm
        headers:
          Content-Type: application/json
          Authorization: 'Bearer {{auth.response.access_token}}'
        body: {"code":"123456"}
      response:
        status: 400
        json: |
          {
            "error": {
              "message": "2FA is already enabled"
            }
          }
      dbChecks:
        - query: SELECT two_fa_enabled, two_fa_secret, two_fa_confirmed_at FROM users WHERE username = 'admin'
          result:
            - two_fa_enabled: true
              two_fa_secret: "<<PRESENCE>>"
              two_fa_confirmed_at: "<<PRESENCE>>" 