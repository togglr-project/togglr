version: '3.8'

services:
  etoggle-reverse-proxy:
    build:
      context: ../reverse-proxy
      dockerfile: Dockerfile
    container_name: etoggle-reverse-proxy
    ports:
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN}
      - BACKEND_URL=http://etoggle-backend:8080
      - FRONTEND_URL=http://etoggle-frontend
      - SSL_CERT=${SSL_CERT}
      - SSL_CERT_KEY=${SSL_CERT_KEY}
      - SECURE_LINK_MD5=${SECURE_LINK_MD5}
    volumes:
      - "./nginx/ssl:/etc/nginx/ssl"
    depends_on:
      etoggle-frontend:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "netstat", "-tln", "|", "grep", "443 && netstat", "-tln", "|", "grep", "8090"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  etoggle-frontend:
    build:
      context: ../webui
      dockerfile: Dockerfile
    container_name: etoggle-frontend
    environment:
      - etoggl_API_BASE_URL=https://${DOMAIN}
    restart: always
    depends_on:
      etoggle-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  etoggle-backend:
    container_name: etoggle-backend
    build:
      context: ../
      target: prod
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
    env_file:
      - compose.env
    command: ["/bin/app", "server"]
    depends_on:
      - etoggle-postgresql
    healthcheck:
      test: ["CMD", "curl", "-f", "--silent", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  etoggle-postgresql:
    image: postgres:16
    container_name: etoggle-postgresql
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
      PGDATA: /var/lib/postgresql/data/main
    volumes:
      - "postgresql_etoggl:/var/lib/postgresql/data/main"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "PG_PASSWORD=password pg_isready -U user -d db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
volumes:
    postgresql_etoggl: