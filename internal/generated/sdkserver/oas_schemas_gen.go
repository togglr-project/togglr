// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type ApiKeyAuth struct {
	APIKey string
	Roles  []string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyAuth) GetAPIKey() string {
	return s.APIKey
}

// GetRoles returns the value of Roles.
func (s *ApiKeyAuth) GetRoles() []string {
	return s.Roles
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// SetRoles sets the value of Roles.
func (s *ApiKeyAuth) SetRoles(val []string) {
	s.Roles = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Error ErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() ErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val ErrorError) {
	s.Error = val
}

type ErrorError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorInternalServerError
type ErrorInternalServerError struct {
	Error ErrorInternalServerErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorInternalServerError) GetError() ErrorInternalServerErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorInternalServerError) SetError(val ErrorInternalServerErrorError) {
	s.Error = val
}

func (*ErrorInternalServerError) listProjectFeaturesRes() {}

type ErrorInternalServerErrorError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorInternalServerErrorError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorInternalServerErrorError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorPermissionDenied
type ErrorPermissionDenied struct {
	Error ErrorPermissionDeniedError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorPermissionDenied) GetError() ErrorPermissionDeniedError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorPermissionDenied) SetError(val ErrorPermissionDeniedError) {
	s.Error = val
}

func (*ErrorPermissionDenied) listProjectFeaturesRes() {}

type ErrorPermissionDeniedError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorPermissionDeniedError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorPermissionDeniedError) SetMessage(val OptString) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorUnauthorized
type ErrorUnauthorized struct {
	Error ErrorUnauthorizedError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorUnauthorized) GetError() ErrorUnauthorizedError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorUnauthorized) SetError(val ErrorUnauthorizedError) {
	s.Error = val
}

func (*ErrorUnauthorized) listProjectFeaturesRes() {}

type ErrorUnauthorizedError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorUnauthorizedError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorUnauthorizedError) SetMessage(val OptString) {
	s.Message = val
}

// Ref: #/components/schemas/Feature
type Feature struct {
	ID             string      `json:"id"`
	Key            string      `json:"key"`
	Name           string      `json:"name"`
	Kind           FeatureKind `json:"kind"`
	DefaultVariant string      `json:"default_variant"`
	Enabled        bool        `json:"enabled"`
}

// GetID returns the value of ID.
func (s *Feature) GetID() string {
	return s.ID
}

// GetKey returns the value of Key.
func (s *Feature) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *Feature) GetName() string {
	return s.Name
}

// GetKind returns the value of Kind.
func (s *Feature) GetKind() FeatureKind {
	return s.Kind
}

// GetDefaultVariant returns the value of DefaultVariant.
func (s *Feature) GetDefaultVariant() string {
	return s.DefaultVariant
}

// GetEnabled returns the value of Enabled.
func (s *Feature) GetEnabled() bool {
	return s.Enabled
}

// SetID sets the value of ID.
func (s *Feature) SetID(val string) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *Feature) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *Feature) SetName(val string) {
	s.Name = val
}

// SetKind sets the value of Kind.
func (s *Feature) SetKind(val FeatureKind) {
	s.Kind = val
}

// SetDefaultVariant sets the value of DefaultVariant.
func (s *Feature) SetDefaultVariant(val string) {
	s.DefaultVariant = val
}

// SetEnabled sets the value of Enabled.
func (s *Feature) SetEnabled(val bool) {
	s.Enabled = val
}

// Ref: #/components/schemas/FeatureDetailsResponse
type FeatureDetailsResponse struct {
	Feature  Feature       `json:"feature"`
	Variants []FlagVariant `json:"variants"`
	Rules    []Rule        `json:"rules"`
}

// GetFeature returns the value of Feature.
func (s *FeatureDetailsResponse) GetFeature() Feature {
	return s.Feature
}

// GetVariants returns the value of Variants.
func (s *FeatureDetailsResponse) GetVariants() []FlagVariant {
	return s.Variants
}

// GetRules returns the value of Rules.
func (s *FeatureDetailsResponse) GetRules() []Rule {
	return s.Rules
}

// SetFeature sets the value of Feature.
func (s *FeatureDetailsResponse) SetFeature(val Feature) {
	s.Feature = val
}

// SetVariants sets the value of Variants.
func (s *FeatureDetailsResponse) SetVariants(val []FlagVariant) {
	s.Variants = val
}

// SetRules sets the value of Rules.
func (s *FeatureDetailsResponse) SetRules(val []Rule) {
	s.Rules = val
}

// Ref: #/components/schemas/FeatureKind
type FeatureKind string

const (
	FeatureKindBoolean      FeatureKind = "boolean"
	FeatureKindMultivariant FeatureKind = "multivariant"
)

// AllValues returns all FeatureKind values.
func (FeatureKind) AllValues() []FeatureKind {
	return []FeatureKind{
		FeatureKindBoolean,
		FeatureKindMultivariant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FeatureKind) MarshalText() ([]byte, error) {
	switch s {
	case FeatureKindBoolean:
		return []byte(s), nil
	case FeatureKindMultivariant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FeatureKind) UnmarshalText(data []byte) error {
	switch FeatureKind(data) {
	case FeatureKindBoolean:
		*s = FeatureKindBoolean
		return nil
	case FeatureKindMultivariant:
		*s = FeatureKindMultivariant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FlagVariant
type FlagVariant struct {
	ID             string `json:"id"`
	FeatureID      string `json:"feature_id"`
	Name           string `json:"name"`
	RolloutPercent uint   `json:"rollout_percent"`
}

// GetID returns the value of ID.
func (s *FlagVariant) GetID() string {
	return s.ID
}

// GetFeatureID returns the value of FeatureID.
func (s *FlagVariant) GetFeatureID() string {
	return s.FeatureID
}

// GetName returns the value of Name.
func (s *FlagVariant) GetName() string {
	return s.Name
}

// GetRolloutPercent returns the value of RolloutPercent.
func (s *FlagVariant) GetRolloutPercent() uint {
	return s.RolloutPercent
}

// SetID sets the value of ID.
func (s *FlagVariant) SetID(val string) {
	s.ID = val
}

// SetFeatureID sets the value of FeatureID.
func (s *FlagVariant) SetFeatureID(val string) {
	s.FeatureID = val
}

// SetName sets the value of Name.
func (s *FlagVariant) SetName(val string) {
	s.Name = val
}

// SetRolloutPercent sets the value of RolloutPercent.
func (s *FlagVariant) SetRolloutPercent(val uint) {
	s.RolloutPercent = val
}

type ListFeaturesResponse []FeatureDetailsResponse

func (*ListFeaturesResponse) listProjectFeaturesRes() {}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Rule
type Rule struct {
	ID            string          `json:"id"`
	FeatureID     string          `json:"feature_id"`
	Conditions    []RuleCondition `json:"conditions"`
	FlagVariantID string          `json:"flag_variant_id"`
	Priority      uint            `json:"priority"`
}

// GetID returns the value of ID.
func (s *Rule) GetID() string {
	return s.ID
}

// GetFeatureID returns the value of FeatureID.
func (s *Rule) GetFeatureID() string {
	return s.FeatureID
}

// GetConditions returns the value of Conditions.
func (s *Rule) GetConditions() []RuleCondition {
	return s.Conditions
}

// GetFlagVariantID returns the value of FlagVariantID.
func (s *Rule) GetFlagVariantID() string {
	return s.FlagVariantID
}

// GetPriority returns the value of Priority.
func (s *Rule) GetPriority() uint {
	return s.Priority
}

// SetID sets the value of ID.
func (s *Rule) SetID(val string) {
	s.ID = val
}

// SetFeatureID sets the value of FeatureID.
func (s *Rule) SetFeatureID(val string) {
	s.FeatureID = val
}

// SetConditions sets the value of Conditions.
func (s *Rule) SetConditions(val []RuleCondition) {
	s.Conditions = val
}

// SetFlagVariantID sets the value of FlagVariantID.
func (s *Rule) SetFlagVariantID(val string) {
	s.FlagVariantID = val
}

// SetPriority sets the value of Priority.
func (s *Rule) SetPriority(val uint) {
	s.Priority = val
}

type RuleAttribute string

// Single condition item.
// Ref: #/components/schemas/RuleCondition
type RuleCondition struct {
	Attribute RuleAttribute `json:"attribute"`
	Operator  RuleOperator  `json:"operator"`
	Value     jx.Raw        `json:"value"`
}

// GetAttribute returns the value of Attribute.
func (s *RuleCondition) GetAttribute() RuleAttribute {
	return s.Attribute
}

// GetOperator returns the value of Operator.
func (s *RuleCondition) GetOperator() RuleOperator {
	return s.Operator
}

// GetValue returns the value of Value.
func (s *RuleCondition) GetValue() jx.Raw {
	return s.Value
}

// SetAttribute sets the value of Attribute.
func (s *RuleCondition) SetAttribute(val RuleAttribute) {
	s.Attribute = val
}

// SetOperator sets the value of Operator.
func (s *RuleCondition) SetOperator(val RuleOperator) {
	s.Operator = val
}

// SetValue sets the value of Value.
func (s *RuleCondition) SetValue(val jx.Raw) {
	s.Value = val
}

// Operator for condition comparison.
// Ref: #/components/schemas/RuleOperator
type RuleOperator string

const (
	RuleOperatorEq         RuleOperator = "eq"
	RuleOperatorNeq        RuleOperator = "neq"
	RuleOperatorIn         RuleOperator = "in"
	RuleOperatorNotIn      RuleOperator = "not_in"
	RuleOperatorGt         RuleOperator = "gt"
	RuleOperatorGte        RuleOperator = "gte"
	RuleOperatorLt         RuleOperator = "lt"
	RuleOperatorLte        RuleOperator = "lte"
	RuleOperatorRegex      RuleOperator = "regex"
	RuleOperatorPercentage RuleOperator = "percentage"
)

// AllValues returns all RuleOperator values.
func (RuleOperator) AllValues() []RuleOperator {
	return []RuleOperator{
		RuleOperatorEq,
		RuleOperatorNeq,
		RuleOperatorIn,
		RuleOperatorNotIn,
		RuleOperatorGt,
		RuleOperatorGte,
		RuleOperatorLt,
		RuleOperatorLte,
		RuleOperatorRegex,
		RuleOperatorPercentage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleOperator) MarshalText() ([]byte, error) {
	switch s {
	case RuleOperatorEq:
		return []byte(s), nil
	case RuleOperatorNeq:
		return []byte(s), nil
	case RuleOperatorIn:
		return []byte(s), nil
	case RuleOperatorNotIn:
		return []byte(s), nil
	case RuleOperatorGt:
		return []byte(s), nil
	case RuleOperatorGte:
		return []byte(s), nil
	case RuleOperatorLt:
		return []byte(s), nil
	case RuleOperatorLte:
		return []byte(s), nil
	case RuleOperatorRegex:
		return []byte(s), nil
	case RuleOperatorPercentage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleOperator) UnmarshalText(data []byte) error {
	switch RuleOperator(data) {
	case RuleOperatorEq:
		*s = RuleOperatorEq
		return nil
	case RuleOperatorNeq:
		*s = RuleOperatorNeq
		return nil
	case RuleOperatorIn:
		*s = RuleOperatorIn
		return nil
	case RuleOperatorNotIn:
		*s = RuleOperatorNotIn
		return nil
	case RuleOperatorGt:
		*s = RuleOperatorGt
		return nil
	case RuleOperatorGte:
		*s = RuleOperatorGte
		return nil
	case RuleOperatorLt:
		*s = RuleOperatorLt
		return nil
	case RuleOperatorLte:
		*s = RuleOperatorLte
		return nil
	case RuleOperatorRegex:
		*s = RuleOperatorRegex
		return nil
	case RuleOperatorPercentage:
		*s = RuleOperatorPercentage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
