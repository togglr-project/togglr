// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetFeatureHealth implements GetFeatureHealth operation.
	//
	// Get health status of feature (including auto-disable state).
	//
	// GET /sdk/v1/features/{feature_key}/health
	GetFeatureHealth(ctx context.Context, params GetFeatureHealthParams) (GetFeatureHealthRes, error)
	// ReportFeatureError implements ReportFeatureError operation.
	//
	// Report feature execution error (for auto-disable).
	//
	// POST /sdk/v1/features/{feature_key}/report-error
	ReportFeatureError(ctx context.Context, req *FeatureErrorReport, params ReportFeatureErrorParams) (ReportFeatureErrorRes, error)
	// SdkV1FeaturesFeatureKeyEvaluatePost implements POST /sdk/v1/features/{feature_key}/evaluate operation.
	//
	// Returns feature evaluation result for given project and context.
	// The project is derived from the API key.
	//
	// POST /sdk/v1/features/{feature_key}/evaluate
	SdkV1FeaturesFeatureKeyEvaluatePost(ctx context.Context, req EvaluateRequest, params SdkV1FeaturesFeatureKeyEvaluatePostParams) (SdkV1FeaturesFeatureKeyEvaluatePostRes, error)
	// SdkV1HealthGet implements GET /sdk/v1/health operation.
	//
	// Health check for SDK server.
	//
	// GET /sdk/v1/health
	SdkV1HealthGet(ctx context.Context) (SdkV1HealthGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
