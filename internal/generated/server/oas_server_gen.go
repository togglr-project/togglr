// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddFeatureTag implements AddFeatureTag operation.
	//
	// Add tag to feature.
	//
	// POST /api/v1/features/{feature_id}/tags
	AddFeatureTag(ctx context.Context, req *AddFeatureTagRequest, params AddFeatureTagParams) (AddFeatureTagRes, error)
	// AddProject implements addProject operation.
	//
	// Add new project.
	//
	// POST /api/v1/projects/add
	AddProject(ctx context.Context, req *AddProjectRequest) (AddProjectRes, error)
	// ApprovePendingChange implements ApprovePendingChange operation.
	//
	// Approve a pending change.
	//
	// POST /api/v1/pending_changes/{pending_change_id}/approve
	ApprovePendingChange(ctx context.Context, req *ApprovePendingChangeRequest, params ApprovePendingChangeParams) (ApprovePendingChangeRes, error)
	// ArchiveProject implements ArchiveProject operation.
	//
	// Archive a project.
	//
	// DELETE /api/v1/projects/{project_id}
	ArchiveProject(ctx context.Context, params ArchiveProjectParams) (ArchiveProjectRes, error)
	// CancelLDAPSync implements CancelLDAPSync operation.
	//
	// Cancel ongoing synchronization.
	//
	// DELETE /api/v1/ldap/sync/cancel
	CancelLDAPSync(ctx context.Context) (CancelLDAPSyncRes, error)
	// CancelPendingChange implements CancelPendingChange operation.
	//
	// Cancel a pending change.
	//
	// POST /api/v1/pending_changes/{pending_change_id}/cancel
	CancelPendingChange(ctx context.Context, req *CancelPendingChangeRequest, params CancelPendingChangeParams) (CancelPendingChangeRes, error)
	// Confirm2FA implements Confirm2FA operation.
	//
	// Approve enable 2FA (code from app).
	//
	// POST /api/v1/users/me/2fa/confirm
	Confirm2FA(ctx context.Context, req *TwoFAConfirmRequest) (Confirm2FARes, error)
	// ConsumeSAMLAssertion implements ConsumeSAMLAssertion operation.
	//
	// Finishes the SAML authentication flow.
	// The Identity Provider sends an HTTP-POST request that contains **SAMLResponse** (mandatory,
	// Base64-encoded `<samlp:Response>` XML) and the optional **RelayState** parameter.
	// On success the service creates a user session (cookie or JWT) and redirects the browser
	// to the application UI.
	//
	// POST /api/v1/saml/acs
	ConsumeSAMLAssertion(ctx context.Context, req *ConsumeSAMLAssertionReq) (ConsumeSAMLAssertionRes, error)
	// CreateCategory implements CreateCategory operation.
	//
	// Create new category.
	//
	// POST /api/v1/categories
	CreateCategory(ctx context.Context, req *CreateCategoryRequest) (CreateCategoryRes, error)
	// CreateEnvironment implements CreateEnvironment operation.
	//
	// Create environment.
	//
	// POST /api/v1/projects/{project_id}/environments
	CreateEnvironment(ctx context.Context, req *CreateEnvironmentRequest, params CreateEnvironmentParams) (CreateEnvironmentRes, error)
	// CreateFeatureAlgorithm implements CreateFeatureAlgorithm operation.
	//
	// Create or attach algorithm to feature in environment.
	//
	// POST /api/v1/features/{feature_id}/algorithms/{environment_id}
	CreateFeatureAlgorithm(ctx context.Context, req *CreateFeatureAlgorithmRequest, params CreateFeatureAlgorithmParams) (CreateFeatureAlgorithmRes, error)
	// CreateFeatureFlagVariant implements CreateFeatureFlagVariant operation.
	//
	// Create flag variant for feature.
	//
	// POST /api/v1/features/{feature_id}/variants
	CreateFeatureFlagVariant(ctx context.Context, req *CreateFlagVariantRequest, params CreateFeatureFlagVariantParams) (CreateFeatureFlagVariantRes, error)
	// CreateFeatureRule implements CreateFeatureRule operation.
	//
	// Create rule for feature.
	//
	// POST /api/v1/features/{feature_id}/rules
	CreateFeatureRule(ctx context.Context, req *CreateRuleRequest, params CreateFeatureRuleParams) (CreateFeatureRuleRes, error)
	// CreateFeatureSchedule implements CreateFeatureSchedule operation.
	//
	// Create schedule for feature.
	//
	// POST /api/v1/features/{feature_id}/schedules
	CreateFeatureSchedule(ctx context.Context, req *CreateFeatureScheduleRequest, params CreateFeatureScheduleParams) (CreateFeatureScheduleRes, error)
	// CreateNotificationSetting implements CreateNotificationSetting operation.
	//
	// Create a new notification setting.
	//
	// POST /api/v1/projects/{project_id}/env/{environment_key}/notification-settings
	CreateNotificationSetting(ctx context.Context, req *CreateNotificationSettingRequest, params CreateNotificationSettingParams) (CreateNotificationSettingRes, error)
	// CreateProjectFeature implements CreateProjectFeature operation.
	//
	// Create feature for project.
	//
	// POST /api/v1/projects/{project_id}/features
	CreateProjectFeature(ctx context.Context, req *CreateFeatureRequest, params CreateProjectFeatureParams) (CreateProjectFeatureRes, error)
	// CreateProjectMembership implements CreateProjectMembership operation.
	//
	// Add membership to project.
	//
	// POST /api/v1/projects/{project_id}/memberships
	CreateProjectMembership(ctx context.Context, req *CreateMembershipRequest, params CreateProjectMembershipParams) (CreateProjectMembershipRes, error)
	// CreateProjectSegment implements CreateProjectSegment operation.
	//
	// Create segment for project.
	//
	// POST /api/v1/projects/{project_id}/segments
	CreateProjectSegment(ctx context.Context, req *CreateSegmentRequest, params CreateProjectSegmentParams) (CreateProjectSegmentRes, error)
	// CreateProjectSetting implements CreateProjectSetting operation.
	//
	// Create project setting.
	//
	// POST /api/v1/projects/{project_id}/settings
	CreateProjectSetting(ctx context.Context, req *CreateProjectSettingRequest, params CreateProjectSettingParams) (CreateProjectSettingRes, error)
	// CreateProjectTag implements CreateProjectTag operation.
	//
	// Create new tag for project.
	//
	// POST /api/v1/projects/{project_id}/tags
	CreateProjectTag(ctx context.Context, req *CreateProjectTagRequest, params CreateProjectTagParams) (CreateProjectTagRes, error)
	// CreateRuleAttribute implements CreateRuleAttribute operation.
	//
	// Create rule attribute.
	//
	// POST /api/v1/rule_attributes
	CreateRuleAttribute(ctx context.Context, req *CreateRuleAttributeRequest) (CreateRuleAttributeRes, error)
	// CreateUser implements CreateUser operation.
	//
	// Create a new user (superuser only).
	//
	// POST /api/v1/users
	CreateUser(ctx context.Context, req *CreateUserRequest) (CreateUserRes, error)
	// DeleteCategory implements DeleteCategory operation.
	//
	// Delete category.
	//
	// DELETE /api/v1/categories/{category_id}
	DeleteCategory(ctx context.Context, params DeleteCategoryParams) (DeleteCategoryRes, error)
	// DeleteEnvironment implements DeleteEnvironment operation.
	//
	// Delete environment.
	//
	// DELETE /api/v1/environments/{environment_id}
	DeleteEnvironment(ctx context.Context, params DeleteEnvironmentParams) (DeleteEnvironmentRes, error)
	// DeleteFeature implements DeleteFeature operation.
	//
	// Delete feature.
	//
	// DELETE /api/v1/features/{feature_id}
	DeleteFeature(ctx context.Context, params DeleteFeatureParams) (DeleteFeatureRes, error)
	// DeleteFeatureAlgorithm implements DeleteFeatureAlgorithm operation.
	//
	// Delete feature algorithm from feature.
	//
	// DELETE /api/v1/features/{feature_id}/algorithms/{environment_id}
	DeleteFeatureAlgorithm(ctx context.Context, params DeleteFeatureAlgorithmParams) (DeleteFeatureAlgorithmRes, error)
	// DeleteFeatureSchedule implements DeleteFeatureSchedule operation.
	//
	// Delete feature schedule by ID.
	//
	// DELETE /api/v1/feature-schedules/{schedule_id}
	DeleteFeatureSchedule(ctx context.Context, params DeleteFeatureScheduleParams) (DeleteFeatureScheduleRes, error)
	// DeleteLDAPConfig implements DeleteLDAPConfig operation.
	//
	// Delete LDAP configuration.
	//
	// DELETE /api/v1/ldap/config
	DeleteLDAPConfig(ctx context.Context) (DeleteLDAPConfigRes, error)
	// DeleteNotificationSetting implements DeleteNotificationSetting operation.
	//
	// Delete a notification setting.
	//
	// DELETE /api/v1/projects/{project_id}/env/{environment_key}/notification-settings/{setting_id}
	DeleteNotificationSetting(ctx context.Context, params DeleteNotificationSettingParams) (DeleteNotificationSettingRes, error)
	// DeleteProjectMembership implements DeleteProjectMembership operation.
	//
	// Delete membership.
	//
	// DELETE /api/v1/projects/{project_id}/memberships/{membership_id}
	DeleteProjectMembership(ctx context.Context, params DeleteProjectMembershipParams) (DeleteProjectMembershipRes, error)
	// DeleteProjectSetting implements DeleteProjectSetting operation.
	//
	// Delete project setting.
	//
	// DELETE /api/v1/projects/{project_id}/settings/{setting_name}
	DeleteProjectSetting(ctx context.Context, params DeleteProjectSettingParams) (DeleteProjectSettingRes, error)
	// DeleteProjectTag implements DeleteProjectTag operation.
	//
	// Delete tag.
	//
	// DELETE /api/v1/projects/{project_id}/tags/{tag_id}
	DeleteProjectTag(ctx context.Context, params DeleteProjectTagParams) (DeleteProjectTagRes, error)
	// DeleteRuleAttribute implements DeleteRuleAttribute operation.
	//
	// Delete rule attribute.
	//
	// DELETE /api/v1/rule_attributes/{name}
	DeleteRuleAttribute(ctx context.Context, params DeleteRuleAttributeParams) (DeleteRuleAttributeRes, error)
	// DeleteSegment implements DeleteSegment operation.
	//
	// Delete segment.
	//
	// DELETE /api/v1/segments/{segment_id}
	DeleteSegment(ctx context.Context, params DeleteSegmentParams) (DeleteSegmentRes, error)
	// DeleteUser implements DeleteUser operation.
	//
	// Delete a user (superuser only, cannot delete superusers).
	//
	// DELETE /api/v1/users/{user_id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// Disable2FA implements Disable2FA operation.
	//
	// Disable 2FA (using email-confirmation).
	//
	// POST /api/v1/users/me/2fa/disable
	Disable2FA(ctx context.Context, req *TwoFADisableRequest) (Disable2FARes, error)
	// ForgotPassword implements ForgotPassword operation.
	//
	// Request a password reset.
	//
	// POST /api/v1/auth/forgot-password
	ForgotPassword(ctx context.Context, req *ForgotPasswordRequest) (ForgotPasswordRes, error)
	// GetAuditLogEntry implements GetAuditLogEntry operation.
	//
	// Get audit log entry by ID.
	//
	// GET /api/v1/audit/{id}
	GetAuditLogEntry(ctx context.Context, params GetAuditLogEntryParams) (GetAuditLogEntryRes, error)
	// GetCategory implements GetCategory operation.
	//
	// Get category details.
	//
	// GET /api/v1/categories/{category_id}
	GetCategory(ctx context.Context, params GetCategoryParams) (GetCategoryRes, error)
	// GetCurrentUser implements GetCurrentUser operation.
	//
	// Get current user information.
	//
	// GET /api/v1/users/me
	GetCurrentUser(ctx context.Context) (GetCurrentUserRes, error)
	// GetDashboardOverview implements GetDashboardOverview operation.
	//
	// Returns aggregated dashboard data for a project:
	// - project health
	// - category health
	// - feature activity (upcoming & recent)
	// - recent activity (batched by request_id)
	// - risky features
	// - pending summary.
	//
	// GET /api/v1/dashboard/overview
	GetDashboardOverview(ctx context.Context, params GetDashboardOverviewParams) (GetDashboardOverviewRes, error)
	// GetEnvironment implements GetEnvironment operation.
	//
	// Get environment.
	//
	// GET /api/v1/environments/{environment_id}
	GetEnvironment(ctx context.Context, params GetEnvironmentParams) (GetEnvironmentRes, error)
	// GetFeature implements GetFeature operation.
	//
	// Get feature with rules and variants.
	//
	// GET /api/v1/features/{feature_id}
	GetFeature(ctx context.Context, params GetFeatureParams) (GetFeatureRes, error)
	// GetFeatureAlgorithm implements GetFeatureAlgorithm operation.
	//
	// Get algorithm configuration for a feature in environment.
	//
	// GET /api/v1/features/{feature_id}/algorithms/{environment_id}
	GetFeatureAlgorithm(ctx context.Context, params GetFeatureAlgorithmParams) (GetFeatureAlgorithmRes, error)
	// GetFeatureSchedule implements GetFeatureSchedule operation.
	//
	// Get feature schedule by ID.
	//
	// GET /api/v1/feature-schedules/{schedule_id}
	GetFeatureSchedule(ctx context.Context, params GetFeatureScheduleParams) (GetFeatureScheduleRes, error)
	// GetFeatureTimeline implements GetFeatureTimeline operation.
	//
	// Get feature timeline within period.
	//
	// GET /api/v1/features/{feature_id}/timeline
	GetFeatureTimeline(ctx context.Context, params GetFeatureTimelineParams) (GetFeatureTimelineRes, error)
	// GetLDAPConfig implements GetLDAPConfig operation.
	//
	// Get LDAP configuration.
	//
	// GET /api/v1/ldap/config
	GetLDAPConfig(ctx context.Context) (GetLDAPConfigRes, error)
	// GetLDAPStatistics implements GetLDAPStatistics operation.
	//
	// Get LDAP statistics.
	//
	// GET /api/v1/ldap/statistics
	GetLDAPStatistics(ctx context.Context) (GetLDAPStatisticsRes, error)
	// GetLDAPSyncLogDetails implements GetLDAPSyncLogDetails operation.
	//
	// Get synchronization log details.
	//
	// GET /api/v1/ldap/sync/logs/{id}
	GetLDAPSyncLogDetails(ctx context.Context, params GetLDAPSyncLogDetailsParams) (GetLDAPSyncLogDetailsRes, error)
	// GetLDAPSyncLogs implements GetLDAPSyncLogs operation.
	//
	// Get synchronization logs.
	//
	// GET /api/v1/ldap/sync/logs
	GetLDAPSyncLogs(ctx context.Context, params GetLDAPSyncLogsParams) (GetLDAPSyncLogsRes, error)
	// GetLDAPSyncProgress implements GetLDAPSyncProgress operation.
	//
	// Get synchronization progress.
	//
	// GET /api/v1/ldap/sync/progress
	GetLDAPSyncProgress(ctx context.Context) (GetLDAPSyncProgressRes, error)
	// GetLDAPSyncStatus implements GetLDAPSyncStatus operation.
	//
	// Get synchronization status.
	//
	// GET /api/v1/ldap/sync/status
	GetLDAPSyncStatus(ctx context.Context) (GetLDAPSyncStatusRes, error)
	// GetNotificationSetting implements GetNotificationSetting operation.
	//
	// Get a specific notification setting.
	//
	// GET /api/v1/projects/{project_id}/env/{environment_key}/notification-settings/{setting_id}
	GetNotificationSetting(ctx context.Context, params GetNotificationSettingParams) (GetNotificationSettingRes, error)
	// GetPendingChange implements GetPendingChange operation.
	//
	// Get pending change by ID.
	//
	// GET /api/v1/pending_changes/{pending_change_id}
	GetPendingChange(ctx context.Context, params GetPendingChangeParams) (GetPendingChangeRes, error)
	// GetProject implements GetProject operation.
	//
	// Get project details.
	//
	// GET /api/v1/projects/{project_id}
	GetProject(ctx context.Context, params GetProjectParams) (GetProjectRes, error)
	// GetProjectMembership implements GetProjectMembership operation.
	//
	// Get membership.
	//
	// GET /api/v1/projects/{project_id}/memberships/{membership_id}
	GetProjectMembership(ctx context.Context, params GetProjectMembershipParams) (GetProjectMembershipRes, error)
	// GetProjectSetting implements GetProjectSetting operation.
	//
	// Get project setting by name.
	//
	// GET /api/v1/projects/{project_id}/settings/{setting_name}
	GetProjectSetting(ctx context.Context, params GetProjectSettingParams) (GetProjectSettingRes, error)
	// GetProjectTag implements GetProjectTag operation.
	//
	// Get tag details.
	//
	// GET /api/v1/projects/{project_id}/tags/{tag_id}
	GetProjectTag(ctx context.Context, params GetProjectTagParams) (GetProjectTagRes, error)
	// GetRolePermissions implements GetRolePermissions operation.
	//
	// Get permissions for a role.
	//
	// GET /api/v1/roles/{role_id}/permissions
	GetRolePermissions(ctx context.Context, params GetRolePermissionsParams) (GetRolePermissionsRes, error)
	// GetSAMLMetadata implements GetSAMLMetadata operation.
	//
	// Get SAML metadata.
	//
	// GET /api/v1/saml/metadata
	GetSAMLMetadata(ctx context.Context) (GetSAMLMetadataRes, error)
	// GetSSOProviders implements GetSSOProviders operation.
	//
	// Get available SSO providers.
	//
	// GET /api/v1/auth/sso/providers
	GetSSOProviders(ctx context.Context) (GetSSOProvidersRes, error)
	// GetSegment implements GetSegment operation.
	//
	// Get segment by ID.
	//
	// GET /api/v1/segments/{segment_id}
	GetSegment(ctx context.Context, params GetSegmentParams) (GetSegmentRes, error)
	// GetUnreadNotificationsCount implements GetUnreadNotificationsCount operation.
	//
	// Get unread notifications count.
	//
	// GET /api/v1/notifications/unread-count
	GetUnreadNotificationsCount(ctx context.Context) (GetUnreadNotificationsCountRes, error)
	// GetUserNotifications implements GetUserNotifications operation.
	//
	// Get user notifications.
	//
	// GET /api/v1/notifications
	GetUserNotifications(ctx context.Context, params GetUserNotificationsParams) (GetUserNotificationsRes, error)
	// InitiateTOTPApproval implements InitiateTOTPApproval operation.
	//
	// Initiate TOTP approval session.
	//
	// POST /api/v1/pending_changes/{pending_change_id}/initiate-totp
	InitiateTOTPApproval(ctx context.Context, req *InitiateTOTPApprovalRequest, params InitiateTOTPApprovalParams) (InitiateTOTPApprovalRes, error)
	// ListAlgorithms implements ListAlgorithms operation.
	//
	// List of algorithms.
	//
	// GET /api/v1/algorithms
	ListAlgorithms(ctx context.Context) (ListAlgorithmsRes, error)
	// ListAllFeatureSchedules implements ListAllFeatureSchedules operation.
	//
	// List all feature schedules.
	//
	// GET /api/v1/feature-schedules
	ListAllFeatureSchedules(ctx context.Context) (ListAllFeatureSchedulesRes, error)
	// ListCategories implements ListCategories operation.
	//
	// Get categories list.
	//
	// GET /api/v1/categories
	ListCategories(ctx context.Context) (ListCategoriesRes, error)
	// ListFeatureAlgorithms implements ListFeatureAlgorithms operation.
	//
	// List feature algorithms for a feature.
	//
	// GET /api/v1/projects/{project_id}/feature-algorithms
	ListFeatureAlgorithms(ctx context.Context, params ListFeatureAlgorithmsParams) (ListFeatureAlgorithmsRes, error)
	// ListFeatureFlagVariants implements ListFeatureFlagVariants operation.
	//
	// List flag variants for feature.
	//
	// GET /api/v1/features/{feature_id}/variants
	ListFeatureFlagVariants(ctx context.Context, params ListFeatureFlagVariantsParams) (ListFeatureFlagVariantsRes, error)
	// ListFeatureRules implements ListFeatureRules operation.
	//
	// List rules for feature.
	//
	// GET /api/v1/features/{feature_id}/rules
	ListFeatureRules(ctx context.Context, params ListFeatureRulesParams) (ListFeatureRulesRes, error)
	// ListFeatureSchedules implements ListFeatureSchedules operation.
	//
	// List schedules for feature.
	//
	// GET /api/v1/features/{feature_id}/schedules
	ListFeatureSchedules(ctx context.Context, params ListFeatureSchedulesParams) (ListFeatureSchedulesRes, error)
	// ListFeatureTags implements ListFeatureTags operation.
	//
	// List feature tags.
	//
	// GET /api/v1/features/{feature_id}/tags
	ListFeatureTags(ctx context.Context, params ListFeatureTagsParams) (ListFeatureTagsRes, error)
	// ListNotificationSettings implements ListNotificationSettings operation.
	//
	// List all notification settings for a project.
	//
	// GET /api/v1/projects/{project_id}/env/{environment_key}/notification-settings
	ListNotificationSettings(ctx context.Context, params ListNotificationSettingsParams) (ListNotificationSettingsRes, error)
	// ListPendingChanges implements ListPendingChanges operation.
	//
	// List pending changes.
	//
	// GET /api/v1/pending_changes
	ListPendingChanges(ctx context.Context, params ListPendingChangesParams) (ListPendingChangesRes, error)
	// ListPermissions implements ListPermissions operation.
	//
	// List all permissions.
	//
	// GET /api/v1/permissions
	ListPermissions(ctx context.Context) (ListPermissionsRes, error)
	// ListProjectAuditLogs implements ListProjectAuditLogs operation.
	//
	// List audit log entries for project.
	//
	// GET /api/v1/projects/{project_id}/audit
	ListProjectAuditLogs(ctx context.Context, params ListProjectAuditLogsParams) (ListProjectAuditLogsRes, error)
	// ListProjectChanges implements ListProjectChanges operation.
	//
	// Get history of changes made to project features, rules, and other entities grouped by request_id.
	//
	// GET /api/v1/projects/{project_id}/changes
	ListProjectChanges(ctx context.Context, params ListProjectChangesParams) (ListProjectChangesRes, error)
	// ListProjectEnvironments implements ListProjectEnvironments operation.
	//
	// List project environments.
	//
	// GET /api/v1/projects/{project_id}/environments
	ListProjectEnvironments(ctx context.Context, params ListProjectEnvironmentsParams) (ListProjectEnvironmentsRes, error)
	// ListProjectFeatures implements ListProjectFeatures operation.
	//
	// List features for project.
	//
	// GET /api/v1/projects/{project_id}/features
	ListProjectFeatures(ctx context.Context, params ListProjectFeaturesParams) (ListProjectFeaturesRes, error)
	// ListProjectMemberships implements ListProjectMemberships operation.
	//
	// List memberships for project.
	//
	// GET /api/v1/projects/{project_id}/memberships
	ListProjectMemberships(ctx context.Context, params ListProjectMembershipsParams) (ListProjectMembershipsRes, error)
	// ListProjectSegments implements ListProjectSegments operation.
	//
	// List segments for project.
	//
	// GET /api/v1/projects/{project_id}/segments
	ListProjectSegments(ctx context.Context, params ListProjectSegmentsParams) (ListProjectSegmentsRes, error)
	// ListProjectSettings implements ListProjectSettings operation.
	//
	// List project settings.
	//
	// GET /api/v1/projects/{project_id}/settings
	ListProjectSettings(ctx context.Context, params ListProjectSettingsParams) (ListProjectSettingsRes, error)
	// ListProjectTags implements ListProjectTags operation.
	//
	// Get tags list for project.
	//
	// GET /api/v1/projects/{project_id}/tags
	ListProjectTags(ctx context.Context, params ListProjectTagsParams) (ListProjectTagsRes, error)
	// ListProjects implements ListProjects operation.
	//
	// Get projects list.
	//
	// GET /api/v1/projects
	ListProjects(ctx context.Context) (ListProjectsRes, error)
	// ListRolePermissions implements ListRolePermissions operation.
	//
	// List permissions for all roles.
	//
	// GET /api/v1/roles/permissions
	ListRolePermissions(ctx context.Context) (ListRolePermissionsRes, error)
	// ListRoles implements ListRoles operation.
	//
	// List all roles.
	//
	// GET /api/v1/roles
	ListRoles(ctx context.Context) (ListRolesRes, error)
	// ListRuleAttributes implements ListRuleAttributes operation.
	//
	// List of rule attributes.
	//
	// GET /api/v1/rule_attributes
	ListRuleAttributes(ctx context.Context) (ListRuleAttributesRes, error)
	// ListSegmentDesyncFeatureIDs implements ListSegmentDesyncFeatureIDs operation.
	//
	// Get desync feature IDs by segment ID.
	//
	// GET /api/v1/segments/{segment_id}/desync-features
	ListSegmentDesyncFeatureIDs(ctx context.Context, params ListSegmentDesyncFeatureIDsParams) (ListSegmentDesyncFeatureIDsRes, error)
	// ListUsers implements ListUsers operation.
	//
	// List all users (superuser only).
	//
	// GET /api/v1/users
	ListUsers(ctx context.Context) (ListUsersRes, error)
	// Login implements Login operation.
	//
	// Authenticate user and get access token.
	//
	// POST /api/v1/auth/login
	Login(ctx context.Context, req *LoginRequest) (LoginRes, error)
	// MarkAllNotificationsAsRead implements MarkAllNotificationsAsRead operation.
	//
	// Mark all notifications as read.
	//
	// PUT /api/v1/notifications/read-all
	MarkAllNotificationsAsRead(ctx context.Context) (MarkAllNotificationsAsReadRes, error)
	// MarkNotificationAsRead implements MarkNotificationAsRead operation.
	//
	// Mark notification as read.
	//
	// PUT /api/v1/notifications/{notification_id}/read
	MarkNotificationAsRead(ctx context.Context, params MarkNotificationAsReadParams) (MarkNotificationAsReadRes, error)
	// RefreshToken implements RefreshToken operation.
	//
	// Refresh access token.
	//
	// POST /api/v1/auth/refresh
	RefreshToken(ctx context.Context, req *RefreshTokenRequest) (RefreshTokenRes, error)
	// RejectPendingChange implements RejectPendingChange operation.
	//
	// Reject a pending change.
	//
	// POST /api/v1/pending_changes/{pending_change_id}/reject
	RejectPendingChange(ctx context.Context, req *RejectPendingChangeRequest, params RejectPendingChangeParams) (RejectPendingChangeRes, error)
	// RemoveFeatureTag implements RemoveFeatureTag operation.
	//
	// Remove tag from feature.
	//
	// DELETE /api/v1/features/{feature_id}/tags
	RemoveFeatureTag(ctx context.Context, params RemoveFeatureTagParams) (RemoveFeatureTagRes, error)
	// Reset2FA implements Reset2FA operation.
	//
	// Reset/generate secret 2FA (using email-confirmation).
	//
	// POST /api/v1/users/me/2fa/reset
	Reset2FA(ctx context.Context, req *TwoFAResetRequest) (Reset2FARes, error)
	// ResetPassword implements ResetPassword operation.
	//
	// Reset password using token.
	//
	// POST /api/v1/auth/reset-password
	ResetPassword(ctx context.Context, req *ResetPasswordRequest) (ResetPasswordRes, error)
	// SSOCallback implements SSOCallback operation.
	//
	// Handle SSO callback from Keycloak.
	//
	// POST /api/v1/auth/sso/callback
	SSOCallback(ctx context.Context, req *SSOCallbackRequest) (SSOCallbackRes, error)
	// SSOInitiate implements SSOInitiate operation.
	//
	// Initiate SSO login flow.
	//
	// GET /api/v1/auth/sso/initiate
	SSOInitiate(ctx context.Context, params SSOInitiateParams) (SSOInitiateRes, error)
	// Send2FACode implements send2FACode operation.
	//
	// Send 2FA email code for disable/reset.
	//
	// POST /api/v1/users/me/2fa/send_code
	Send2FACode(ctx context.Context) (Send2FACodeRes, error)
	// SendTestNotification implements sendTestNotification operation.
	//
	// Send test notification.
	//
	// POST /api/v1/projects/{project_id}/env/{environment_key}/notification-settings/{setting_id}/test
	SendTestNotification(ctx context.Context, params SendTestNotificationParams) (SendTestNotificationRes, error)
	// SetSuperuserStatus implements SetSuperuserStatus operation.
	//
	// Set or unset superuser status (superuser only, cannot modify admin user).
	//
	// PUT /api/v1/users/{user_id}/superuser
	SetSuperuserStatus(ctx context.Context, req *SetSuperuserStatusRequest, params SetSuperuserStatusParams) (SetSuperuserStatusRes, error)
	// SetUserActiveStatus implements SetUserActiveStatus operation.
	//
	// Set or unset user active status (superuser only).
	//
	// PUT /api/v1/users/{user_id}/active
	SetUserActiveStatus(ctx context.Context, req *SetUserActiveStatusRequest, params SetUserActiveStatusParams) (SetUserActiveStatusRes, error)
	// Setup2FA implements Setup2FA operation.
	//
	// Begin setup 2FA (generate secret and QR-code).
	//
	// POST /api/v1/users/me/2fa/setup
	Setup2FA(ctx context.Context) (Setup2FARes, error)
	// SyncCustomizedFeatureRule implements SyncCustomizedFeatureRule operation.
	//
	// Synchronize customized feature rule.
	//
	// PUT /api/v1/features/{feature_id}/rules/{rule_id}/sync
	SyncCustomizedFeatureRule(ctx context.Context, params SyncCustomizedFeatureRuleParams) (SyncCustomizedFeatureRuleRes, error)
	// SyncLDAPUsers implements SyncLDAPUsers operation.
	//
	// Start user synchronization.
	//
	// POST /api/v1/ldap/sync/users
	SyncLDAPUsers(ctx context.Context) (SyncLDAPUsersRes, error)
	// TestFeatureTimeline implements TestFeatureTimeline operation.
	//
	// Test feature timeline with mock schedules.
	//
	// POST /api/v1/features/{feature_id}/timeline/test
	TestFeatureTimeline(ctx context.Context, req *TestFeatureTimelineRequest, params TestFeatureTimelineParams) (TestFeatureTimelineRes, error)
	// TestLDAPConnection implements TestLDAPConnection operation.
	//
	// Test LDAP connection.
	//
	// POST /api/v1/ldap/test-connection
	TestLDAPConnection(ctx context.Context, req *LDAPConnectionTest) (TestLDAPConnectionRes, error)
	// ToggleFeature implements ToggleFeature operation.
	//
	// Toggle feature enabled state.
	//
	// PUT /api/v1/features/{feature_id}/toggle
	ToggleFeature(ctx context.Context, req *ToggleFeatureRequest, params ToggleFeatureParams) (ToggleFeatureRes, error)
	// UpdateCategory implements UpdateCategory operation.
	//
	// Update category.
	//
	// PUT /api/v1/categories/{category_id}
	UpdateCategory(ctx context.Context, req *UpdateCategoryRequest, params UpdateCategoryParams) (UpdateCategoryRes, error)
	// UpdateEnvironment implements UpdateEnvironment operation.
	//
	// Update environment.
	//
	// PUT /api/v1/environments/{environment_id}
	UpdateEnvironment(ctx context.Context, req *UpdateEnvironmentRequest, params UpdateEnvironmentParams) (UpdateEnvironmentRes, error)
	// UpdateFeature implements UpdateFeature operation.
	//
	// Update feature with rules and variants.
	//
	// PUT /api/v1/features/{feature_id}
	UpdateFeature(ctx context.Context, req *CreateFeatureRequest, params UpdateFeatureParams) (UpdateFeatureRes, error)
	// UpdateFeatureAlgorithm implements UpdateFeatureAlgorithm operation.
	//
	// Update feature algorithm configuration.
	//
	// PATCH /api/v1/features/{feature_id}/algorithms/{environment_id}
	UpdateFeatureAlgorithm(ctx context.Context, req *UpdateFeatureAlgorithmRequest, params UpdateFeatureAlgorithmParams) (UpdateFeatureAlgorithmRes, error)
	// UpdateFeatureSchedule implements UpdateFeatureSchedule operation.
	//
	// Update feature schedule by ID.
	//
	// PUT /api/v1/feature-schedules/{schedule_id}
	UpdateFeatureSchedule(ctx context.Context, req *UpdateFeatureScheduleRequest, params UpdateFeatureScheduleParams) (UpdateFeatureScheduleRes, error)
	// UpdateLDAPConfig implements UpdateLDAPConfig operation.
	//
	// Create or update LDAP configuration.
	//
	// POST /api/v1/ldap/config
	UpdateLDAPConfig(ctx context.Context, req *LDAPConfig) (UpdateLDAPConfigRes, error)
	// UpdateLicenseAcceptance implements UpdateLicenseAcceptance operation.
	//
	// Update license acceptance status.
	//
	// PUT /api/v1/users/me/license-acceptance
	UpdateLicenseAcceptance(ctx context.Context, req *UpdateLicenseAcceptanceRequest) (UpdateLicenseAcceptanceRes, error)
	// UpdateNotificationSetting implements UpdateNotificationSetting operation.
	//
	// Update a notification setting.
	//
	// PUT /api/v1/projects/{project_id}/env/{environment_key}/notification-settings/{setting_id}
	UpdateNotificationSetting(ctx context.Context, req *UpdateNotificationSettingRequest, params UpdateNotificationSettingParams) (UpdateNotificationSettingRes, error)
	// UpdateProject implements UpdateProject operation.
	//
	// Update project name and description.
	//
	// PUT /api/v1/projects/{project_id}
	UpdateProject(ctx context.Context, req *UpdateProjectRequest, params UpdateProjectParams) (UpdateProjectRes, error)
	// UpdateProjectMembership implements UpdateProjectMembership operation.
	//
	// Update membership.
	//
	// PUT /api/v1/projects/{project_id}/memberships/{membership_id}
	UpdateProjectMembership(ctx context.Context, req *UpdateMembershipRequest, params UpdateProjectMembershipParams) (UpdateProjectMembershipRes, error)
	// UpdateProjectSetting implements UpdateProjectSetting operation.
	//
	// Update project setting.
	//
	// PUT /api/v1/projects/{project_id}/settings/{setting_name}
	UpdateProjectSetting(ctx context.Context, req *UpdateProjectSettingRequest, params UpdateProjectSettingParams) (UpdateProjectSettingRes, error)
	// UpdateProjectTag implements UpdateProjectTag operation.
	//
	// Update tag.
	//
	// PUT /api/v1/projects/{project_id}/tags/{tag_id}
	UpdateProjectTag(ctx context.Context, req *UpdateProjectTagRequest, params UpdateProjectTagParams) (UpdateProjectTagRes, error)
	// UpdateSegment implements UpdateSegment operation.
	//
	// Update segment.
	//
	// PUT /api/v1/segments/{segment_id}
	UpdateSegment(ctx context.Context, req *UpdateSegmentRequest, params UpdateSegmentParams) (UpdateSegmentRes, error)
	// UserChangeMyPassword implements userChangeMyPassword operation.
	//
	// Change my password.
	//
	// POST /api/v1/users/me/change-password
	UserChangeMyPassword(ctx context.Context, req *ChangeUserPasswordRequest) (UserChangeMyPasswordRes, error)
	// Verify2FA implements Verify2FA operation.
	//
	// Verify 2FA-code on login.
	//
	// POST /api/v1/auth/2fa/verify
	Verify2FA(ctx context.Context, req *TwoFAVerifyRequest) (Verify2FARes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
