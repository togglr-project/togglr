// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// AddFeatureTagCreated is response for AddFeatureTag operation.
type AddFeatureTagCreated struct{}

func (*AddFeatureTagCreated) addFeatureTagRes() {}

// Ref: #/components/schemas/AddFeatureTagRequest
type AddFeatureTagRequest struct {
	// ID of tag to associate with feature.
	TagID uuid.UUID `json:"tag_id"`
}

// GetTagID returns the value of TagID.
func (s *AddFeatureTagRequest) GetTagID() uuid.UUID {
	return s.TagID
}

// SetTagID sets the value of TagID.
func (s *AddFeatureTagRequest) SetTagID(val uuid.UUID) {
	s.TagID = val
}

// AddProjectCreated is response for AddProject operation.
type AddProjectCreated struct{}

func (*AddProjectCreated) addProjectRes() {}

// Ref: #/components/schemas/AddProjectRequest
type AddProjectRequest struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *AddProjectRequest) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AddProjectRequest) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *AddProjectRequest) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AddProjectRequest) SetDescription(val string) {
	s.Description = val
}

// Ref: #/components/schemas/ApprovePendingChangeRequest
type ApprovePendingChangeRequest struct {
	ApproverUserID uint            `json:"approver_user_id"`
	ApproverName   string          `json:"approver_name"`
	Auth           AuthCredentials `json:"auth"`
}

// GetApproverUserID returns the value of ApproverUserID.
func (s *ApprovePendingChangeRequest) GetApproverUserID() uint {
	return s.ApproverUserID
}

// GetApproverName returns the value of ApproverName.
func (s *ApprovePendingChangeRequest) GetApproverName() string {
	return s.ApproverName
}

// GetAuth returns the value of Auth.
func (s *ApprovePendingChangeRequest) GetAuth() AuthCredentials {
	return s.Auth
}

// SetApproverUserID sets the value of ApproverUserID.
func (s *ApprovePendingChangeRequest) SetApproverUserID(val uint) {
	s.ApproverUserID = val
}

// SetApproverName sets the value of ApproverName.
func (s *ApprovePendingChangeRequest) SetApproverName(val string) {
	s.ApproverName = val
}

// SetAuth sets the value of Auth.
func (s *ApprovePendingChangeRequest) SetAuth(val AuthCredentials) {
	s.Auth = val
}

// ArchiveProjectNoContent is response for ArchiveProject operation.
type ArchiveProjectNoContent struct{}

func (*ArchiveProjectNoContent) archiveProjectRes() {}

// Type of action performed on entity.
// Ref: #/components/schemas/AuditAction
type AuditAction string

const (
	AuditActionCreate AuditAction = "create"
	AuditActionUpdate AuditAction = "update"
	AuditActionDelete AuditAction = "delete"
)

// AllValues returns all AuditAction values.
func (AuditAction) AllValues() []AuditAction {
	return []AuditAction{
		AuditActionCreate,
		AuditActionUpdate,
		AuditActionDelete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuditAction) MarshalText() ([]byte, error) {
	switch s {
	case AuditActionCreate:
		return []byte(s), nil
	case AuditActionUpdate:
		return []byte(s), nil
	case AuditActionDelete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuditAction) UnmarshalText(data []byte) error {
	switch AuditAction(data) {
	case AuditActionCreate:
		*s = AuditActionCreate
		return nil
	case AuditActionUpdate:
		*s = AuditActionUpdate
		return nil
	case AuditActionDelete:
		*s = AuditActionDelete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AuditLog
type AuditLog struct {
	ID             int64                  `json:"id"`
	ProjectID      uuid.UUID              `json:"project_id"`
	EnvironmentID  int                    `json:"environment_id"`
	EnvironmentKey OptString              `json:"environment_key"`
	Entity         string                 `json:"entity"`
	EntityID       uuid.UUID              `json:"entity_id"`
	FeatureID      OptUUID                `json:"feature_id"`
	Action         string                 `json:"action"`
	Actor          string                 `json:"actor"`
	Username       OptString              `json:"username"`
	RequestID      OptUUID                `json:"request_id"`
	OldValue       OptNilAuditLogOldValue `json:"old_value"`
	NewValue       OptNilAuditLogNewValue `json:"new_value"`
	CreatedAt      time.Time              `json:"created_at"`
}

// GetID returns the value of ID.
func (s *AuditLog) GetID() int64 {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *AuditLog) GetProjectID() uuid.UUID {
	return s.ProjectID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *AuditLog) GetEnvironmentID() int {
	return s.EnvironmentID
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *AuditLog) GetEnvironmentKey() OptString {
	return s.EnvironmentKey
}

// GetEntity returns the value of Entity.
func (s *AuditLog) GetEntity() string {
	return s.Entity
}

// GetEntityID returns the value of EntityID.
func (s *AuditLog) GetEntityID() uuid.UUID {
	return s.EntityID
}

// GetFeatureID returns the value of FeatureID.
func (s *AuditLog) GetFeatureID() OptUUID {
	return s.FeatureID
}

// GetAction returns the value of Action.
func (s *AuditLog) GetAction() string {
	return s.Action
}

// GetActor returns the value of Actor.
func (s *AuditLog) GetActor() string {
	return s.Actor
}

// GetUsername returns the value of Username.
func (s *AuditLog) GetUsername() OptString {
	return s.Username
}

// GetRequestID returns the value of RequestID.
func (s *AuditLog) GetRequestID() OptUUID {
	return s.RequestID
}

// GetOldValue returns the value of OldValue.
func (s *AuditLog) GetOldValue() OptNilAuditLogOldValue {
	return s.OldValue
}

// GetNewValue returns the value of NewValue.
func (s *AuditLog) GetNewValue() OptNilAuditLogNewValue {
	return s.NewValue
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AuditLog) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *AuditLog) SetID(val int64) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *AuditLog) SetProjectID(val uuid.UUID) {
	s.ProjectID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *AuditLog) SetEnvironmentID(val int) {
	s.EnvironmentID = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *AuditLog) SetEnvironmentKey(val OptString) {
	s.EnvironmentKey = val
}

// SetEntity sets the value of Entity.
func (s *AuditLog) SetEntity(val string) {
	s.Entity = val
}

// SetEntityID sets the value of EntityID.
func (s *AuditLog) SetEntityID(val uuid.UUID) {
	s.EntityID = val
}

// SetFeatureID sets the value of FeatureID.
func (s *AuditLog) SetFeatureID(val OptUUID) {
	s.FeatureID = val
}

// SetAction sets the value of Action.
func (s *AuditLog) SetAction(val string) {
	s.Action = val
}

// SetActor sets the value of Actor.
func (s *AuditLog) SetActor(val string) {
	s.Actor = val
}

// SetUsername sets the value of Username.
func (s *AuditLog) SetUsername(val OptString) {
	s.Username = val
}

// SetRequestID sets the value of RequestID.
func (s *AuditLog) SetRequestID(val OptUUID) {
	s.RequestID = val
}

// SetOldValue sets the value of OldValue.
func (s *AuditLog) SetOldValue(val OptNilAuditLogOldValue) {
	s.OldValue = val
}

// SetNewValue sets the value of NewValue.
func (s *AuditLog) SetNewValue(val OptNilAuditLogNewValue) {
	s.NewValue = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AuditLog) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*AuditLog) getAuditLogEntryRes() {}

type AuditLogNewValue map[string]jx.Raw

func (s *AuditLogNewValue) init() AuditLogNewValue {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type AuditLogOldValue map[string]jx.Raw

func (s *AuditLogOldValue) init() AuditLogOldValue {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/AuthCredentials
type AuthCredentials struct {
	Method     AuthCredentialsMethod `json:"method"`
	Credential string                `json:"credential"`
	// Session ID for TOTP approval (required when method is 'totp').
	SessionID OptString `json:"session_id"`
}

// GetMethod returns the value of Method.
func (s *AuthCredentials) GetMethod() AuthCredentialsMethod {
	return s.Method
}

// GetCredential returns the value of Credential.
func (s *AuthCredentials) GetCredential() string {
	return s.Credential
}

// GetSessionID returns the value of SessionID.
func (s *AuthCredentials) GetSessionID() OptString {
	return s.SessionID
}

// SetMethod sets the value of Method.
func (s *AuthCredentials) SetMethod(val AuthCredentialsMethod) {
	s.Method = val
}

// SetCredential sets the value of Credential.
func (s *AuthCredentials) SetCredential(val string) {
	s.Credential = val
}

// SetSessionID sets the value of SessionID.
func (s *AuthCredentials) SetSessionID(val OptString) {
	s.SessionID = val
}

type AuthCredentialsMethod string

const (
	AuthCredentialsMethodPassword AuthCredentialsMethod = "password"
	AuthCredentialsMethodTotp     AuthCredentialsMethod = "totp"
)

// AllValues returns all AuthCredentialsMethod values.
func (AuthCredentialsMethod) AllValues() []AuthCredentialsMethod {
	return []AuthCredentialsMethod{
		AuthCredentialsMethodPassword,
		AuthCredentialsMethodTotp,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthCredentialsMethod) MarshalText() ([]byte, error) {
	switch s {
	case AuthCredentialsMethodPassword:
		return []byte(s), nil
	case AuthCredentialsMethodTotp:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthCredentialsMethod) UnmarshalText(data []byte) error {
	switch AuthCredentialsMethod(data) {
	case AuthCredentialsMethodPassword:
		*s = AuthCredentialsMethodPassword
		return nil
	case AuthCredentialsMethodTotp:
		*s = AuthCredentialsMethodTotp
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BearerAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *BearerAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *BearerAuth) SetRoles(val []string) {
	s.Roles = val
}

// Ref: #/components/schemas/CancelPendingChangeRequest
type CancelPendingChangeRequest struct {
	CancelledBy string `json:"cancelled_by"`
}

// GetCancelledBy returns the value of CancelledBy.
func (s *CancelPendingChangeRequest) GetCancelledBy() string {
	return s.CancelledBy
}

// SetCancelledBy sets the value of CancelledBy.
func (s *CancelPendingChangeRequest) SetCancelledBy(val string) {
	s.CancelledBy = val
}

// Ref: #/components/schemas/Category
type Category struct {
	ID          uuid.UUID    `json:"id"`
	Name        string       `json:"name"`
	Slug        string       `json:"slug"`
	Description OptNilString `json:"description"`
	Color       OptNilString `json:"color"`
	Kind        CategoryKind `json:"kind"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   time.Time    `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Category) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Category) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *Category) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *Category) GetDescription() OptNilString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *Category) GetColor() OptNilString {
	return s.Color
}

// GetKind returns the value of Kind.
func (s *Category) GetKind() CategoryKind {
	return s.Kind
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Category) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Category) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Category) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Category) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *Category) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *Category) SetDescription(val OptNilString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *Category) SetColor(val OptNilString) {
	s.Color = val
}

// SetKind sets the value of Kind.
func (s *Category) SetKind(val CategoryKind) {
	s.Kind = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Category) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Category) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/CategoryHealth
type CategoryHealth struct {
	ProjectID                  OptUUID                       `json:"project_id"`
	ProjectName                OptString                     `json:"project_name"`
	EnvironmentID              OptUUID                       `json:"environment_id"`
	EnvironmentKey             OptString                     `json:"environment_key"`
	CategoryID                 OptUUID                       `json:"category_id"`
	CategoryName               OptString                     `json:"category_name"`
	CategorySlug               OptString                     `json:"category_slug"`
	TotalFeatures              OptUint                       `json:"total_features"`
	EnabledFeatures            OptUint                       `json:"enabled_features"`
	DisabledFeatures           OptUint                       `json:"disabled_features"`
	PendingFeatures            OptUint                       `json:"pending_features"`
	GuardedFeatures            OptUint                       `json:"guarded_features"`
	AutoDisableManagedFeatures OptUint                       `json:"auto_disable_managed_features"`
	PendingGuardedFeatures     OptUint                       `json:"pending_guarded_features"`
	HealthStatus               OptCategoryHealthHealthStatus `json:"health_status"`
}

// GetProjectID returns the value of ProjectID.
func (s *CategoryHealth) GetProjectID() OptUUID {
	return s.ProjectID
}

// GetProjectName returns the value of ProjectName.
func (s *CategoryHealth) GetProjectName() OptString {
	return s.ProjectName
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *CategoryHealth) GetEnvironmentID() OptUUID {
	return s.EnvironmentID
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *CategoryHealth) GetEnvironmentKey() OptString {
	return s.EnvironmentKey
}

// GetCategoryID returns the value of CategoryID.
func (s *CategoryHealth) GetCategoryID() OptUUID {
	return s.CategoryID
}

// GetCategoryName returns the value of CategoryName.
func (s *CategoryHealth) GetCategoryName() OptString {
	return s.CategoryName
}

// GetCategorySlug returns the value of CategorySlug.
func (s *CategoryHealth) GetCategorySlug() OptString {
	return s.CategorySlug
}

// GetTotalFeatures returns the value of TotalFeatures.
func (s *CategoryHealth) GetTotalFeatures() OptUint {
	return s.TotalFeatures
}

// GetEnabledFeatures returns the value of EnabledFeatures.
func (s *CategoryHealth) GetEnabledFeatures() OptUint {
	return s.EnabledFeatures
}

// GetDisabledFeatures returns the value of DisabledFeatures.
func (s *CategoryHealth) GetDisabledFeatures() OptUint {
	return s.DisabledFeatures
}

// GetPendingFeatures returns the value of PendingFeatures.
func (s *CategoryHealth) GetPendingFeatures() OptUint {
	return s.PendingFeatures
}

// GetGuardedFeatures returns the value of GuardedFeatures.
func (s *CategoryHealth) GetGuardedFeatures() OptUint {
	return s.GuardedFeatures
}

// GetAutoDisableManagedFeatures returns the value of AutoDisableManagedFeatures.
func (s *CategoryHealth) GetAutoDisableManagedFeatures() OptUint {
	return s.AutoDisableManagedFeatures
}

// GetPendingGuardedFeatures returns the value of PendingGuardedFeatures.
func (s *CategoryHealth) GetPendingGuardedFeatures() OptUint {
	return s.PendingGuardedFeatures
}

// GetHealthStatus returns the value of HealthStatus.
func (s *CategoryHealth) GetHealthStatus() OptCategoryHealthHealthStatus {
	return s.HealthStatus
}

// SetProjectID sets the value of ProjectID.
func (s *CategoryHealth) SetProjectID(val OptUUID) {
	s.ProjectID = val
}

// SetProjectName sets the value of ProjectName.
func (s *CategoryHealth) SetProjectName(val OptString) {
	s.ProjectName = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *CategoryHealth) SetEnvironmentID(val OptUUID) {
	s.EnvironmentID = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *CategoryHealth) SetEnvironmentKey(val OptString) {
	s.EnvironmentKey = val
}

// SetCategoryID sets the value of CategoryID.
func (s *CategoryHealth) SetCategoryID(val OptUUID) {
	s.CategoryID = val
}

// SetCategoryName sets the value of CategoryName.
func (s *CategoryHealth) SetCategoryName(val OptString) {
	s.CategoryName = val
}

// SetCategorySlug sets the value of CategorySlug.
func (s *CategoryHealth) SetCategorySlug(val OptString) {
	s.CategorySlug = val
}

// SetTotalFeatures sets the value of TotalFeatures.
func (s *CategoryHealth) SetTotalFeatures(val OptUint) {
	s.TotalFeatures = val
}

// SetEnabledFeatures sets the value of EnabledFeatures.
func (s *CategoryHealth) SetEnabledFeatures(val OptUint) {
	s.EnabledFeatures = val
}

// SetDisabledFeatures sets the value of DisabledFeatures.
func (s *CategoryHealth) SetDisabledFeatures(val OptUint) {
	s.DisabledFeatures = val
}

// SetPendingFeatures sets the value of PendingFeatures.
func (s *CategoryHealth) SetPendingFeatures(val OptUint) {
	s.PendingFeatures = val
}

// SetGuardedFeatures sets the value of GuardedFeatures.
func (s *CategoryHealth) SetGuardedFeatures(val OptUint) {
	s.GuardedFeatures = val
}

// SetAutoDisableManagedFeatures sets the value of AutoDisableManagedFeatures.
func (s *CategoryHealth) SetAutoDisableManagedFeatures(val OptUint) {
	s.AutoDisableManagedFeatures = val
}

// SetPendingGuardedFeatures sets the value of PendingGuardedFeatures.
func (s *CategoryHealth) SetPendingGuardedFeatures(val OptUint) {
	s.PendingGuardedFeatures = val
}

// SetHealthStatus sets the value of HealthStatus.
func (s *CategoryHealth) SetHealthStatus(val OptCategoryHealthHealthStatus) {
	s.HealthStatus = val
}

type CategoryHealthHealthStatus string

const (
	CategoryHealthHealthStatusGreen  CategoryHealthHealthStatus = "green"
	CategoryHealthHealthStatusYellow CategoryHealthHealthStatus = "yellow"
	CategoryHealthHealthStatusRed    CategoryHealthHealthStatus = "red"
)

// AllValues returns all CategoryHealthHealthStatus values.
func (CategoryHealthHealthStatus) AllValues() []CategoryHealthHealthStatus {
	return []CategoryHealthHealthStatus{
		CategoryHealthHealthStatusGreen,
		CategoryHealthHealthStatusYellow,
		CategoryHealthHealthStatusRed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CategoryHealthHealthStatus) MarshalText() ([]byte, error) {
	switch s {
	case CategoryHealthHealthStatusGreen:
		return []byte(s), nil
	case CategoryHealthHealthStatusYellow:
		return []byte(s), nil
	case CategoryHealthHealthStatusRed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CategoryHealthHealthStatus) UnmarshalText(data []byte) error {
	switch CategoryHealthHealthStatus(data) {
	case CategoryHealthHealthStatusGreen:
		*s = CategoryHealthHealthStatusGreen
		return nil
	case CategoryHealthHealthStatusYellow:
		*s = CategoryHealthHealthStatusYellow
		return nil
	case CategoryHealthHealthStatusRed:
		*s = CategoryHealthHealthStatusRed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CategoryKind string

const (
	CategoryKindSystem CategoryKind = "system"
	CategoryKindUser   CategoryKind = "user"
	CategoryKindDomain CategoryKind = "domain"
)

// AllValues returns all CategoryKind values.
func (CategoryKind) AllValues() []CategoryKind {
	return []CategoryKind{
		CategoryKindSystem,
		CategoryKindUser,
		CategoryKindDomain,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CategoryKind) MarshalText() ([]byte, error) {
	switch s {
	case CategoryKindSystem:
		return []byte(s), nil
	case CategoryKindUser:
		return []byte(s), nil
	case CategoryKindDomain:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CategoryKind) UnmarshalText(data []byte) error {
	switch CategoryKind(data) {
	case CategoryKindSystem:
		*s = CategoryKindSystem
		return nil
	case CategoryKindUser:
		*s = CategoryKindUser
		return nil
	case CategoryKindDomain:
		*s = CategoryKindDomain
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CategoryResponse
type CategoryResponse struct {
	Category Category `json:"category"`
}

// GetCategory returns the value of Category.
func (s *CategoryResponse) GetCategory() Category {
	return s.Category
}

// SetCategory sets the value of Category.
func (s *CategoryResponse) SetCategory(val Category) {
	s.Category = val
}

func (*CategoryResponse) createCategoryRes() {}
func (*CategoryResponse) getCategoryRes()    {}
func (*CategoryResponse) updateCategoryRes() {}

// Ref: #/components/schemas/Change
type Change struct {
	// Audit log entry ID.
	ID     int64      `json:"id"`
	Entity EntityType `json:"entity"`
	// ID of the changed entity.
	EntityID uuid.UUID   `json:"entity_id"`
	Action   AuditAction `json:"action"`
	// Previous value of the entity (null for create actions).
	OldValue *ChangeOldValue `json:"old_value"`
	// New value of the entity (null for delete actions).
	NewValue *ChangeNewValue `json:"new_value"`
}

// GetID returns the value of ID.
func (s *Change) GetID() int64 {
	return s.ID
}

// GetEntity returns the value of Entity.
func (s *Change) GetEntity() EntityType {
	return s.Entity
}

// GetEntityID returns the value of EntityID.
func (s *Change) GetEntityID() uuid.UUID {
	return s.EntityID
}

// GetAction returns the value of Action.
func (s *Change) GetAction() AuditAction {
	return s.Action
}

// GetOldValue returns the value of OldValue.
func (s *Change) GetOldValue() *ChangeOldValue {
	return s.OldValue
}

// GetNewValue returns the value of NewValue.
func (s *Change) GetNewValue() *ChangeNewValue {
	return s.NewValue
}

// SetID sets the value of ID.
func (s *Change) SetID(val int64) {
	s.ID = val
}

// SetEntity sets the value of Entity.
func (s *Change) SetEntity(val EntityType) {
	s.Entity = val
}

// SetEntityID sets the value of EntityID.
func (s *Change) SetEntityID(val uuid.UUID) {
	s.EntityID = val
}

// SetAction sets the value of Action.
func (s *Change) SetAction(val AuditAction) {
	s.Action = val
}

// SetOldValue sets the value of OldValue.
func (s *Change) SetOldValue(val *ChangeOldValue) {
	s.OldValue = val
}

// SetNewValue sets the value of NewValue.
func (s *Change) SetNewValue(val *ChangeNewValue) {
	s.NewValue = val
}

// Ref: #/components/schemas/ChangeGroup
type ChangeGroup struct {
	// Request ID that groups related changes.
	RequestID uuid.UUID `json:"request_id"`
	// Who made the changes (system, sdk, user:<user_id>).
	Actor string `json:"actor"`
	// Username of the user who made the changes.
	Username string `json:"username"`
	// When the changes were made.
	CreatedAt time.Time `json:"created_at"`
	// List of changes made in this request.
	Changes []Change `json:"changes"`
}

// GetRequestID returns the value of RequestID.
func (s *ChangeGroup) GetRequestID() uuid.UUID {
	return s.RequestID
}

// GetActor returns the value of Actor.
func (s *ChangeGroup) GetActor() string {
	return s.Actor
}

// GetUsername returns the value of Username.
func (s *ChangeGroup) GetUsername() string {
	return s.Username
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ChangeGroup) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetChanges returns the value of Changes.
func (s *ChangeGroup) GetChanges() []Change {
	return s.Changes
}

// SetRequestID sets the value of RequestID.
func (s *ChangeGroup) SetRequestID(val uuid.UUID) {
	s.RequestID = val
}

// SetActor sets the value of Actor.
func (s *ChangeGroup) SetActor(val string) {
	s.Actor = val
}

// SetUsername sets the value of Username.
func (s *ChangeGroup) SetUsername(val string) {
	s.Username = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ChangeGroup) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetChanges sets the value of Changes.
func (s *ChangeGroup) SetChanges(val []Change) {
	s.Changes = val
}

// New value of the entity (null for delete actions).
type ChangeNewValue struct{}

// Previous value of the entity (null for create actions).
type ChangeOldValue struct{}

// Ref: #/components/schemas/ChangeUserPasswordRequest
type ChangeUserPasswordRequest struct {
	OldPassword string `json:"old_password"`
	NewPassword string `json:"new_password"`
}

// GetOldPassword returns the value of OldPassword.
func (s *ChangeUserPasswordRequest) GetOldPassword() string {
	return s.OldPassword
}

// GetNewPassword returns the value of NewPassword.
func (s *ChangeUserPasswordRequest) GetNewPassword() string {
	return s.NewPassword
}

// SetOldPassword sets the value of OldPassword.
func (s *ChangeUserPasswordRequest) SetOldPassword(val string) {
	s.OldPassword = val
}

// SetNewPassword sets the value of NewPassword.
func (s *ChangeUserPasswordRequest) SetNewPassword(val string) {
	s.NewPassword = val
}

// Ref: #/components/schemas/ChangeValue
type ChangeValue struct {
	// Previous value.
	Old jx.Raw `json:"old"`
	// New value.
	New jx.Raw `json:"new"`
}

// GetOld returns the value of Old.
func (s *ChangeValue) GetOld() jx.Raw {
	return s.Old
}

// GetNew returns the value of New.
func (s *ChangeValue) GetNew() jx.Raw {
	return s.New
}

// SetOld sets the value of Old.
func (s *ChangeValue) SetOld(val jx.Raw) {
	s.Old = val
}

// SetNew sets the value of New.
func (s *ChangeValue) SetNew(val jx.Raw) {
	s.New = val
}

// Confirm2FANoContent is response for Confirm2FA operation.
type Confirm2FANoContent struct{}

func (*Confirm2FANoContent) confirm2FARes() {}

// ConsumeSAMLAssertionFound is response for ConsumeSAMLAssertion operation.
type ConsumeSAMLAssertionFound struct {
	Location  OptString
	SetCookie OptString
}

// GetLocation returns the value of Location.
func (s *ConsumeSAMLAssertionFound) GetLocation() OptString {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *ConsumeSAMLAssertionFound) GetSetCookie() OptString {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *ConsumeSAMLAssertionFound) SetLocation(val OptString) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *ConsumeSAMLAssertionFound) SetSetCookie(val OptString) {
	s.SetCookie = val
}

func (*ConsumeSAMLAssertionFound) consumeSAMLAssertionRes() {}

type ConsumeSAMLAssertionReq struct {
	// Base64-encoded IdP `<samlp:Response>` document.
	SAMLResponse string `json:"SAMLResponse"`
	// Value round-tripped from the initial authentication request.
	RelayState string `json:"RelayState"`
}

// GetSAMLResponse returns the value of SAMLResponse.
func (s *ConsumeSAMLAssertionReq) GetSAMLResponse() string {
	return s.SAMLResponse
}

// GetRelayState returns the value of RelayState.
func (s *ConsumeSAMLAssertionReq) GetRelayState() string {
	return s.RelayState
}

// SetSAMLResponse sets the value of SAMLResponse.
func (s *ConsumeSAMLAssertionReq) SetSAMLResponse(val string) {
	s.SAMLResponse = val
}

// SetRelayState sets the value of RelayState.
func (s *ConsumeSAMLAssertionReq) SetRelayState(val string) {
	s.RelayState = val
}

// Ref: #/components/schemas/CreateCategoryRequest
type CreateCategoryRequest struct {
	Name        string                    `json:"name"`
	Slug        string                    `json:"slug"`
	Description OptString                 `json:"description"`
	Color       OptString                 `json:"color"`
	Kind        CreateCategoryRequestKind `json:"kind"`
}

// GetName returns the value of Name.
func (s *CreateCategoryRequest) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *CreateCategoryRequest) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *CreateCategoryRequest) GetDescription() OptString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *CreateCategoryRequest) GetColor() OptString {
	return s.Color
}

// GetKind returns the value of Kind.
func (s *CreateCategoryRequest) GetKind() CreateCategoryRequestKind {
	return s.Kind
}

// SetName sets the value of Name.
func (s *CreateCategoryRequest) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *CreateCategoryRequest) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *CreateCategoryRequest) SetDescription(val OptString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *CreateCategoryRequest) SetColor(val OptString) {
	s.Color = val
}

// SetKind sets the value of Kind.
func (s *CreateCategoryRequest) SetKind(val CreateCategoryRequestKind) {
	s.Kind = val
}

type CreateCategoryRequestKind string

const (
	CreateCategoryRequestKindUser   CreateCategoryRequestKind = "user"
	CreateCategoryRequestKindDomain CreateCategoryRequestKind = "domain"
)

// AllValues returns all CreateCategoryRequestKind values.
func (CreateCategoryRequestKind) AllValues() []CreateCategoryRequestKind {
	return []CreateCategoryRequestKind{
		CreateCategoryRequestKindUser,
		CreateCategoryRequestKindDomain,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateCategoryRequestKind) MarshalText() ([]byte, error) {
	switch s {
	case CreateCategoryRequestKindUser:
		return []byte(s), nil
	case CreateCategoryRequestKindDomain:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCategoryRequestKind) UnmarshalText(data []byte) error {
	switch CreateCategoryRequestKind(data) {
	case CreateCategoryRequestKindUser:
		*s = CreateCategoryRequestKindUser
		return nil
	case CreateCategoryRequestKindDomain:
		*s = CreateCategoryRequestKindDomain
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateEnvironmentRequest
type CreateEnvironmentRequest struct {
	// Environment key (dev, stage, prod).
	Key string `json:"key"`
	// Human-readable environment name.
	Name string `json:"name"`
}

// GetKey returns the value of Key.
func (s *CreateEnvironmentRequest) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *CreateEnvironmentRequest) GetName() string {
	return s.Name
}

// SetKey sets the value of Key.
func (s *CreateEnvironmentRequest) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *CreateEnvironmentRequest) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/CreateFeatureRequest
type CreateFeatureRequest struct {
	Key         string       `json:"key"`
	Name        string       `json:"name"`
	Description OptNilString `json:"description"`
	Kind        FeatureKind  `json:"kind"`
	// Environment key (dev, stage, prod) for this feature.
	EnvironmentKey string `json:"environment_key"`
	// Default value for the feature in the specified environment.
	DefaultValue string `json:"default_value"`
	// Whether the feature is enabled in the specified environment.
	Enabled    bool      `json:"enabled"`
	RolloutKey OptString `json:"rollout_key"`
	// Optional list of flag variants to create along with the feature.
	Variants []CreateFlagVariantInline `json:"variants"`
	// Optional list of rules to create along with the feature.
	Rules []CreateRuleInline `json:"rules"`
	// Tag IDs.
	Tags []string `json:"tags"`
}

// GetKey returns the value of Key.
func (s *CreateFeatureRequest) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *CreateFeatureRequest) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateFeatureRequest) GetDescription() OptNilString {
	return s.Description
}

// GetKind returns the value of Kind.
func (s *CreateFeatureRequest) GetKind() FeatureKind {
	return s.Kind
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *CreateFeatureRequest) GetEnvironmentKey() string {
	return s.EnvironmentKey
}

// GetDefaultValue returns the value of DefaultValue.
func (s *CreateFeatureRequest) GetDefaultValue() string {
	return s.DefaultValue
}

// GetEnabled returns the value of Enabled.
func (s *CreateFeatureRequest) GetEnabled() bool {
	return s.Enabled
}

// GetRolloutKey returns the value of RolloutKey.
func (s *CreateFeatureRequest) GetRolloutKey() OptString {
	return s.RolloutKey
}

// GetVariants returns the value of Variants.
func (s *CreateFeatureRequest) GetVariants() []CreateFlagVariantInline {
	return s.Variants
}

// GetRules returns the value of Rules.
func (s *CreateFeatureRequest) GetRules() []CreateRuleInline {
	return s.Rules
}

// GetTags returns the value of Tags.
func (s *CreateFeatureRequest) GetTags() []string {
	return s.Tags
}

// SetKey sets the value of Key.
func (s *CreateFeatureRequest) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *CreateFeatureRequest) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateFeatureRequest) SetDescription(val OptNilString) {
	s.Description = val
}

// SetKind sets the value of Kind.
func (s *CreateFeatureRequest) SetKind(val FeatureKind) {
	s.Kind = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *CreateFeatureRequest) SetEnvironmentKey(val string) {
	s.EnvironmentKey = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *CreateFeatureRequest) SetDefaultValue(val string) {
	s.DefaultValue = val
}

// SetEnabled sets the value of Enabled.
func (s *CreateFeatureRequest) SetEnabled(val bool) {
	s.Enabled = val
}

// SetRolloutKey sets the value of RolloutKey.
func (s *CreateFeatureRequest) SetRolloutKey(val OptString) {
	s.RolloutKey = val
}

// SetVariants sets the value of Variants.
func (s *CreateFeatureRequest) SetVariants(val []CreateFlagVariantInline) {
	s.Variants = val
}

// SetRules sets the value of Rules.
func (s *CreateFeatureRequest) SetRules(val []CreateRuleInline) {
	s.Rules = val
}

// SetTags sets the value of Tags.
func (s *CreateFeatureRequest) SetTags(val []string) {
	s.Tags = val
}

// Ref: #/components/schemas/CreateFeatureScheduleRequest
type CreateFeatureScheduleRequest struct {
	StartsAt OptNilDateTime `json:"starts_at"`
	EndsAt   OptNilDateTime `json:"ends_at"`
	CronExpr OptNilString   `json:"cron_expr"`
	// Duration for cron-based schedules. When cron triggers, feature will be enabled/disabled for this
	// duration. Format: '1h30m', '45m', '2h', etc.
	CronDuration OptNilDuration        `json:"cron_duration"`
	Timezone     string                `json:"timezone"`
	Action       FeatureScheduleAction `json:"action"`
}

// GetStartsAt returns the value of StartsAt.
func (s *CreateFeatureScheduleRequest) GetStartsAt() OptNilDateTime {
	return s.StartsAt
}

// GetEndsAt returns the value of EndsAt.
func (s *CreateFeatureScheduleRequest) GetEndsAt() OptNilDateTime {
	return s.EndsAt
}

// GetCronExpr returns the value of CronExpr.
func (s *CreateFeatureScheduleRequest) GetCronExpr() OptNilString {
	return s.CronExpr
}

// GetCronDuration returns the value of CronDuration.
func (s *CreateFeatureScheduleRequest) GetCronDuration() OptNilDuration {
	return s.CronDuration
}

// GetTimezone returns the value of Timezone.
func (s *CreateFeatureScheduleRequest) GetTimezone() string {
	return s.Timezone
}

// GetAction returns the value of Action.
func (s *CreateFeatureScheduleRequest) GetAction() FeatureScheduleAction {
	return s.Action
}

// SetStartsAt sets the value of StartsAt.
func (s *CreateFeatureScheduleRequest) SetStartsAt(val OptNilDateTime) {
	s.StartsAt = val
}

// SetEndsAt sets the value of EndsAt.
func (s *CreateFeatureScheduleRequest) SetEndsAt(val OptNilDateTime) {
	s.EndsAt = val
}

// SetCronExpr sets the value of CronExpr.
func (s *CreateFeatureScheduleRequest) SetCronExpr(val OptNilString) {
	s.CronExpr = val
}

// SetCronDuration sets the value of CronDuration.
func (s *CreateFeatureScheduleRequest) SetCronDuration(val OptNilDuration) {
	s.CronDuration = val
}

// SetTimezone sets the value of Timezone.
func (s *CreateFeatureScheduleRequest) SetTimezone(val string) {
	s.Timezone = val
}

// SetAction sets the value of Action.
func (s *CreateFeatureScheduleRequest) SetAction(val FeatureScheduleAction) {
	s.Action = val
}

// Ref: #/components/schemas/CreateFlagVariantInline
type CreateFlagVariantInline struct {
	// Client-provided UUID for the variant.
	ID             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	RolloutPercent int       `json:"rollout_percent"`
	// Environment key (dev, stage, prod) for this variant.
	EnvironmentKey string `json:"environment_key"`
}

// GetID returns the value of ID.
func (s *CreateFlagVariantInline) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *CreateFlagVariantInline) GetName() string {
	return s.Name
}

// GetRolloutPercent returns the value of RolloutPercent.
func (s *CreateFlagVariantInline) GetRolloutPercent() int {
	return s.RolloutPercent
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *CreateFlagVariantInline) GetEnvironmentKey() string {
	return s.EnvironmentKey
}

// SetID sets the value of ID.
func (s *CreateFlagVariantInline) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CreateFlagVariantInline) SetName(val string) {
	s.Name = val
}

// SetRolloutPercent sets the value of RolloutPercent.
func (s *CreateFlagVariantInline) SetRolloutPercent(val int) {
	s.RolloutPercent = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *CreateFlagVariantInline) SetEnvironmentKey(val string) {
	s.EnvironmentKey = val
}

// Ref: #/components/schemas/CreateFlagVariantRequest
type CreateFlagVariantRequest struct {
	Name           string `json:"name"`
	RolloutPercent int    `json:"rollout_percent"`
}

// GetName returns the value of Name.
func (s *CreateFlagVariantRequest) GetName() string {
	return s.Name
}

// GetRolloutPercent returns the value of RolloutPercent.
func (s *CreateFlagVariantRequest) GetRolloutPercent() int {
	return s.RolloutPercent
}

// SetName sets the value of Name.
func (s *CreateFlagVariantRequest) SetName(val string) {
	s.Name = val
}

// SetRolloutPercent sets the value of RolloutPercent.
func (s *CreateFlagVariantRequest) SetRolloutPercent(val int) {
	s.RolloutPercent = val
}

// Ref: #/components/schemas/CreateMembershipRequest
type CreateMembershipRequest struct {
	UserID int64     `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
}

// GetUserID returns the value of UserID.
func (s *CreateMembershipRequest) GetUserID() int64 {
	return s.UserID
}

// GetRoleID returns the value of RoleID.
func (s *CreateMembershipRequest) GetRoleID() uuid.UUID {
	return s.RoleID
}

// SetUserID sets the value of UserID.
func (s *CreateMembershipRequest) SetUserID(val int64) {
	s.UserID = val
}

// SetRoleID sets the value of RoleID.
func (s *CreateMembershipRequest) SetRoleID(val uuid.UUID) {
	s.RoleID = val
}

// Ref: #/components/schemas/CreateNotificationSettingRequest
type CreateNotificationSettingRequest struct {
	Type NotificationChannelType `json:"type"`
	// Configuration for the notification channel (JSONB in database).
	Config  string  `json:"config"`
	Enabled OptBool `json:"enabled"`
}

// GetType returns the value of Type.
func (s *CreateNotificationSettingRequest) GetType() NotificationChannelType {
	return s.Type
}

// GetConfig returns the value of Config.
func (s *CreateNotificationSettingRequest) GetConfig() string {
	return s.Config
}

// GetEnabled returns the value of Enabled.
func (s *CreateNotificationSettingRequest) GetEnabled() OptBool {
	return s.Enabled
}

// SetType sets the value of Type.
func (s *CreateNotificationSettingRequest) SetType(val NotificationChannelType) {
	s.Type = val
}

// SetConfig sets the value of Config.
func (s *CreateNotificationSettingRequest) SetConfig(val string) {
	s.Config = val
}

// SetEnabled sets the value of Enabled.
func (s *CreateNotificationSettingRequest) SetEnabled(val OptBool) {
	s.Enabled = val
}

// Ref: #/components/schemas/CreateProjectSettingRequest
type CreateProjectSettingRequest struct {
	Name  string                           `json:"name"`
	Value CreateProjectSettingRequestValue `json:"value"`
}

// GetName returns the value of Name.
func (s *CreateProjectSettingRequest) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *CreateProjectSettingRequest) GetValue() CreateProjectSettingRequestValue {
	return s.Value
}

// SetName sets the value of Name.
func (s *CreateProjectSettingRequest) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *CreateProjectSettingRequest) SetValue(val CreateProjectSettingRequestValue) {
	s.Value = val
}

type CreateProjectSettingRequestValue struct{}

// Ref: #/components/schemas/CreateProjectTagRequest
type CreateProjectTagRequest struct {
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	Description OptString `json:"description"`
	Color       OptString `json:"color"`
	// ID of category to associate with this tag.
	CategoryID OptNilUUID `json:"category_id"`
}

// GetName returns the value of Name.
func (s *CreateProjectTagRequest) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *CreateProjectTagRequest) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *CreateProjectTagRequest) GetDescription() OptString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *CreateProjectTagRequest) GetColor() OptString {
	return s.Color
}

// GetCategoryID returns the value of CategoryID.
func (s *CreateProjectTagRequest) GetCategoryID() OptNilUUID {
	return s.CategoryID
}

// SetName sets the value of Name.
func (s *CreateProjectTagRequest) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *CreateProjectTagRequest) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *CreateProjectTagRequest) SetDescription(val OptString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *CreateProjectTagRequest) SetColor(val OptString) {
	s.Color = val
}

// SetCategoryID sets the value of CategoryID.
func (s *CreateProjectTagRequest) SetCategoryID(val OptNilUUID) {
	s.CategoryID = val
}

// CreateRuleAttributeNoContent is response for CreateRuleAttribute operation.
type CreateRuleAttributeNoContent struct{}

func (*CreateRuleAttributeNoContent) createRuleAttributeRes() {}

// Ref: #/components/schemas/CreateRuleAttributeRequest
type CreateRuleAttributeRequest struct {
	Name        string    `json:"name"`
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *CreateRuleAttributeRequest) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateRuleAttributeRequest) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *CreateRuleAttributeRequest) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateRuleAttributeRequest) SetDescription(val OptString) {
	s.Description = val
}

// Ref: #/components/schemas/CreateRuleInline
type CreateRuleInline struct {
	// Client-provided UUID for the rule.
	ID            uuid.UUID               `json:"id"`
	Conditions    RuleConditionExpression `json:"conditions"`
	SegmentID     OptUUID                 `json:"segment_id"`
	IsCustomized  bool                    `json:"is_customized"`
	Action        RuleAction              `json:"action"`
	FlagVariantID OptUUID                 `json:"flag_variant_id"`
	Priority      OptInt                  `json:"priority"`
	// Environment key (dev, stage, prod) for this rule.
	EnvironmentKey string `json:"environment_key"`
}

// GetID returns the value of ID.
func (s *CreateRuleInline) GetID() uuid.UUID {
	return s.ID
}

// GetConditions returns the value of Conditions.
func (s *CreateRuleInline) GetConditions() RuleConditionExpression {
	return s.Conditions
}

// GetSegmentID returns the value of SegmentID.
func (s *CreateRuleInline) GetSegmentID() OptUUID {
	return s.SegmentID
}

// GetIsCustomized returns the value of IsCustomized.
func (s *CreateRuleInline) GetIsCustomized() bool {
	return s.IsCustomized
}

// GetAction returns the value of Action.
func (s *CreateRuleInline) GetAction() RuleAction {
	return s.Action
}

// GetFlagVariantID returns the value of FlagVariantID.
func (s *CreateRuleInline) GetFlagVariantID() OptUUID {
	return s.FlagVariantID
}

// GetPriority returns the value of Priority.
func (s *CreateRuleInline) GetPriority() OptInt {
	return s.Priority
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *CreateRuleInline) GetEnvironmentKey() string {
	return s.EnvironmentKey
}

// SetID sets the value of ID.
func (s *CreateRuleInline) SetID(val uuid.UUID) {
	s.ID = val
}

// SetConditions sets the value of Conditions.
func (s *CreateRuleInline) SetConditions(val RuleConditionExpression) {
	s.Conditions = val
}

// SetSegmentID sets the value of SegmentID.
func (s *CreateRuleInline) SetSegmentID(val OptUUID) {
	s.SegmentID = val
}

// SetIsCustomized sets the value of IsCustomized.
func (s *CreateRuleInline) SetIsCustomized(val bool) {
	s.IsCustomized = val
}

// SetAction sets the value of Action.
func (s *CreateRuleInline) SetAction(val RuleAction) {
	s.Action = val
}

// SetFlagVariantID sets the value of FlagVariantID.
func (s *CreateRuleInline) SetFlagVariantID(val OptUUID) {
	s.FlagVariantID = val
}

// SetPriority sets the value of Priority.
func (s *CreateRuleInline) SetPriority(val OptInt) {
	s.Priority = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *CreateRuleInline) SetEnvironmentKey(val string) {
	s.EnvironmentKey = val
}

// Ref: #/components/schemas/CreateRuleRequest
type CreateRuleRequest struct {
	Conditions    RuleConditionExpression `json:"conditions"`
	SegmentID     OptUUID                 `json:"segment_id"`
	IsCustomized  bool                    `json:"is_customized"`
	Action        RuleAction              `json:"action"`
	FlagVariantID OptUUID                 `json:"flag_variant_id"`
	Priority      OptInt                  `json:"priority"`
}

// GetConditions returns the value of Conditions.
func (s *CreateRuleRequest) GetConditions() RuleConditionExpression {
	return s.Conditions
}

// GetSegmentID returns the value of SegmentID.
func (s *CreateRuleRequest) GetSegmentID() OptUUID {
	return s.SegmentID
}

// GetIsCustomized returns the value of IsCustomized.
func (s *CreateRuleRequest) GetIsCustomized() bool {
	return s.IsCustomized
}

// GetAction returns the value of Action.
func (s *CreateRuleRequest) GetAction() RuleAction {
	return s.Action
}

// GetFlagVariantID returns the value of FlagVariantID.
func (s *CreateRuleRequest) GetFlagVariantID() OptUUID {
	return s.FlagVariantID
}

// GetPriority returns the value of Priority.
func (s *CreateRuleRequest) GetPriority() OptInt {
	return s.Priority
}

// SetConditions sets the value of Conditions.
func (s *CreateRuleRequest) SetConditions(val RuleConditionExpression) {
	s.Conditions = val
}

// SetSegmentID sets the value of SegmentID.
func (s *CreateRuleRequest) SetSegmentID(val OptUUID) {
	s.SegmentID = val
}

// SetIsCustomized sets the value of IsCustomized.
func (s *CreateRuleRequest) SetIsCustomized(val bool) {
	s.IsCustomized = val
}

// SetAction sets the value of Action.
func (s *CreateRuleRequest) SetAction(val RuleAction) {
	s.Action = val
}

// SetFlagVariantID sets the value of FlagVariantID.
func (s *CreateRuleRequest) SetFlagVariantID(val OptUUID) {
	s.FlagVariantID = val
}

// SetPriority sets the value of Priority.
func (s *CreateRuleRequest) SetPriority(val OptInt) {
	s.Priority = val
}

// Ref: #/components/schemas/CreateSegmentRequest
type CreateSegmentRequest struct {
	Name        string                  `json:"name"`
	Description OptNilString            `json:"description"`
	Conditions  RuleConditionExpression `json:"conditions"`
}

// GetName returns the value of Name.
func (s *CreateSegmentRequest) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateSegmentRequest) GetDescription() OptNilString {
	return s.Description
}

// GetConditions returns the value of Conditions.
func (s *CreateSegmentRequest) GetConditions() RuleConditionExpression {
	return s.Conditions
}

// SetName sets the value of Name.
func (s *CreateSegmentRequest) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateSegmentRequest) SetDescription(val OptNilString) {
	s.Description = val
}

// SetConditions sets the value of Conditions.
func (s *CreateSegmentRequest) SetConditions(val RuleConditionExpression) {
	s.Conditions = val
}

// Ref: #/components/schemas/CreateUserRequest
type CreateUserRequest struct {
	Username    string  `json:"username"`
	Email       string  `json:"email"`
	Password    string  `json:"password"`
	IsSuperuser OptBool `json:"is_superuser"`
}

// GetUsername returns the value of Username.
func (s *CreateUserRequest) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *CreateUserRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *CreateUserRequest) GetPassword() string {
	return s.Password
}

// GetIsSuperuser returns the value of IsSuperuser.
func (s *CreateUserRequest) GetIsSuperuser() OptBool {
	return s.IsSuperuser
}

// SetUsername sets the value of Username.
func (s *CreateUserRequest) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *CreateUserRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *CreateUserRequest) SetPassword(val string) {
	s.Password = val
}

// SetIsSuperuser sets the value of IsSuperuser.
func (s *CreateUserRequest) SetIsSuperuser(val OptBool) {
	s.IsSuperuser = val
}

// Ref: #/components/schemas/CreateUserResponse
type CreateUserResponse struct {
	User User `json:"user"`
}

// GetUser returns the value of User.
func (s *CreateUserResponse) GetUser() User {
	return s.User
}

// SetUser sets the value of User.
func (s *CreateUserResponse) SetUser(val User) {
	s.User = val
}

func (*CreateUserResponse) createUserRes() {}

// Ref: #/components/schemas/DashboardOverviewResponse
type DashboardOverviewResponse struct {
	// Project-level health overview.
	Projects []ProjectHealth `json:"projects"`
	// Per-category health.
	Categories []CategoryHealth `json:"categories"`
	// Feature-level upcoming and recent changes.
	FeatureActivity OptDashboardOverviewResponseFeatureActivity `json:"feature_activity"`
	// Recent batched changes.
	RecentActivity []RecentActivity `json:"recent_activity"`
	// Features with risky tags (critical, guarded, auto-disable).
	RiskyFeatures []RiskyFeature `json:"risky_features"`
	// Summary of pending changes.
	PendingSummary []PendingSummary `json:"pending_summary"`
}

// GetProjects returns the value of Projects.
func (s *DashboardOverviewResponse) GetProjects() []ProjectHealth {
	return s.Projects
}

// GetCategories returns the value of Categories.
func (s *DashboardOverviewResponse) GetCategories() []CategoryHealth {
	return s.Categories
}

// GetFeatureActivity returns the value of FeatureActivity.
func (s *DashboardOverviewResponse) GetFeatureActivity() OptDashboardOverviewResponseFeatureActivity {
	return s.FeatureActivity
}

// GetRecentActivity returns the value of RecentActivity.
func (s *DashboardOverviewResponse) GetRecentActivity() []RecentActivity {
	return s.RecentActivity
}

// GetRiskyFeatures returns the value of RiskyFeatures.
func (s *DashboardOverviewResponse) GetRiskyFeatures() []RiskyFeature {
	return s.RiskyFeatures
}

// GetPendingSummary returns the value of PendingSummary.
func (s *DashboardOverviewResponse) GetPendingSummary() []PendingSummary {
	return s.PendingSummary
}

// SetProjects sets the value of Projects.
func (s *DashboardOverviewResponse) SetProjects(val []ProjectHealth) {
	s.Projects = val
}

// SetCategories sets the value of Categories.
func (s *DashboardOverviewResponse) SetCategories(val []CategoryHealth) {
	s.Categories = val
}

// SetFeatureActivity sets the value of FeatureActivity.
func (s *DashboardOverviewResponse) SetFeatureActivity(val OptDashboardOverviewResponseFeatureActivity) {
	s.FeatureActivity = val
}

// SetRecentActivity sets the value of RecentActivity.
func (s *DashboardOverviewResponse) SetRecentActivity(val []RecentActivity) {
	s.RecentActivity = val
}

// SetRiskyFeatures sets the value of RiskyFeatures.
func (s *DashboardOverviewResponse) SetRiskyFeatures(val []RiskyFeature) {
	s.RiskyFeatures = val
}

// SetPendingSummary sets the value of PendingSummary.
func (s *DashboardOverviewResponse) SetPendingSummary(val []PendingSummary) {
	s.PendingSummary = val
}

func (*DashboardOverviewResponse) getDashboardOverviewRes() {}

// Feature-level upcoming and recent changes.
type DashboardOverviewResponseFeatureActivity struct {
	Upcoming []FeatureUpcoming `json:"upcoming"`
	Recent   []FeatureRecent   `json:"recent"`
}

// GetUpcoming returns the value of Upcoming.
func (s *DashboardOverviewResponseFeatureActivity) GetUpcoming() []FeatureUpcoming {
	return s.Upcoming
}

// GetRecent returns the value of Recent.
func (s *DashboardOverviewResponseFeatureActivity) GetRecent() []FeatureRecent {
	return s.Recent
}

// SetUpcoming sets the value of Upcoming.
func (s *DashboardOverviewResponseFeatureActivity) SetUpcoming(val []FeatureUpcoming) {
	s.Upcoming = val
}

// SetRecent sets the value of Recent.
func (s *DashboardOverviewResponseFeatureActivity) SetRecent(val []FeatureRecent) {
	s.Recent = val
}

// DeleteCategoryNoContent is response for DeleteCategory operation.
type DeleteCategoryNoContent struct{}

func (*DeleteCategoryNoContent) deleteCategoryRes() {}

// DeleteEnvironmentNoContent is response for DeleteEnvironment operation.
type DeleteEnvironmentNoContent struct{}

func (*DeleteEnvironmentNoContent) deleteEnvironmentRes() {}

// DeleteFeatureNoContent is response for DeleteFeature operation.
type DeleteFeatureNoContent struct{}

func (*DeleteFeatureNoContent) deleteFeatureRes() {}

// DeleteFeatureScheduleNoContent is response for DeleteFeatureSchedule operation.
type DeleteFeatureScheduleNoContent struct{}

func (*DeleteFeatureScheduleNoContent) deleteFeatureScheduleRes() {}

// DeleteNotificationSettingNoContent is response for DeleteNotificationSetting operation.
type DeleteNotificationSettingNoContent struct{}

func (*DeleteNotificationSettingNoContent) deleteNotificationSettingRes() {}

// DeleteProjectMembershipNoContent is response for DeleteProjectMembership operation.
type DeleteProjectMembershipNoContent struct{}

func (*DeleteProjectMembershipNoContent) deleteProjectMembershipRes() {}

// DeleteProjectSettingNoContent is response for DeleteProjectSetting operation.
type DeleteProjectSettingNoContent struct{}

func (*DeleteProjectSettingNoContent) deleteProjectSettingRes() {}

// DeleteProjectTagNoContent is response for DeleteProjectTag operation.
type DeleteProjectTagNoContent struct{}

func (*DeleteProjectTagNoContent) deleteProjectTagRes() {}

// DeleteRuleAttributeNoContent is response for DeleteRuleAttribute operation.
type DeleteRuleAttributeNoContent struct{}

func (*DeleteRuleAttributeNoContent) deleteRuleAttributeRes() {}

// DeleteSegmentNoContent is response for DeleteSegment operation.
type DeleteSegmentNoContent struct{}

func (*DeleteSegmentNoContent) deleteSegmentRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

// Disable2FANoContent is response for Disable2FA operation.
type Disable2FANoContent struct{}

func (*Disable2FANoContent) disable2FARes() {}

// Ref: #/components/schemas/EntityChange
type EntityChange struct {
	Entity   EntityChangeEntity  `json:"entity"`
	EntityID uuid.UUID           `json:"entity_id"`
	Action   EntityChangeAction  `json:"action"`
	Changes  EntityChangeChanges `json:"changes"`
}

// GetEntity returns the value of Entity.
func (s *EntityChange) GetEntity() EntityChangeEntity {
	return s.Entity
}

// GetEntityID returns the value of EntityID.
func (s *EntityChange) GetEntityID() uuid.UUID {
	return s.EntityID
}

// GetAction returns the value of Action.
func (s *EntityChange) GetAction() EntityChangeAction {
	return s.Action
}

// GetChanges returns the value of Changes.
func (s *EntityChange) GetChanges() EntityChangeChanges {
	return s.Changes
}

// SetEntity sets the value of Entity.
func (s *EntityChange) SetEntity(val EntityChangeEntity) {
	s.Entity = val
}

// SetEntityID sets the value of EntityID.
func (s *EntityChange) SetEntityID(val uuid.UUID) {
	s.EntityID = val
}

// SetAction sets the value of Action.
func (s *EntityChange) SetAction(val EntityChangeAction) {
	s.Action = val
}

// SetChanges sets the value of Changes.
func (s *EntityChange) SetChanges(val EntityChangeChanges) {
	s.Changes = val
}

type EntityChangeAction string

const (
	EntityChangeActionInsert EntityChangeAction = "insert"
	EntityChangeActionUpdate EntityChangeAction = "update"
	EntityChangeActionDelete EntityChangeAction = "delete"
)

// AllValues returns all EntityChangeAction values.
func (EntityChangeAction) AllValues() []EntityChangeAction {
	return []EntityChangeAction{
		EntityChangeActionInsert,
		EntityChangeActionUpdate,
		EntityChangeActionDelete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EntityChangeAction) MarshalText() ([]byte, error) {
	switch s {
	case EntityChangeActionInsert:
		return []byte(s), nil
	case EntityChangeActionUpdate:
		return []byte(s), nil
	case EntityChangeActionDelete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EntityChangeAction) UnmarshalText(data []byte) error {
	switch EntityChangeAction(data) {
	case EntityChangeActionInsert:
		*s = EntityChangeActionInsert
		return nil
	case EntityChangeActionUpdate:
		*s = EntityChangeActionUpdate
		return nil
	case EntityChangeActionDelete:
		*s = EntityChangeActionDelete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EntityChangeChanges map[string]ChangeValue

func (s *EntityChangeChanges) init() EntityChangeChanges {
	m := *s
	if m == nil {
		m = map[string]ChangeValue{}
		*s = m
	}
	return m
}

type EntityChangeEntity string

const (
	EntityChangeEntityFeature         EntityChangeEntity = "feature"
	EntityChangeEntityRule            EntityChangeEntity = "rule"
	EntityChangeEntityFeatureSchedule EntityChangeEntity = "feature_schedule"
	EntityChangeEntityFeatureParams   EntityChangeEntity = "feature_params"
)

// AllValues returns all EntityChangeEntity values.
func (EntityChangeEntity) AllValues() []EntityChangeEntity {
	return []EntityChangeEntity{
		EntityChangeEntityFeature,
		EntityChangeEntityRule,
		EntityChangeEntityFeatureSchedule,
		EntityChangeEntityFeatureParams,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EntityChangeEntity) MarshalText() ([]byte, error) {
	switch s {
	case EntityChangeEntityFeature:
		return []byte(s), nil
	case EntityChangeEntityRule:
		return []byte(s), nil
	case EntityChangeEntityFeatureSchedule:
		return []byte(s), nil
	case EntityChangeEntityFeatureParams:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EntityChangeEntity) UnmarshalText(data []byte) error {
	switch EntityChangeEntity(data) {
	case EntityChangeEntityFeature:
		*s = EntityChangeEntityFeature
		return nil
	case EntityChangeEntityRule:
		*s = EntityChangeEntityRule
		return nil
	case EntityChangeEntityFeatureSchedule:
		*s = EntityChangeEntityFeatureSchedule
		return nil
	case EntityChangeEntityFeatureParams:
		*s = EntityChangeEntityFeatureParams
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of entity that was changed.
// Ref: #/components/schemas/EntityType
type EntityType string

const (
	EntityTypeFeature         EntityType = "feature"
	EntityTypeRule            EntityType = "rule"
	EntityTypeFlagVariant     EntityType = "flag_variant"
	EntityTypeFeatureSchedule EntityType = "feature_schedule"
	EntityTypeFeatureParams   EntityType = "feature_params"
)

// AllValues returns all EntityType values.
func (EntityType) AllValues() []EntityType {
	return []EntityType{
		EntityTypeFeature,
		EntityTypeRule,
		EntityTypeFlagVariant,
		EntityTypeFeatureSchedule,
		EntityTypeFeatureParams,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EntityType) MarshalText() ([]byte, error) {
	switch s {
	case EntityTypeFeature:
		return []byte(s), nil
	case EntityTypeRule:
		return []byte(s), nil
	case EntityTypeFlagVariant:
		return []byte(s), nil
	case EntityTypeFeatureSchedule:
		return []byte(s), nil
	case EntityTypeFeatureParams:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EntityType) UnmarshalText(data []byte) error {
	switch EntityType(data) {
	case EntityTypeFeature:
		*s = EntityTypeFeature
		return nil
	case EntityTypeRule:
		*s = EntityTypeRule
		return nil
	case EntityTypeFlagVariant:
		*s = EntityTypeFlagVariant
		return nil
	case EntityTypeFeatureSchedule:
		*s = EntityTypeFeatureSchedule
		return nil
	case EntityTypeFeatureParams:
		*s = EntityTypeFeatureParams
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Environment
type Environment struct {
	// Environment ID.
	ID int64 `json:"id"`
	// Project ID.
	ProjectID uuid.UUID `json:"project_id"`
	// Environment key (dev, stage, prod).
	Key string `json:"key"`
	// Human-readable environment name.
	Name string `json:"name"`
	// API key for this environment.
	APIKey uuid.UUID `json:"api_key"`
	// Creation timestamp.
	CreatedAt time.Time `json:"created_at"`
}

// GetID returns the value of ID.
func (s *Environment) GetID() int64 {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *Environment) GetProjectID() uuid.UUID {
	return s.ProjectID
}

// GetKey returns the value of Key.
func (s *Environment) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *Environment) GetName() string {
	return s.Name
}

// GetAPIKey returns the value of APIKey.
func (s *Environment) GetAPIKey() uuid.UUID {
	return s.APIKey
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Environment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Environment) SetID(val int64) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *Environment) SetProjectID(val uuid.UUID) {
	s.ProjectID = val
}

// SetKey sets the value of Key.
func (s *Environment) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *Environment) SetName(val string) {
	s.Name = val
}

// SetAPIKey sets the value of APIKey.
func (s *Environment) SetAPIKey(val uuid.UUID) {
	s.APIKey = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Environment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/EnvironmentResponse
type EnvironmentResponse struct {
	Environment OptEnvironment `json:"environment"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentResponse) GetEnvironment() OptEnvironment {
	return s.Environment
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentResponse) SetEnvironment(val OptEnvironment) {
	s.Environment = val
}

func (*EnvironmentResponse) createEnvironmentRes() {}
func (*EnvironmentResponse) getEnvironmentRes()    {}
func (*EnvironmentResponse) updateEnvironmentRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Error ErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() ErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val ErrorError) {
	s.Error = val
}

func (*Error) addProjectRes()            {}
func (*Error) cancelLDAPSyncRes()        {}
func (*Error) createCategoryRes()        {}
func (*Error) createProjectTagRes()      {}
func (*Error) createRuleAttributeRes()   {}
func (*Error) getLDAPConfigRes()         {}
func (*Error) getLDAPSyncLogDetailsRes() {}
func (*Error) initiateTOTPApprovalRes()  {}
func (*Error) syncLDAPUsersRes()         {}
func (*Error) updateLDAPConfigRes()      {}

// Ref: #/components/schemas/Error2FARequired
type Error2FARequired struct {
	Error Error2FARequiredError `json:"error"`
}

// GetError returns the value of Error.
func (s *Error2FARequired) GetError() Error2FARequiredError {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error2FARequired) SetError(val Error2FARequiredError) {
	s.Error = val
}

func (*Error2FARequired) loginRes() {}

type Error2FARequiredError struct {
	Code      string `json:"code"`
	SessionID string `json:"session_id"`
	Message   string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error2FARequiredError) GetCode() string {
	return s.Code
}

// GetSessionID returns the value of SessionID.
func (s *Error2FARequiredError) GetSessionID() string {
	return s.SessionID
}

// GetMessage returns the value of Message.
func (s *Error2FARequiredError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error2FARequiredError) SetCode(val string) {
	s.Code = val
}

// SetSessionID sets the value of SessionID.
func (s *Error2FARequiredError) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessage sets the value of Message.
func (s *Error2FARequiredError) SetMessage(val string) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorBadRequest
type ErrorBadRequest struct {
	Error ErrorBadRequestError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorBadRequest) GetError() ErrorBadRequestError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorBadRequest) SetError(val ErrorBadRequestError) {
	s.Error = val
}

func (*ErrorBadRequest) addFeatureTagRes()             {}
func (*ErrorBadRequest) addProjectRes()                {}
func (*ErrorBadRequest) approvePendingChangeRes()      {}
func (*ErrorBadRequest) cancelPendingChangeRes()       {}
func (*ErrorBadRequest) confirm2FARes()                {}
func (*ErrorBadRequest) consumeSAMLAssertionRes()      {}
func (*ErrorBadRequest) createCategoryRes()            {}
func (*ErrorBadRequest) createEnvironmentRes()         {}
func (*ErrorBadRequest) createFeatureFlagVariantRes()  {}
func (*ErrorBadRequest) createFeatureRuleRes()         {}
func (*ErrorBadRequest) createFeatureScheduleRes()     {}
func (*ErrorBadRequest) createNotificationSettingRes() {}
func (*ErrorBadRequest) createProjectFeatureRes()      {}
func (*ErrorBadRequest) createProjectMembershipRes()   {}
func (*ErrorBadRequest) createProjectSegmentRes()      {}
func (*ErrorBadRequest) createProjectSettingRes()      {}
func (*ErrorBadRequest) createProjectTagRes()          {}
func (*ErrorBadRequest) createRuleAttributeRes()       {}
func (*ErrorBadRequest) createUserRes()                {}
func (*ErrorBadRequest) deleteRuleAttributeRes()       {}
func (*ErrorBadRequest) deleteUserRes()                {}
func (*ErrorBadRequest) disable2FARes()                {}
func (*ErrorBadRequest) forgotPasswordRes()            {}
func (*ErrorBadRequest) getDashboardOverviewRes()      {}
func (*ErrorBadRequest) getFeatureTimelineRes()        {}
func (*ErrorBadRequest) initiateTOTPApprovalRes()      {}
func (*ErrorBadRequest) listPendingChangesRes()        {}
func (*ErrorBadRequest) rejectPendingChangeRes()       {}
func (*ErrorBadRequest) reset2FARes()                  {}
func (*ErrorBadRequest) resetPasswordRes()             {}
func (*ErrorBadRequest) sSOCallbackRes()               {}
func (*ErrorBadRequest) sSOInitiateRes()               {}
func (*ErrorBadRequest) send2FACodeRes()               {}
func (*ErrorBadRequest) setSuperuserStatusRes()        {}
func (*ErrorBadRequest) setUserActiveStatusRes()       {}
func (*ErrorBadRequest) testFeatureTimelineRes()       {}
func (*ErrorBadRequest) toggleFeatureRes()             {}
func (*ErrorBadRequest) updateCategoryRes()            {}
func (*ErrorBadRequest) updateEnvironmentRes()         {}
func (*ErrorBadRequest) updateFeatureRes()             {}
func (*ErrorBadRequest) updateFeatureScheduleRes()     {}
func (*ErrorBadRequest) updateLicenseAcceptanceRes()   {}
func (*ErrorBadRequest) updateNotificationSettingRes() {}
func (*ErrorBadRequest) updateProjectMembershipRes()   {}
func (*ErrorBadRequest) updateProjectRes()             {}
func (*ErrorBadRequest) updateProjectSettingRes()      {}
func (*ErrorBadRequest) updateProjectTagRes()          {}
func (*ErrorBadRequest) updateSegmentRes()             {}
func (*ErrorBadRequest) userChangeMyPasswordRes()      {}
func (*ErrorBadRequest) verify2FARes()                 {}

type ErrorBadRequestError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorBadRequestError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorBadRequestError) SetMessage(val OptString) {
	s.Message = val
}

// Ref: #/components/schemas/ErrorConflict
type ErrorConflict struct {
	Error ErrorConflictError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorConflict) GetError() ErrorConflictError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorConflict) SetError(val ErrorConflictError) {
	s.Error = val
}

func (*ErrorConflict) addFeatureTagRes()            {}
func (*ErrorConflict) approvePendingChangeRes()     {}
func (*ErrorConflict) cancelPendingChangeRes()      {}
func (*ErrorConflict) createEnvironmentRes()        {}
func (*ErrorConflict) createFeatureFlagVariantRes() {}
func (*ErrorConflict) createFeatureRuleRes()        {}
func (*ErrorConflict) createFeatureScheduleRes()    {}
func (*ErrorConflict) createProjectSettingRes()     {}
func (*ErrorConflict) deleteFeatureRes()            {}
func (*ErrorConflict) deleteFeatureScheduleRes()    {}
func (*ErrorConflict) initiateTOTPApprovalRes()     {}
func (*ErrorConflict) rejectPendingChangeRes()      {}
func (*ErrorConflict) removeFeatureTagRes()         {}
func (*ErrorConflict) toggleFeatureRes()            {}
func (*ErrorConflict) updateFeatureRes()            {}
func (*ErrorConflict) updateFeatureScheduleRes()    {}

type ErrorConflictError struct {
	Message OptString `json:"message"`
	Code    OptString `json:"code"`
}

// GetMessage returns the value of Message.
func (s *ErrorConflictError) GetMessage() OptString {
	return s.Message
}

// GetCode returns the value of Code.
func (s *ErrorConflictError) GetCode() OptString {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *ErrorConflictError) SetMessage(val OptString) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ErrorConflictError) SetCode(val OptString) {
	s.Code = val
}

type ErrorError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorInternalServerError
type ErrorInternalServerError struct {
	Error ErrorInternalServerErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorInternalServerError) GetError() ErrorInternalServerErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorInternalServerError) SetError(val ErrorInternalServerErrorError) {
	s.Error = val
}

func (*ErrorInternalServerError) addFeatureTagRes()               {}
func (*ErrorInternalServerError) addProjectRes()                  {}
func (*ErrorInternalServerError) approvePendingChangeRes()        {}
func (*ErrorInternalServerError) archiveProjectRes()              {}
func (*ErrorInternalServerError) cancelPendingChangeRes()         {}
func (*ErrorInternalServerError) consumeSAMLAssertionRes()        {}
func (*ErrorInternalServerError) createCategoryRes()              {}
func (*ErrorInternalServerError) createEnvironmentRes()           {}
func (*ErrorInternalServerError) createFeatureFlagVariantRes()    {}
func (*ErrorInternalServerError) createFeatureRuleRes()           {}
func (*ErrorInternalServerError) createFeatureScheduleRes()       {}
func (*ErrorInternalServerError) createNotificationSettingRes()   {}
func (*ErrorInternalServerError) createProjectFeatureRes()        {}
func (*ErrorInternalServerError) createProjectMembershipRes()     {}
func (*ErrorInternalServerError) createProjectSegmentRes()        {}
func (*ErrorInternalServerError) createProjectSettingRes()        {}
func (*ErrorInternalServerError) createProjectTagRes()            {}
func (*ErrorInternalServerError) createRuleAttributeRes()         {}
func (*ErrorInternalServerError) createUserRes()                  {}
func (*ErrorInternalServerError) deleteCategoryRes()              {}
func (*ErrorInternalServerError) deleteEnvironmentRes()           {}
func (*ErrorInternalServerError) deleteFeatureRes()               {}
func (*ErrorInternalServerError) deleteFeatureScheduleRes()       {}
func (*ErrorInternalServerError) deleteNotificationSettingRes()   {}
func (*ErrorInternalServerError) deleteProjectMembershipRes()     {}
func (*ErrorInternalServerError) deleteProjectSettingRes()        {}
func (*ErrorInternalServerError) deleteProjectTagRes()            {}
func (*ErrorInternalServerError) deleteRuleAttributeRes()         {}
func (*ErrorInternalServerError) deleteSegmentRes()               {}
func (*ErrorInternalServerError) deleteUserRes()                  {}
func (*ErrorInternalServerError) forgotPasswordRes()              {}
func (*ErrorInternalServerError) getAuditLogEntryRes()            {}
func (*ErrorInternalServerError) getCategoryRes()                 {}
func (*ErrorInternalServerError) getCurrentUserRes()              {}
func (*ErrorInternalServerError) getDashboardOverviewRes()        {}
func (*ErrorInternalServerError) getEnvironmentRes()              {}
func (*ErrorInternalServerError) getFeatureRes()                  {}
func (*ErrorInternalServerError) getFeatureScheduleRes()          {}
func (*ErrorInternalServerError) getFeatureTimelineRes()          {}
func (*ErrorInternalServerError) getNotificationSettingRes()      {}
func (*ErrorInternalServerError) getPendingChangeRes()            {}
func (*ErrorInternalServerError) getProjectMembershipRes()        {}
func (*ErrorInternalServerError) getProjectRes()                  {}
func (*ErrorInternalServerError) getProjectSettingRes()           {}
func (*ErrorInternalServerError) getProjectTagRes()               {}
func (*ErrorInternalServerError) getRolePermissionsRes()          {}
func (*ErrorInternalServerError) getSAMLMetadataRes()             {}
func (*ErrorInternalServerError) getSSOProvidersRes()             {}
func (*ErrorInternalServerError) getSegmentRes()                  {}
func (*ErrorInternalServerError) listAllFeatureSchedulesRes()     {}
func (*ErrorInternalServerError) listCategoriesRes()              {}
func (*ErrorInternalServerError) listFeatureFlagVariantsRes()     {}
func (*ErrorInternalServerError) listFeatureRulesRes()            {}
func (*ErrorInternalServerError) listFeatureSchedulesRes()        {}
func (*ErrorInternalServerError) listFeatureTagsRes()             {}
func (*ErrorInternalServerError) listNotificationSettingsRes()    {}
func (*ErrorInternalServerError) listPendingChangesRes()          {}
func (*ErrorInternalServerError) listPermissionsRes()             {}
func (*ErrorInternalServerError) listProjectAuditLogsRes()        {}
func (*ErrorInternalServerError) listProjectChangesRes()          {}
func (*ErrorInternalServerError) listProjectEnvironmentsRes()     {}
func (*ErrorInternalServerError) listProjectFeaturesRes()         {}
func (*ErrorInternalServerError) listProjectMembershipsRes()      {}
func (*ErrorInternalServerError) listProjectSegmentsRes()         {}
func (*ErrorInternalServerError) listProjectSettingsRes()         {}
func (*ErrorInternalServerError) listProjectTagsRes()             {}
func (*ErrorInternalServerError) listProjectsRes()                {}
func (*ErrorInternalServerError) listRolePermissionsRes()         {}
func (*ErrorInternalServerError) listRolesRes()                   {}
func (*ErrorInternalServerError) listRuleAttributesRes()          {}
func (*ErrorInternalServerError) listSegmentDesyncFeatureIDsRes() {}
func (*ErrorInternalServerError) listUsersRes()                   {}
func (*ErrorInternalServerError) loginRes()                       {}
func (*ErrorInternalServerError) refreshTokenRes()                {}
func (*ErrorInternalServerError) rejectPendingChangeRes()         {}
func (*ErrorInternalServerError) removeFeatureTagRes()            {}
func (*ErrorInternalServerError) resetPasswordRes()               {}
func (*ErrorInternalServerError) sSOCallbackRes()                 {}
func (*ErrorInternalServerError) sSOInitiateRes()                 {}
func (*ErrorInternalServerError) sendTestNotificationRes()        {}
func (*ErrorInternalServerError) setSuperuserStatusRes()          {}
func (*ErrorInternalServerError) setUserActiveStatusRes()         {}
func (*ErrorInternalServerError) syncCustomizedFeatureRuleRes()   {}
func (*ErrorInternalServerError) testFeatureTimelineRes()         {}
func (*ErrorInternalServerError) toggleFeatureRes()               {}
func (*ErrorInternalServerError) updateCategoryRes()              {}
func (*ErrorInternalServerError) updateEnvironmentRes()           {}
func (*ErrorInternalServerError) updateFeatureRes()               {}
func (*ErrorInternalServerError) updateFeatureScheduleRes()       {}
func (*ErrorInternalServerError) updateLicenseAcceptanceRes()     {}
func (*ErrorInternalServerError) updateNotificationSettingRes()   {}
func (*ErrorInternalServerError) updateProjectMembershipRes()     {}
func (*ErrorInternalServerError) updateProjectRes()               {}
func (*ErrorInternalServerError) updateProjectSettingRes()        {}
func (*ErrorInternalServerError) updateProjectTagRes()            {}
func (*ErrorInternalServerError) updateSegmentRes()               {}
func (*ErrorInternalServerError) userChangeMyPasswordRes()        {}

type ErrorInternalServerErrorError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorInternalServerErrorError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorInternalServerErrorError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorInvalidCredentials
type ErrorInvalidCredentials struct {
	Error ErrorInvalidCredentialsError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorInvalidCredentials) GetError() ErrorInvalidCredentialsError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorInvalidCredentials) SetError(val ErrorInvalidCredentialsError) {
	s.Error = val
}

func (*ErrorInvalidCredentials) loginRes() {}

type ErrorInvalidCredentialsError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorInvalidCredentialsError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorInvalidCredentialsError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorNotFound
type ErrorNotFound struct {
	Error ErrorNotFoundError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorNotFound) GetError() ErrorNotFoundError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorNotFound) SetError(val ErrorNotFoundError) {
	s.Error = val
}

func (*ErrorNotFound) addFeatureTagRes()               {}
func (*ErrorNotFound) approvePendingChangeRes()        {}
func (*ErrorNotFound) archiveProjectRes()              {}
func (*ErrorNotFound) cancelPendingChangeRes()         {}
func (*ErrorNotFound) createFeatureFlagVariantRes()    {}
func (*ErrorNotFound) createFeatureRuleRes()           {}
func (*ErrorNotFound) createFeatureScheduleRes()       {}
func (*ErrorNotFound) createNotificationSettingRes()   {}
func (*ErrorNotFound) createProjectFeatureRes()        {}
func (*ErrorNotFound) createProjectMembershipRes()     {}
func (*ErrorNotFound) createProjectSegmentRes()        {}
func (*ErrorNotFound) createProjectSettingRes()        {}
func (*ErrorNotFound) createProjectTagRes()            {}
func (*ErrorNotFound) deleteCategoryRes()              {}
func (*ErrorNotFound) deleteEnvironmentRes()           {}
func (*ErrorNotFound) deleteFeatureRes()               {}
func (*ErrorNotFound) deleteFeatureScheduleRes()       {}
func (*ErrorNotFound) deleteNotificationSettingRes()   {}
func (*ErrorNotFound) deleteProjectMembershipRes()     {}
func (*ErrorNotFound) deleteProjectSettingRes()        {}
func (*ErrorNotFound) deleteProjectTagRes()            {}
func (*ErrorNotFound) deleteRuleAttributeRes()         {}
func (*ErrorNotFound) deleteSegmentRes()               {}
func (*ErrorNotFound) deleteUserRes()                  {}
func (*ErrorNotFound) getAuditLogEntryRes()            {}
func (*ErrorNotFound) getCategoryRes()                 {}
func (*ErrorNotFound) getEnvironmentRes()              {}
func (*ErrorNotFound) getFeatureRes()                  {}
func (*ErrorNotFound) getFeatureScheduleRes()          {}
func (*ErrorNotFound) getFeatureTimelineRes()          {}
func (*ErrorNotFound) getNotificationSettingRes()      {}
func (*ErrorNotFound) getPendingChangeRes()            {}
func (*ErrorNotFound) getProjectMembershipRes()        {}
func (*ErrorNotFound) getProjectRes()                  {}
func (*ErrorNotFound) getProjectSettingRes()           {}
func (*ErrorNotFound) getProjectTagRes()               {}
func (*ErrorNotFound) getRolePermissionsRes()          {}
func (*ErrorNotFound) getSAMLMetadataRes()             {}
func (*ErrorNotFound) getSegmentRes()                  {}
func (*ErrorNotFound) initiateTOTPApprovalRes()        {}
func (*ErrorNotFound) listFeatureFlagVariantsRes()     {}
func (*ErrorNotFound) listFeatureRulesRes()            {}
func (*ErrorNotFound) listFeatureSchedulesRes()        {}
func (*ErrorNotFound) listFeatureTagsRes()             {}
func (*ErrorNotFound) listNotificationSettingsRes()    {}
func (*ErrorNotFound) listProjectAuditLogsRes()        {}
func (*ErrorNotFound) listProjectChangesRes()          {}
func (*ErrorNotFound) listProjectFeaturesRes()         {}
func (*ErrorNotFound) listProjectMembershipsRes()      {}
func (*ErrorNotFound) listProjectSegmentsRes()         {}
func (*ErrorNotFound) listProjectSettingsRes()         {}
func (*ErrorNotFound) listProjectTagsRes()             {}
func (*ErrorNotFound) listSegmentDesyncFeatureIDsRes() {}
func (*ErrorNotFound) listUsersRes()                   {}
func (*ErrorNotFound) markNotificationAsReadRes()      {}
func (*ErrorNotFound) rejectPendingChangeRes()         {}
func (*ErrorNotFound) removeFeatureTagRes()            {}
func (*ErrorNotFound) setSuperuserStatusRes()          {}
func (*ErrorNotFound) setUserActiveStatusRes()         {}
func (*ErrorNotFound) syncCustomizedFeatureRuleRes()   {}
func (*ErrorNotFound) testFeatureTimelineRes()         {}
func (*ErrorNotFound) toggleFeatureRes()               {}
func (*ErrorNotFound) updateCategoryRes()              {}
func (*ErrorNotFound) updateEnvironmentRes()           {}
func (*ErrorNotFound) updateFeatureRes()               {}
func (*ErrorNotFound) updateFeatureScheduleRes()       {}
func (*ErrorNotFound) updateNotificationSettingRes()   {}
func (*ErrorNotFound) updateProjectMembershipRes()     {}
func (*ErrorNotFound) updateProjectRes()               {}
func (*ErrorNotFound) updateProjectSettingRes()        {}
func (*ErrorNotFound) updateProjectTagRes()            {}
func (*ErrorNotFound) updateSegmentRes()               {}

type ErrorNotFoundError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorNotFoundError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorNotFoundError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorPermissionDenied
type ErrorPermissionDenied struct {
	Error ErrorPermissionDeniedError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorPermissionDenied) GetError() ErrorPermissionDeniedError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorPermissionDenied) SetError(val ErrorPermissionDeniedError) {
	s.Error = val
}

func (*ErrorPermissionDenied) addFeatureTagRes()               {}
func (*ErrorPermissionDenied) addProjectRes()                  {}
func (*ErrorPermissionDenied) approvePendingChangeRes()        {}
func (*ErrorPermissionDenied) archiveProjectRes()              {}
func (*ErrorPermissionDenied) cancelLDAPSyncRes()              {}
func (*ErrorPermissionDenied) cancelPendingChangeRes()         {}
func (*ErrorPermissionDenied) createCategoryRes()              {}
func (*ErrorPermissionDenied) createEnvironmentRes()           {}
func (*ErrorPermissionDenied) createFeatureFlagVariantRes()    {}
func (*ErrorPermissionDenied) createFeatureRuleRes()           {}
func (*ErrorPermissionDenied) createFeatureScheduleRes()       {}
func (*ErrorPermissionDenied) createNotificationSettingRes()   {}
func (*ErrorPermissionDenied) createProjectFeatureRes()        {}
func (*ErrorPermissionDenied) createProjectMembershipRes()     {}
func (*ErrorPermissionDenied) createProjectSegmentRes()        {}
func (*ErrorPermissionDenied) createProjectSettingRes()        {}
func (*ErrorPermissionDenied) createProjectTagRes()            {}
func (*ErrorPermissionDenied) createRuleAttributeRes()         {}
func (*ErrorPermissionDenied) createUserRes()                  {}
func (*ErrorPermissionDenied) deleteCategoryRes()              {}
func (*ErrorPermissionDenied) deleteEnvironmentRes()           {}
func (*ErrorPermissionDenied) deleteFeatureRes()               {}
func (*ErrorPermissionDenied) deleteFeatureScheduleRes()       {}
func (*ErrorPermissionDenied) deleteLDAPConfigRes()            {}
func (*ErrorPermissionDenied) deleteNotificationSettingRes()   {}
func (*ErrorPermissionDenied) deleteProjectMembershipRes()     {}
func (*ErrorPermissionDenied) deleteProjectSettingRes()        {}
func (*ErrorPermissionDenied) deleteProjectTagRes()            {}
func (*ErrorPermissionDenied) deleteRuleAttributeRes()         {}
func (*ErrorPermissionDenied) deleteSegmentRes()               {}
func (*ErrorPermissionDenied) deleteUserRes()                  {}
func (*ErrorPermissionDenied) forgotPasswordRes()              {}
func (*ErrorPermissionDenied) getAuditLogEntryRes()            {}
func (*ErrorPermissionDenied) getCategoryRes()                 {}
func (*ErrorPermissionDenied) getDashboardOverviewRes()        {}
func (*ErrorPermissionDenied) getEnvironmentRes()              {}
func (*ErrorPermissionDenied) getFeatureRes()                  {}
func (*ErrorPermissionDenied) getFeatureScheduleRes()          {}
func (*ErrorPermissionDenied) getFeatureTimelineRes()          {}
func (*ErrorPermissionDenied) getLDAPConfigRes()               {}
func (*ErrorPermissionDenied) getLDAPStatisticsRes()           {}
func (*ErrorPermissionDenied) getLDAPSyncLogDetailsRes()       {}
func (*ErrorPermissionDenied) getLDAPSyncLogsRes()             {}
func (*ErrorPermissionDenied) getLDAPSyncProgressRes()         {}
func (*ErrorPermissionDenied) getLDAPSyncStatusRes()           {}
func (*ErrorPermissionDenied) getNotificationSettingRes()      {}
func (*ErrorPermissionDenied) getPendingChangeRes()            {}
func (*ErrorPermissionDenied) getProjectMembershipRes()        {}
func (*ErrorPermissionDenied) getProjectRes()                  {}
func (*ErrorPermissionDenied) getProjectSettingRes()           {}
func (*ErrorPermissionDenied) getProjectTagRes()               {}
func (*ErrorPermissionDenied) getSegmentRes()                  {}
func (*ErrorPermissionDenied) initiateTOTPApprovalRes()        {}
func (*ErrorPermissionDenied) listAllFeatureSchedulesRes()     {}
func (*ErrorPermissionDenied) listCategoriesRes()              {}
func (*ErrorPermissionDenied) listFeatureFlagVariantsRes()     {}
func (*ErrorPermissionDenied) listFeatureRulesRes()            {}
func (*ErrorPermissionDenied) listFeatureSchedulesRes()        {}
func (*ErrorPermissionDenied) listFeatureTagsRes()             {}
func (*ErrorPermissionDenied) listNotificationSettingsRes()    {}
func (*ErrorPermissionDenied) listPendingChangesRes()          {}
func (*ErrorPermissionDenied) listProjectAuditLogsRes()        {}
func (*ErrorPermissionDenied) listProjectChangesRes()          {}
func (*ErrorPermissionDenied) listProjectEnvironmentsRes()     {}
func (*ErrorPermissionDenied) listProjectFeaturesRes()         {}
func (*ErrorPermissionDenied) listProjectMembershipsRes()      {}
func (*ErrorPermissionDenied) listProjectSegmentsRes()         {}
func (*ErrorPermissionDenied) listProjectSettingsRes()         {}
func (*ErrorPermissionDenied) listProjectTagsRes()             {}
func (*ErrorPermissionDenied) listSegmentDesyncFeatureIDsRes() {}
func (*ErrorPermissionDenied) listUsersRes()                   {}
func (*ErrorPermissionDenied) rejectPendingChangeRes()         {}
func (*ErrorPermissionDenied) removeFeatureTagRes()            {}
func (*ErrorPermissionDenied) setSuperuserStatusRes()          {}
func (*ErrorPermissionDenied) setUserActiveStatusRes()         {}
func (*ErrorPermissionDenied) syncCustomizedFeatureRuleRes()   {}
func (*ErrorPermissionDenied) syncLDAPUsersRes()               {}
func (*ErrorPermissionDenied) testFeatureTimelineRes()         {}
func (*ErrorPermissionDenied) testLDAPConnectionRes()          {}
func (*ErrorPermissionDenied) toggleFeatureRes()               {}
func (*ErrorPermissionDenied) updateCategoryRes()              {}
func (*ErrorPermissionDenied) updateEnvironmentRes()           {}
func (*ErrorPermissionDenied) updateFeatureRes()               {}
func (*ErrorPermissionDenied) updateFeatureScheduleRes()       {}
func (*ErrorPermissionDenied) updateLDAPConfigRes()            {}
func (*ErrorPermissionDenied) updateNotificationSettingRes()   {}
func (*ErrorPermissionDenied) updateProjectMembershipRes()     {}
func (*ErrorPermissionDenied) updateProjectRes()               {}
func (*ErrorPermissionDenied) updateProjectSettingRes()        {}
func (*ErrorPermissionDenied) updateProjectTagRes()            {}
func (*ErrorPermissionDenied) updateSegmentRes()               {}
func (*ErrorPermissionDenied) userChangeMyPasswordRes()        {}

type ErrorPermissionDeniedError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorPermissionDeniedError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorPermissionDeniedError) SetMessage(val OptString) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorTooManyRequests
type ErrorTooManyRequests struct {
	Error ErrorTooManyRequestsError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorTooManyRequests) GetError() ErrorTooManyRequestsError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorTooManyRequests) SetError(val ErrorTooManyRequestsError) {
	s.Error = val
}

func (*ErrorTooManyRequests) confirm2FARes() {}
func (*ErrorTooManyRequests) verify2FARes()  {}

type ErrorTooManyRequestsError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorTooManyRequestsError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorTooManyRequestsError) SetMessage(val OptString) {
	s.Message = val
}

// Merged schema.
// Ref: #/components/schemas/ErrorUnauthorized
type ErrorUnauthorized struct {
	Error ErrorUnauthorizedError `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorUnauthorized) GetError() ErrorUnauthorizedError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorUnauthorized) SetError(val ErrorUnauthorizedError) {
	s.Error = val
}

func (*ErrorUnauthorized) addFeatureTagRes()               {}
func (*ErrorUnauthorized) addProjectRes()                  {}
func (*ErrorUnauthorized) approvePendingChangeRes()        {}
func (*ErrorUnauthorized) archiveProjectRes()              {}
func (*ErrorUnauthorized) cancelLDAPSyncRes()              {}
func (*ErrorUnauthorized) cancelPendingChangeRes()         {}
func (*ErrorUnauthorized) confirm2FARes()                  {}
func (*ErrorUnauthorized) consumeSAMLAssertionRes()        {}
func (*ErrorUnauthorized) createCategoryRes()              {}
func (*ErrorUnauthorized) createEnvironmentRes()           {}
func (*ErrorUnauthorized) createFeatureFlagVariantRes()    {}
func (*ErrorUnauthorized) createFeatureRuleRes()           {}
func (*ErrorUnauthorized) createFeatureScheduleRes()       {}
func (*ErrorUnauthorized) createNotificationSettingRes()   {}
func (*ErrorUnauthorized) createProjectFeatureRes()        {}
func (*ErrorUnauthorized) createProjectMembershipRes()     {}
func (*ErrorUnauthorized) createProjectSegmentRes()        {}
func (*ErrorUnauthorized) createProjectSettingRes()        {}
func (*ErrorUnauthorized) createProjectTagRes()            {}
func (*ErrorUnauthorized) createRuleAttributeRes()         {}
func (*ErrorUnauthorized) createUserRes()                  {}
func (*ErrorUnauthorized) deleteCategoryRes()              {}
func (*ErrorUnauthorized) deleteEnvironmentRes()           {}
func (*ErrorUnauthorized) deleteFeatureRes()               {}
func (*ErrorUnauthorized) deleteFeatureScheduleRes()       {}
func (*ErrorUnauthorized) deleteLDAPConfigRes()            {}
func (*ErrorUnauthorized) deleteNotificationSettingRes()   {}
func (*ErrorUnauthorized) deleteProjectMembershipRes()     {}
func (*ErrorUnauthorized) deleteProjectSettingRes()        {}
func (*ErrorUnauthorized) deleteProjectTagRes()            {}
func (*ErrorUnauthorized) deleteRuleAttributeRes()         {}
func (*ErrorUnauthorized) deleteSegmentRes()               {}
func (*ErrorUnauthorized) deleteUserRes()                  {}
func (*ErrorUnauthorized) disable2FARes()                  {}
func (*ErrorUnauthorized) getAuditLogEntryRes()            {}
func (*ErrorUnauthorized) getCategoryRes()                 {}
func (*ErrorUnauthorized) getCurrentUserRes()              {}
func (*ErrorUnauthorized) getDashboardOverviewRes()        {}
func (*ErrorUnauthorized) getEnvironmentRes()              {}
func (*ErrorUnauthorized) getFeatureRes()                  {}
func (*ErrorUnauthorized) getFeatureScheduleRes()          {}
func (*ErrorUnauthorized) getFeatureTimelineRes()          {}
func (*ErrorUnauthorized) getLDAPConfigRes()               {}
func (*ErrorUnauthorized) getLDAPStatisticsRes()           {}
func (*ErrorUnauthorized) getLDAPSyncLogDetailsRes()       {}
func (*ErrorUnauthorized) getLDAPSyncLogsRes()             {}
func (*ErrorUnauthorized) getLDAPSyncProgressRes()         {}
func (*ErrorUnauthorized) getLDAPSyncStatusRes()           {}
func (*ErrorUnauthorized) getNotificationSettingRes()      {}
func (*ErrorUnauthorized) getPendingChangeRes()            {}
func (*ErrorUnauthorized) getProjectMembershipRes()        {}
func (*ErrorUnauthorized) getProjectRes()                  {}
func (*ErrorUnauthorized) getProjectSettingRes()           {}
func (*ErrorUnauthorized) getProjectTagRes()               {}
func (*ErrorUnauthorized) getRolePermissionsRes()          {}
func (*ErrorUnauthorized) getSegmentRes()                  {}
func (*ErrorUnauthorized) getUnreadNotificationsCountRes() {}
func (*ErrorUnauthorized) getUserNotificationsRes()        {}
func (*ErrorUnauthorized) initiateTOTPApprovalRes()        {}
func (*ErrorUnauthorized) listAllFeatureSchedulesRes()     {}
func (*ErrorUnauthorized) listCategoriesRes()              {}
func (*ErrorUnauthorized) listFeatureFlagVariantsRes()     {}
func (*ErrorUnauthorized) listFeatureRulesRes()            {}
func (*ErrorUnauthorized) listFeatureSchedulesRes()        {}
func (*ErrorUnauthorized) listFeatureTagsRes()             {}
func (*ErrorUnauthorized) listNotificationSettingsRes()    {}
func (*ErrorUnauthorized) listPendingChangesRes()          {}
func (*ErrorUnauthorized) listPermissionsRes()             {}
func (*ErrorUnauthorized) listProjectAuditLogsRes()        {}
func (*ErrorUnauthorized) listProjectChangesRes()          {}
func (*ErrorUnauthorized) listProjectEnvironmentsRes()     {}
func (*ErrorUnauthorized) listProjectFeaturesRes()         {}
func (*ErrorUnauthorized) listProjectMembershipsRes()      {}
func (*ErrorUnauthorized) listProjectSegmentsRes()         {}
func (*ErrorUnauthorized) listProjectSettingsRes()         {}
func (*ErrorUnauthorized) listProjectTagsRes()             {}
func (*ErrorUnauthorized) listProjectsRes()                {}
func (*ErrorUnauthorized) listRolePermissionsRes()         {}
func (*ErrorUnauthorized) listRolesRes()                   {}
func (*ErrorUnauthorized) listRuleAttributesRes()          {}
func (*ErrorUnauthorized) listSegmentDesyncFeatureIDsRes() {}
func (*ErrorUnauthorized) listUsersRes()                   {}
func (*ErrorUnauthorized) markAllNotificationsAsReadRes()  {}
func (*ErrorUnauthorized) markNotificationAsReadRes()      {}
func (*ErrorUnauthorized) refreshTokenRes()                {}
func (*ErrorUnauthorized) rejectPendingChangeRes()         {}
func (*ErrorUnauthorized) removeFeatureTagRes()            {}
func (*ErrorUnauthorized) reset2FARes()                    {}
func (*ErrorUnauthorized) resetPasswordRes()               {}
func (*ErrorUnauthorized) sSOCallbackRes()                 {}
func (*ErrorUnauthorized) send2FACodeRes()                 {}
func (*ErrorUnauthorized) setSuperuserStatusRes()          {}
func (*ErrorUnauthorized) setUserActiveStatusRes()         {}
func (*ErrorUnauthorized) setup2FARes()                    {}
func (*ErrorUnauthorized) syncCustomizedFeatureRuleRes()   {}
func (*ErrorUnauthorized) syncLDAPUsersRes()               {}
func (*ErrorUnauthorized) testFeatureTimelineRes()         {}
func (*ErrorUnauthorized) testLDAPConnectionRes()          {}
func (*ErrorUnauthorized) toggleFeatureRes()               {}
func (*ErrorUnauthorized) updateCategoryRes()              {}
func (*ErrorUnauthorized) updateEnvironmentRes()           {}
func (*ErrorUnauthorized) updateFeatureRes()               {}
func (*ErrorUnauthorized) updateFeatureScheduleRes()       {}
func (*ErrorUnauthorized) updateLDAPConfigRes()            {}
func (*ErrorUnauthorized) updateLicenseAcceptanceRes()     {}
func (*ErrorUnauthorized) updateNotificationSettingRes()   {}
func (*ErrorUnauthorized) updateProjectMembershipRes()     {}
func (*ErrorUnauthorized) updateProjectRes()               {}
func (*ErrorUnauthorized) updateProjectSettingRes()        {}
func (*ErrorUnauthorized) updateProjectTagRes()            {}
func (*ErrorUnauthorized) updateSegmentRes()               {}
func (*ErrorUnauthorized) userChangeMyPasswordRes()        {}
func (*ErrorUnauthorized) verify2FARes()                   {}

type ErrorUnauthorizedError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorUnauthorizedError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorUnauthorizedError) SetMessage(val OptString) {
	s.Message = val
}

// Ref: #/components/schemas/Feature
type Feature struct {
	ID          string       `json:"id"`
	ProjectID   string       `json:"project_id"`
	Key         string       `json:"key"`
	Name        string       `json:"name"`
	Description OptNilString `json:"description"`
	Kind        FeatureKind  `json:"kind"`
	RolloutKey  OptString    `json:"rollout_key"`
	// Whether the feature is enabled in the specified environment.
	Enabled bool `json:"enabled"`
	// Default value for the feature in the specified environment.
	DefaultValue string    `json:"default_value"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Feature) GetID() string {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *Feature) GetProjectID() string {
	return s.ProjectID
}

// GetKey returns the value of Key.
func (s *Feature) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *Feature) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Feature) GetDescription() OptNilString {
	return s.Description
}

// GetKind returns the value of Kind.
func (s *Feature) GetKind() FeatureKind {
	return s.Kind
}

// GetRolloutKey returns the value of RolloutKey.
func (s *Feature) GetRolloutKey() OptString {
	return s.RolloutKey
}

// GetEnabled returns the value of Enabled.
func (s *Feature) GetEnabled() bool {
	return s.Enabled
}

// GetDefaultValue returns the value of DefaultValue.
func (s *Feature) GetDefaultValue() string {
	return s.DefaultValue
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Feature) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Feature) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Feature) SetID(val string) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *Feature) SetProjectID(val string) {
	s.ProjectID = val
}

// SetKey sets the value of Key.
func (s *Feature) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *Feature) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Feature) SetDescription(val OptNilString) {
	s.Description = val
}

// SetKind sets the value of Kind.
func (s *Feature) SetKind(val FeatureKind) {
	s.Kind = val
}

// SetRolloutKey sets the value of RolloutKey.
func (s *Feature) SetRolloutKey(val OptString) {
	s.RolloutKey = val
}

// SetEnabled sets the value of Enabled.
func (s *Feature) SetEnabled(val bool) {
	s.Enabled = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *Feature) SetDefaultValue(val string) {
	s.DefaultValue = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Feature) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Feature) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/FeatureDetailsResponse
type FeatureDetailsResponse struct {
	Feature  FeatureExtended `json:"feature"`
	Variants []FlagVariant   `json:"variants"`
	Rules    []Rule          `json:"rules"`
	Tags     []ProjectTag    `json:"tags"`
}

// GetFeature returns the value of Feature.
func (s *FeatureDetailsResponse) GetFeature() FeatureExtended {
	return s.Feature
}

// GetVariants returns the value of Variants.
func (s *FeatureDetailsResponse) GetVariants() []FlagVariant {
	return s.Variants
}

// GetRules returns the value of Rules.
func (s *FeatureDetailsResponse) GetRules() []Rule {
	return s.Rules
}

// GetTags returns the value of Tags.
func (s *FeatureDetailsResponse) GetTags() []ProjectTag {
	return s.Tags
}

// SetFeature sets the value of Feature.
func (s *FeatureDetailsResponse) SetFeature(val FeatureExtended) {
	s.Feature = val
}

// SetVariants sets the value of Variants.
func (s *FeatureDetailsResponse) SetVariants(val []FlagVariant) {
	s.Variants = val
}

// SetRules sets the value of Rules.
func (s *FeatureDetailsResponse) SetRules(val []Rule) {
	s.Rules = val
}

// SetTags sets the value of Tags.
func (s *FeatureDetailsResponse) SetTags(val []ProjectTag) {
	s.Tags = val
}

func (*FeatureDetailsResponse) getFeatureRes()    {}
func (*FeatureDetailsResponse) updateFeatureRes() {}

// Merged schema.
// Ref: #/components/schemas/FeatureExtended
type FeatureExtended struct {
	ID          string       `json:"id"`
	ProjectID   string       `json:"project_id"`
	Key         string       `json:"key"`
	Name        string       `json:"name"`
	Description OptNilString `json:"description"`
	Kind        FeatureKind  `json:"kind"`
	RolloutKey  OptString    `json:"rollout_key"`
	// Whether the feature is enabled in the specified environment.
	Enabled bool `json:"enabled"`
	// Default value for the feature in the specified environment.
	DefaultValue string    `json:"default_value"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	// Indicates if the feature is currently active (taking schedules).
	IsActive bool `json:"is_active"`
	// Indicates the next state the feature will transition to based on schedule (null if no schedule).
	NextState OptNilBool `json:"next_state"`
	// Timestamp when the feature will transition to the next state (null if no schedule).
	NextStateTime OptNilDateTime `json:"next_state_time"`
	HealthStatus  string         `json:"health_status"`
	// Tags associated with this feature.
	Tags []ProjectTag `json:"tags"`
}

// GetID returns the value of ID.
func (s *FeatureExtended) GetID() string {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *FeatureExtended) GetProjectID() string {
	return s.ProjectID
}

// GetKey returns the value of Key.
func (s *FeatureExtended) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *FeatureExtended) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *FeatureExtended) GetDescription() OptNilString {
	return s.Description
}

// GetKind returns the value of Kind.
func (s *FeatureExtended) GetKind() FeatureKind {
	return s.Kind
}

// GetRolloutKey returns the value of RolloutKey.
func (s *FeatureExtended) GetRolloutKey() OptString {
	return s.RolloutKey
}

// GetEnabled returns the value of Enabled.
func (s *FeatureExtended) GetEnabled() bool {
	return s.Enabled
}

// GetDefaultValue returns the value of DefaultValue.
func (s *FeatureExtended) GetDefaultValue() string {
	return s.DefaultValue
}

// GetCreatedAt returns the value of CreatedAt.
func (s *FeatureExtended) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *FeatureExtended) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetIsActive returns the value of IsActive.
func (s *FeatureExtended) GetIsActive() bool {
	return s.IsActive
}

// GetNextState returns the value of NextState.
func (s *FeatureExtended) GetNextState() OptNilBool {
	return s.NextState
}

// GetNextStateTime returns the value of NextStateTime.
func (s *FeatureExtended) GetNextStateTime() OptNilDateTime {
	return s.NextStateTime
}

// GetHealthStatus returns the value of HealthStatus.
func (s *FeatureExtended) GetHealthStatus() string {
	return s.HealthStatus
}

// GetTags returns the value of Tags.
func (s *FeatureExtended) GetTags() []ProjectTag {
	return s.Tags
}

// SetID sets the value of ID.
func (s *FeatureExtended) SetID(val string) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *FeatureExtended) SetProjectID(val string) {
	s.ProjectID = val
}

// SetKey sets the value of Key.
func (s *FeatureExtended) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *FeatureExtended) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *FeatureExtended) SetDescription(val OptNilString) {
	s.Description = val
}

// SetKind sets the value of Kind.
func (s *FeatureExtended) SetKind(val FeatureKind) {
	s.Kind = val
}

// SetRolloutKey sets the value of RolloutKey.
func (s *FeatureExtended) SetRolloutKey(val OptString) {
	s.RolloutKey = val
}

// SetEnabled sets the value of Enabled.
func (s *FeatureExtended) SetEnabled(val bool) {
	s.Enabled = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *FeatureExtended) SetDefaultValue(val string) {
	s.DefaultValue = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *FeatureExtended) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *FeatureExtended) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetIsActive sets the value of IsActive.
func (s *FeatureExtended) SetIsActive(val bool) {
	s.IsActive = val
}

// SetNextState sets the value of NextState.
func (s *FeatureExtended) SetNextState(val OptNilBool) {
	s.NextState = val
}

// SetNextStateTime sets the value of NextStateTime.
func (s *FeatureExtended) SetNextStateTime(val OptNilDateTime) {
	s.NextStateTime = val
}

// SetHealthStatus sets the value of HealthStatus.
func (s *FeatureExtended) SetHealthStatus(val string) {
	s.HealthStatus = val
}

// SetTags sets the value of Tags.
func (s *FeatureExtended) SetTags(val []ProjectTag) {
	s.Tags = val
}

// Ref: #/components/schemas/FeatureKind
type FeatureKind string

const (
	FeatureKindSimple       FeatureKind = "simple"
	FeatureKindMultivariant FeatureKind = "multivariant"
)

// AllValues returns all FeatureKind values.
func (FeatureKind) AllValues() []FeatureKind {
	return []FeatureKind{
		FeatureKindSimple,
		FeatureKindMultivariant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FeatureKind) MarshalText() ([]byte, error) {
	switch s {
	case FeatureKindSimple:
		return []byte(s), nil
	case FeatureKindMultivariant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FeatureKind) UnmarshalText(data []byte) error {
	switch FeatureKind(data) {
	case FeatureKindSimple:
		*s = FeatureKindSimple
		return nil
	case FeatureKindMultivariant:
		*s = FeatureKindMultivariant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FeatureRecent
type FeatureRecent struct {
	FeatureID   OptUUID     `json:"feature_id"`
	FeatureName OptString   `json:"feature_name"`
	Action      OptString   `json:"action"`
	Actor       OptString   `json:"actor"`
	At          OptDateTime `json:"at"`
}

// GetFeatureID returns the value of FeatureID.
func (s *FeatureRecent) GetFeatureID() OptUUID {
	return s.FeatureID
}

// GetFeatureName returns the value of FeatureName.
func (s *FeatureRecent) GetFeatureName() OptString {
	return s.FeatureName
}

// GetAction returns the value of Action.
func (s *FeatureRecent) GetAction() OptString {
	return s.Action
}

// GetActor returns the value of Actor.
func (s *FeatureRecent) GetActor() OptString {
	return s.Actor
}

// GetAt returns the value of At.
func (s *FeatureRecent) GetAt() OptDateTime {
	return s.At
}

// SetFeatureID sets the value of FeatureID.
func (s *FeatureRecent) SetFeatureID(val OptUUID) {
	s.FeatureID = val
}

// SetFeatureName sets the value of FeatureName.
func (s *FeatureRecent) SetFeatureName(val OptString) {
	s.FeatureName = val
}

// SetAction sets the value of Action.
func (s *FeatureRecent) SetAction(val OptString) {
	s.Action = val
}

// SetActor sets the value of Actor.
func (s *FeatureRecent) SetActor(val OptString) {
	s.Actor = val
}

// SetAt sets the value of At.
func (s *FeatureRecent) SetAt(val OptDateTime) {
	s.At = val
}

// Ref: #/components/schemas/FeatureResponse
type FeatureResponse struct {
	Feature Feature `json:"feature"`
}

// GetFeature returns the value of Feature.
func (s *FeatureResponse) GetFeature() Feature {
	return s.Feature
}

// SetFeature sets the value of Feature.
func (s *FeatureResponse) SetFeature(val Feature) {
	s.Feature = val
}

func (*FeatureResponse) createProjectFeatureRes() {}
func (*FeatureResponse) toggleFeatureRes()        {}

// Ref: #/components/schemas/FeatureSchedule
type FeatureSchedule struct {
	ID        string         `json:"id"`
	ProjectID string         `json:"project_id"`
	FeatureID string         `json:"feature_id"`
	StartsAt  OptNilDateTime `json:"starts_at"`
	EndsAt    OptNilDateTime `json:"ends_at"`
	CronExpr  OptNilString   `json:"cron_expr"`
	// Duration for cron-based schedules. When cron triggers, feature will be enabled/disabled for this
	// duration. Format: '1h30m', '45m', '2h', etc.
	CronDuration OptNilDuration        `json:"cron_duration"`
	Timezone     string                `json:"timezone"`
	Action       FeatureScheduleAction `json:"action"`
	CreatedAt    time.Time             `json:"created_at"`
}

// GetID returns the value of ID.
func (s *FeatureSchedule) GetID() string {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *FeatureSchedule) GetProjectID() string {
	return s.ProjectID
}

// GetFeatureID returns the value of FeatureID.
func (s *FeatureSchedule) GetFeatureID() string {
	return s.FeatureID
}

// GetStartsAt returns the value of StartsAt.
func (s *FeatureSchedule) GetStartsAt() OptNilDateTime {
	return s.StartsAt
}

// GetEndsAt returns the value of EndsAt.
func (s *FeatureSchedule) GetEndsAt() OptNilDateTime {
	return s.EndsAt
}

// GetCronExpr returns the value of CronExpr.
func (s *FeatureSchedule) GetCronExpr() OptNilString {
	return s.CronExpr
}

// GetCronDuration returns the value of CronDuration.
func (s *FeatureSchedule) GetCronDuration() OptNilDuration {
	return s.CronDuration
}

// GetTimezone returns the value of Timezone.
func (s *FeatureSchedule) GetTimezone() string {
	return s.Timezone
}

// GetAction returns the value of Action.
func (s *FeatureSchedule) GetAction() FeatureScheduleAction {
	return s.Action
}

// GetCreatedAt returns the value of CreatedAt.
func (s *FeatureSchedule) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *FeatureSchedule) SetID(val string) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *FeatureSchedule) SetProjectID(val string) {
	s.ProjectID = val
}

// SetFeatureID sets the value of FeatureID.
func (s *FeatureSchedule) SetFeatureID(val string) {
	s.FeatureID = val
}

// SetStartsAt sets the value of StartsAt.
func (s *FeatureSchedule) SetStartsAt(val OptNilDateTime) {
	s.StartsAt = val
}

// SetEndsAt sets the value of EndsAt.
func (s *FeatureSchedule) SetEndsAt(val OptNilDateTime) {
	s.EndsAt = val
}

// SetCronExpr sets the value of CronExpr.
func (s *FeatureSchedule) SetCronExpr(val OptNilString) {
	s.CronExpr = val
}

// SetCronDuration sets the value of CronDuration.
func (s *FeatureSchedule) SetCronDuration(val OptNilDuration) {
	s.CronDuration = val
}

// SetTimezone sets the value of Timezone.
func (s *FeatureSchedule) SetTimezone(val string) {
	s.Timezone = val
}

// SetAction sets the value of Action.
func (s *FeatureSchedule) SetAction(val FeatureScheduleAction) {
	s.Action = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *FeatureSchedule) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Action to apply on schedule.
// Ref: #/components/schemas/FeatureScheduleAction
type FeatureScheduleAction string

const (
	FeatureScheduleActionEnable  FeatureScheduleAction = "enable"
	FeatureScheduleActionDisable FeatureScheduleAction = "disable"
)

// AllValues returns all FeatureScheduleAction values.
func (FeatureScheduleAction) AllValues() []FeatureScheduleAction {
	return []FeatureScheduleAction{
		FeatureScheduleActionEnable,
		FeatureScheduleActionDisable,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FeatureScheduleAction) MarshalText() ([]byte, error) {
	switch s {
	case FeatureScheduleActionEnable:
		return []byte(s), nil
	case FeatureScheduleActionDisable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FeatureScheduleAction) UnmarshalText(data []byte) error {
	switch FeatureScheduleAction(data) {
	case FeatureScheduleActionEnable:
		*s = FeatureScheduleActionEnable
		return nil
	case FeatureScheduleActionDisable:
		*s = FeatureScheduleActionDisable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FeatureScheduleResponse
type FeatureScheduleResponse struct {
	Schedule FeatureSchedule `json:"schedule"`
}

// GetSchedule returns the value of Schedule.
func (s *FeatureScheduleResponse) GetSchedule() FeatureSchedule {
	return s.Schedule
}

// SetSchedule sets the value of Schedule.
func (s *FeatureScheduleResponse) SetSchedule(val FeatureSchedule) {
	s.Schedule = val
}

func (*FeatureScheduleResponse) createFeatureScheduleRes() {}
func (*FeatureScheduleResponse) getFeatureScheduleRes()    {}
func (*FeatureScheduleResponse) updateFeatureScheduleRes() {}

// Ref: #/components/schemas/FeatureTimelineEvent
type FeatureTimelineEvent struct {
	Time    time.Time `json:"time"`
	Enabled bool      `json:"enabled"`
}

// GetTime returns the value of Time.
func (s *FeatureTimelineEvent) GetTime() time.Time {
	return s.Time
}

// GetEnabled returns the value of Enabled.
func (s *FeatureTimelineEvent) GetEnabled() bool {
	return s.Enabled
}

// SetTime sets the value of Time.
func (s *FeatureTimelineEvent) SetTime(val time.Time) {
	s.Time = val
}

// SetEnabled sets the value of Enabled.
func (s *FeatureTimelineEvent) SetEnabled(val bool) {
	s.Enabled = val
}

// Ref: #/components/schemas/FeatureTimelineResponse
type FeatureTimelineResponse struct {
	Events []FeatureTimelineEvent `json:"events"`
}

// GetEvents returns the value of Events.
func (s *FeatureTimelineResponse) GetEvents() []FeatureTimelineEvent {
	return s.Events
}

// SetEvents sets the value of Events.
func (s *FeatureTimelineResponse) SetEvents(val []FeatureTimelineEvent) {
	s.Events = val
}

func (*FeatureTimelineResponse) getFeatureTimelineRes()  {}
func (*FeatureTimelineResponse) testFeatureTimelineRes() {}

// Ref: #/components/schemas/FeatureUpcoming
type FeatureUpcoming struct {
	FeatureID   OptUUID                     `json:"feature_id"`
	FeatureName OptString                   `json:"feature_name"`
	NextState   OptFeatureUpcomingNextState `json:"next_state"`
	At          OptDateTime                 `json:"at"`
}

// GetFeatureID returns the value of FeatureID.
func (s *FeatureUpcoming) GetFeatureID() OptUUID {
	return s.FeatureID
}

// GetFeatureName returns the value of FeatureName.
func (s *FeatureUpcoming) GetFeatureName() OptString {
	return s.FeatureName
}

// GetNextState returns the value of NextState.
func (s *FeatureUpcoming) GetNextState() OptFeatureUpcomingNextState {
	return s.NextState
}

// GetAt returns the value of At.
func (s *FeatureUpcoming) GetAt() OptDateTime {
	return s.At
}

// SetFeatureID sets the value of FeatureID.
func (s *FeatureUpcoming) SetFeatureID(val OptUUID) {
	s.FeatureID = val
}

// SetFeatureName sets the value of FeatureName.
func (s *FeatureUpcoming) SetFeatureName(val OptString) {
	s.FeatureName = val
}

// SetNextState sets the value of NextState.
func (s *FeatureUpcoming) SetNextState(val OptFeatureUpcomingNextState) {
	s.NextState = val
}

// SetAt sets the value of At.
func (s *FeatureUpcoming) SetAt(val OptDateTime) {
	s.At = val
}

type FeatureUpcomingNextState string

const (
	FeatureUpcomingNextStateEnabled  FeatureUpcomingNextState = "enabled"
	FeatureUpcomingNextStateDisabled FeatureUpcomingNextState = "disabled"
)

// AllValues returns all FeatureUpcomingNextState values.
func (FeatureUpcomingNextState) AllValues() []FeatureUpcomingNextState {
	return []FeatureUpcomingNextState{
		FeatureUpcomingNextStateEnabled,
		FeatureUpcomingNextStateDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FeatureUpcomingNextState) MarshalText() ([]byte, error) {
	switch s {
	case FeatureUpcomingNextStateEnabled:
		return []byte(s), nil
	case FeatureUpcomingNextStateDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FeatureUpcomingNextState) UnmarshalText(data []byte) error {
	switch FeatureUpcomingNextState(data) {
	case FeatureUpcomingNextStateEnabled:
		*s = FeatureUpcomingNextStateEnabled
		return nil
	case FeatureUpcomingNextStateDisabled:
		*s = FeatureUpcomingNextStateDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FlagVariant
type FlagVariant struct {
	ID             string `json:"id"`
	FeatureID      string `json:"feature_id"`
	Name           string `json:"name"`
	RolloutPercent int    `json:"rollout_percent"`
}

// GetID returns the value of ID.
func (s *FlagVariant) GetID() string {
	return s.ID
}

// GetFeatureID returns the value of FeatureID.
func (s *FlagVariant) GetFeatureID() string {
	return s.FeatureID
}

// GetName returns the value of Name.
func (s *FlagVariant) GetName() string {
	return s.Name
}

// GetRolloutPercent returns the value of RolloutPercent.
func (s *FlagVariant) GetRolloutPercent() int {
	return s.RolloutPercent
}

// SetID sets the value of ID.
func (s *FlagVariant) SetID(val string) {
	s.ID = val
}

// SetFeatureID sets the value of FeatureID.
func (s *FlagVariant) SetFeatureID(val string) {
	s.FeatureID = val
}

// SetName sets the value of Name.
func (s *FlagVariant) SetName(val string) {
	s.Name = val
}

// SetRolloutPercent sets the value of RolloutPercent.
func (s *FlagVariant) SetRolloutPercent(val int) {
	s.RolloutPercent = val
}

// Ref: #/components/schemas/FlagVariantResponse
type FlagVariantResponse struct {
	FlagVariant FlagVariant `json:"flag_variant"`
}

// GetFlagVariant returns the value of FlagVariant.
func (s *FlagVariantResponse) GetFlagVariant() FlagVariant {
	return s.FlagVariant
}

// SetFlagVariant sets the value of FlagVariant.
func (s *FlagVariantResponse) SetFlagVariant(val FlagVariant) {
	s.FlagVariant = val
}

func (*FlagVariantResponse) createFeatureFlagVariantRes() {}

// ForgotPasswordNoContent is response for ForgotPassword operation.
type ForgotPasswordNoContent struct{}

func (*ForgotPasswordNoContent) forgotPasswordRes() {}

// Ref: #/components/schemas/ForgotPasswordRequest
type ForgotPasswordRequest struct {
	Email string `json:"email"`
}

// GetEmail returns the value of Email.
func (s *ForgotPasswordRequest) GetEmail() string {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *ForgotPasswordRequest) SetEmail(val string) {
	s.Email = val
}

type GetLDAPSyncLogsLevel string

const (
	GetLDAPSyncLogsLevelInfo    GetLDAPSyncLogsLevel = "info"
	GetLDAPSyncLogsLevelWarning GetLDAPSyncLogsLevel = "warning"
	GetLDAPSyncLogsLevelError   GetLDAPSyncLogsLevel = "error"
)

// AllValues returns all GetLDAPSyncLogsLevel values.
func (GetLDAPSyncLogsLevel) AllValues() []GetLDAPSyncLogsLevel {
	return []GetLDAPSyncLogsLevel{
		GetLDAPSyncLogsLevelInfo,
		GetLDAPSyncLogsLevelWarning,
		GetLDAPSyncLogsLevelError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetLDAPSyncLogsLevel) MarshalText() ([]byte, error) {
	switch s {
	case GetLDAPSyncLogsLevelInfo:
		return []byte(s), nil
	case GetLDAPSyncLogsLevelWarning:
		return []byte(s), nil
	case GetLDAPSyncLogsLevelError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetLDAPSyncLogsLevel) UnmarshalText(data []byte) error {
	switch GetLDAPSyncLogsLevel(data) {
	case GetLDAPSyncLogsLevelInfo:
		*s = GetLDAPSyncLogsLevelInfo
		return nil
	case GetLDAPSyncLogsLevelWarning:
		*s = GetLDAPSyncLogsLevelWarning
		return nil
	case GetLDAPSyncLogsLevelError:
		*s = GetLDAPSyncLogsLevelError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetRolePermissionsOKApplicationJSON []Permission

func (*GetRolePermissionsOKApplicationJSON) getRolePermissionsRes() {}

type GetSAMLMetadataOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetSAMLMetadataOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetSAMLMetadataOK) getSAMLMetadataRes() {}

// Ref: #/components/schemas/InitiateTOTPApprovalRequest
type InitiateTOTPApprovalRequest struct {
	ApproverUserID uint `json:"approver_user_id"`
}

// GetApproverUserID returns the value of ApproverUserID.
func (s *InitiateTOTPApprovalRequest) GetApproverUserID() uint {
	return s.ApproverUserID
}

// SetApproverUserID sets the value of ApproverUserID.
func (s *InitiateTOTPApprovalRequest) SetApproverUserID(val uint) {
	s.ApproverUserID = val
}

// Ref: #/components/schemas/InitiateTOTPApprovalResponse
type InitiateTOTPApprovalResponse struct {
	// Session ID to use for TOTP approval.
	SessionID string `json:"session_id"`
	Message   string `json:"message"`
}

// GetSessionID returns the value of SessionID.
func (s *InitiateTOTPApprovalResponse) GetSessionID() string {
	return s.SessionID
}

// GetMessage returns the value of Message.
func (s *InitiateTOTPApprovalResponse) GetMessage() string {
	return s.Message
}

// SetSessionID sets the value of SessionID.
func (s *InitiateTOTPApprovalResponse) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessage sets the value of Message.
func (s *InitiateTOTPApprovalResponse) SetMessage(val string) {
	s.Message = val
}

func (*InitiateTOTPApprovalResponse) initiateTOTPApprovalRes() {}

// Ref: #/components/schemas/LDAPConfig
type LDAPConfig struct {
	// Whether LDAP integration is enabled.
	Enabled bool `json:"enabled"`
	// LDAP server URL.
	URL string `json:"url"`
	// DN for binding to LDAP server.
	BindDn string `json:"bind_dn"`
	// Password for binding to LDAP server.
	BindPassword string `json:"bind_password"`
	// Base DN for user search.
	UserBaseDn string `json:"user_base_dn"`
	// Filter for user search.
	UserFilter string `json:"user_filter"`
	// Attribute for username.
	UserNameAttr string `json:"user_name_attr"`
	// Attribute for user email.
	UserEmailAttr string `json:"user_email_attr"`
	// Whether to use StartTLS.
	StartTLS bool `json:"start_tls"`
	// Whether to skip TLS certificate verification.
	InsecureTLS bool `json:"insecure_tls"`
	// Connection timeout.
	Timeout string `json:"timeout"`
	// Background synchronization interval.
	SyncInterval uint `json:"sync_interval"`
}

// GetEnabled returns the value of Enabled.
func (s *LDAPConfig) GetEnabled() bool {
	return s.Enabled
}

// GetURL returns the value of URL.
func (s *LDAPConfig) GetURL() string {
	return s.URL
}

// GetBindDn returns the value of BindDn.
func (s *LDAPConfig) GetBindDn() string {
	return s.BindDn
}

// GetBindPassword returns the value of BindPassword.
func (s *LDAPConfig) GetBindPassword() string {
	return s.BindPassword
}

// GetUserBaseDn returns the value of UserBaseDn.
func (s *LDAPConfig) GetUserBaseDn() string {
	return s.UserBaseDn
}

// GetUserFilter returns the value of UserFilter.
func (s *LDAPConfig) GetUserFilter() string {
	return s.UserFilter
}

// GetUserNameAttr returns the value of UserNameAttr.
func (s *LDAPConfig) GetUserNameAttr() string {
	return s.UserNameAttr
}

// GetUserEmailAttr returns the value of UserEmailAttr.
func (s *LDAPConfig) GetUserEmailAttr() string {
	return s.UserEmailAttr
}

// GetStartTLS returns the value of StartTLS.
func (s *LDAPConfig) GetStartTLS() bool {
	return s.StartTLS
}

// GetInsecureTLS returns the value of InsecureTLS.
func (s *LDAPConfig) GetInsecureTLS() bool {
	return s.InsecureTLS
}

// GetTimeout returns the value of Timeout.
func (s *LDAPConfig) GetTimeout() string {
	return s.Timeout
}

// GetSyncInterval returns the value of SyncInterval.
func (s *LDAPConfig) GetSyncInterval() uint {
	return s.SyncInterval
}

// SetEnabled sets the value of Enabled.
func (s *LDAPConfig) SetEnabled(val bool) {
	s.Enabled = val
}

// SetURL sets the value of URL.
func (s *LDAPConfig) SetURL(val string) {
	s.URL = val
}

// SetBindDn sets the value of BindDn.
func (s *LDAPConfig) SetBindDn(val string) {
	s.BindDn = val
}

// SetBindPassword sets the value of BindPassword.
func (s *LDAPConfig) SetBindPassword(val string) {
	s.BindPassword = val
}

// SetUserBaseDn sets the value of UserBaseDn.
func (s *LDAPConfig) SetUserBaseDn(val string) {
	s.UserBaseDn = val
}

// SetUserFilter sets the value of UserFilter.
func (s *LDAPConfig) SetUserFilter(val string) {
	s.UserFilter = val
}

// SetUserNameAttr sets the value of UserNameAttr.
func (s *LDAPConfig) SetUserNameAttr(val string) {
	s.UserNameAttr = val
}

// SetUserEmailAttr sets the value of UserEmailAttr.
func (s *LDAPConfig) SetUserEmailAttr(val string) {
	s.UserEmailAttr = val
}

// SetStartTLS sets the value of StartTLS.
func (s *LDAPConfig) SetStartTLS(val bool) {
	s.StartTLS = val
}

// SetInsecureTLS sets the value of InsecureTLS.
func (s *LDAPConfig) SetInsecureTLS(val bool) {
	s.InsecureTLS = val
}

// SetTimeout sets the value of Timeout.
func (s *LDAPConfig) SetTimeout(val string) {
	s.Timeout = val
}

// SetSyncInterval sets the value of SyncInterval.
func (s *LDAPConfig) SetSyncInterval(val uint) {
	s.SyncInterval = val
}

func (*LDAPConfig) getLDAPConfigRes() {}

// Ref: #/components/schemas/LDAPConfigResponse
type LDAPConfigResponse struct {
	Message OptString     `json:"message"`
	Config  OptLDAPConfig `json:"config"`
}

// GetMessage returns the value of Message.
func (s *LDAPConfigResponse) GetMessage() OptString {
	return s.Message
}

// GetConfig returns the value of Config.
func (s *LDAPConfigResponse) GetConfig() OptLDAPConfig {
	return s.Config
}

// SetMessage sets the value of Message.
func (s *LDAPConfigResponse) SetMessage(val OptString) {
	s.Message = val
}

// SetConfig sets the value of Config.
func (s *LDAPConfigResponse) SetConfig(val OptLDAPConfig) {
	s.Config = val
}

func (*LDAPConfigResponse) updateLDAPConfigRes() {}

// Ref: #/components/schemas/LDAPConnectionTest
type LDAPConnectionTest struct {
	// LDAP server URL.
	URL string `json:"url"`
	// DN for binding to LDAP server.
	BindDn string `json:"bind_dn"`
	// Password for binding to LDAP server.
	BindPassword string `json:"bind_password"`
	// Base DN for user search.
	UserBaseDn OptString `json:"user_base_dn"`
	// Filter for user search.
	UserFilter OptString `json:"user_filter"`
	// Attribute for username.
	UserNameAttr OptString `json:"user_name_attr"`
	// Whether to use StartTLS.
	StartTLS OptBool `json:"start_tls"`
	// Whether to skip TLS certificate verification.
	InsecureTLS OptBool `json:"insecure_tls"`
	// Connection timeout.
	Timeout OptString `json:"timeout"`
}

// GetURL returns the value of URL.
func (s *LDAPConnectionTest) GetURL() string {
	return s.URL
}

// GetBindDn returns the value of BindDn.
func (s *LDAPConnectionTest) GetBindDn() string {
	return s.BindDn
}

// GetBindPassword returns the value of BindPassword.
func (s *LDAPConnectionTest) GetBindPassword() string {
	return s.BindPassword
}

// GetUserBaseDn returns the value of UserBaseDn.
func (s *LDAPConnectionTest) GetUserBaseDn() OptString {
	return s.UserBaseDn
}

// GetUserFilter returns the value of UserFilter.
func (s *LDAPConnectionTest) GetUserFilter() OptString {
	return s.UserFilter
}

// GetUserNameAttr returns the value of UserNameAttr.
func (s *LDAPConnectionTest) GetUserNameAttr() OptString {
	return s.UserNameAttr
}

// GetStartTLS returns the value of StartTLS.
func (s *LDAPConnectionTest) GetStartTLS() OptBool {
	return s.StartTLS
}

// GetInsecureTLS returns the value of InsecureTLS.
func (s *LDAPConnectionTest) GetInsecureTLS() OptBool {
	return s.InsecureTLS
}

// GetTimeout returns the value of Timeout.
func (s *LDAPConnectionTest) GetTimeout() OptString {
	return s.Timeout
}

// SetURL sets the value of URL.
func (s *LDAPConnectionTest) SetURL(val string) {
	s.URL = val
}

// SetBindDn sets the value of BindDn.
func (s *LDAPConnectionTest) SetBindDn(val string) {
	s.BindDn = val
}

// SetBindPassword sets the value of BindPassword.
func (s *LDAPConnectionTest) SetBindPassword(val string) {
	s.BindPassword = val
}

// SetUserBaseDn sets the value of UserBaseDn.
func (s *LDAPConnectionTest) SetUserBaseDn(val OptString) {
	s.UserBaseDn = val
}

// SetUserFilter sets the value of UserFilter.
func (s *LDAPConnectionTest) SetUserFilter(val OptString) {
	s.UserFilter = val
}

// SetUserNameAttr sets the value of UserNameAttr.
func (s *LDAPConnectionTest) SetUserNameAttr(val OptString) {
	s.UserNameAttr = val
}

// SetStartTLS sets the value of StartTLS.
func (s *LDAPConnectionTest) SetStartTLS(val OptBool) {
	s.StartTLS = val
}

// SetInsecureTLS sets the value of InsecureTLS.
func (s *LDAPConnectionTest) SetInsecureTLS(val OptBool) {
	s.InsecureTLS = val
}

// SetTimeout sets the value of Timeout.
func (s *LDAPConnectionTest) SetTimeout(val OptString) {
	s.Timeout = val
}

// Ref: #/components/schemas/LDAPConnectionTestResponse
type LDAPConnectionTestResponse struct {
	Success OptBool                              `json:"success"`
	Message OptString                            `json:"message"`
	Details OptLDAPConnectionTestResponseDetails `json:"details"`
}

// GetSuccess returns the value of Success.
func (s *LDAPConnectionTestResponse) GetSuccess() OptBool {
	return s.Success
}

// GetMessage returns the value of Message.
func (s *LDAPConnectionTestResponse) GetMessage() OptString {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *LDAPConnectionTestResponse) GetDetails() OptLDAPConnectionTestResponseDetails {
	return s.Details
}

// SetSuccess sets the value of Success.
func (s *LDAPConnectionTestResponse) SetSuccess(val OptBool) {
	s.Success = val
}

// SetMessage sets the value of Message.
func (s *LDAPConnectionTestResponse) SetMessage(val OptString) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *LDAPConnectionTestResponse) SetDetails(val OptLDAPConnectionTestResponseDetails) {
	s.Details = val
}

func (*LDAPConnectionTestResponse) testLDAPConnectionRes() {}

type LDAPConnectionTestResponseDetails struct {
	ServerInfo OptString `json:"server_info"`
	UserCount  OptInt    `json:"user_count"`
	TestUser   OptString `json:"test_user"`
}

// GetServerInfo returns the value of ServerInfo.
func (s *LDAPConnectionTestResponseDetails) GetServerInfo() OptString {
	return s.ServerInfo
}

// GetUserCount returns the value of UserCount.
func (s *LDAPConnectionTestResponseDetails) GetUserCount() OptInt {
	return s.UserCount
}

// GetTestUser returns the value of TestUser.
func (s *LDAPConnectionTestResponseDetails) GetTestUser() OptString {
	return s.TestUser
}

// SetServerInfo sets the value of ServerInfo.
func (s *LDAPConnectionTestResponseDetails) SetServerInfo(val OptString) {
	s.ServerInfo = val
}

// SetUserCount sets the value of UserCount.
func (s *LDAPConnectionTestResponseDetails) SetUserCount(val OptInt) {
	s.UserCount = val
}

// SetTestUser sets the value of TestUser.
func (s *LDAPConnectionTestResponseDetails) SetTestUser(val OptString) {
	s.TestUser = val
}

// Ref: #/components/schemas/LDAPStatistics
type LDAPStatistics struct {
	LdapUsers       OptInt                          `json:"ldap_users"`
	LocalUsers      OptInt                          `json:"local_users"`
	ActiveUsers     OptInt                          `json:"active_users"`
	InactiveUsers   OptInt                          `json:"inactive_users"`
	SyncHistory     []LDAPStatisticsSyncHistoryItem `json:"sync_history"`
	SyncSuccessRate OptFloat32                      `json:"sync_success_rate"`
}

// GetLdapUsers returns the value of LdapUsers.
func (s *LDAPStatistics) GetLdapUsers() OptInt {
	return s.LdapUsers
}

// GetLocalUsers returns the value of LocalUsers.
func (s *LDAPStatistics) GetLocalUsers() OptInt {
	return s.LocalUsers
}

// GetActiveUsers returns the value of ActiveUsers.
func (s *LDAPStatistics) GetActiveUsers() OptInt {
	return s.ActiveUsers
}

// GetInactiveUsers returns the value of InactiveUsers.
func (s *LDAPStatistics) GetInactiveUsers() OptInt {
	return s.InactiveUsers
}

// GetSyncHistory returns the value of SyncHistory.
func (s *LDAPStatistics) GetSyncHistory() []LDAPStatisticsSyncHistoryItem {
	return s.SyncHistory
}

// GetSyncSuccessRate returns the value of SyncSuccessRate.
func (s *LDAPStatistics) GetSyncSuccessRate() OptFloat32 {
	return s.SyncSuccessRate
}

// SetLdapUsers sets the value of LdapUsers.
func (s *LDAPStatistics) SetLdapUsers(val OptInt) {
	s.LdapUsers = val
}

// SetLocalUsers sets the value of LocalUsers.
func (s *LDAPStatistics) SetLocalUsers(val OptInt) {
	s.LocalUsers = val
}

// SetActiveUsers sets the value of ActiveUsers.
func (s *LDAPStatistics) SetActiveUsers(val OptInt) {
	s.ActiveUsers = val
}

// SetInactiveUsers sets the value of InactiveUsers.
func (s *LDAPStatistics) SetInactiveUsers(val OptInt) {
	s.InactiveUsers = val
}

// SetSyncHistory sets the value of SyncHistory.
func (s *LDAPStatistics) SetSyncHistory(val []LDAPStatisticsSyncHistoryItem) {
	s.SyncHistory = val
}

// SetSyncSuccessRate sets the value of SyncSuccessRate.
func (s *LDAPStatistics) SetSyncSuccessRate(val OptFloat32) {
	s.SyncSuccessRate = val
}

func (*LDAPStatistics) getLDAPStatisticsRes() {}

type LDAPStatisticsSyncHistoryItem struct {
	Date            OptDate    `json:"date"`
	UsersSynced     OptInt     `json:"users_synced"`
	Errors          OptInt     `json:"errors"`
	DurationMinutes OptFloat32 `json:"duration_minutes"`
}

// GetDate returns the value of Date.
func (s *LDAPStatisticsSyncHistoryItem) GetDate() OptDate {
	return s.Date
}

// GetUsersSynced returns the value of UsersSynced.
func (s *LDAPStatisticsSyncHistoryItem) GetUsersSynced() OptInt {
	return s.UsersSynced
}

// GetErrors returns the value of Errors.
func (s *LDAPStatisticsSyncHistoryItem) GetErrors() OptInt {
	return s.Errors
}

// GetDurationMinutes returns the value of DurationMinutes.
func (s *LDAPStatisticsSyncHistoryItem) GetDurationMinutes() OptFloat32 {
	return s.DurationMinutes
}

// SetDate sets the value of Date.
func (s *LDAPStatisticsSyncHistoryItem) SetDate(val OptDate) {
	s.Date = val
}

// SetUsersSynced sets the value of UsersSynced.
func (s *LDAPStatisticsSyncHistoryItem) SetUsersSynced(val OptInt) {
	s.UsersSynced = val
}

// SetErrors sets the value of Errors.
func (s *LDAPStatisticsSyncHistoryItem) SetErrors(val OptInt) {
	s.Errors = val
}

// SetDurationMinutes sets the value of DurationMinutes.
func (s *LDAPStatisticsSyncHistoryItem) SetDurationMinutes(val OptFloat32) {
	s.DurationMinutes = val
}

// Ref: #/components/schemas/LDAPSyncLogDetails
type LDAPSyncLogDetails struct {
	ID               uint                    `json:"id"`
	Timestamp        time.Time               `json:"timestamp"`
	Level            LDAPSyncLogDetailsLevel `json:"level"`
	Message          string                  `json:"message"`
	Username         OptNilString            `json:"username"`
	Details          OptNilString            `json:"details"`
	SyncSessionID    string                  `json:"sync_session_id"`
	StackTrace       OptNilString            `json:"stack_trace"`
	LdapErrorCode    OptNilInt               `json:"ldap_error_code"`
	LdapErrorMessage OptNilString            `json:"ldap_error_message"`
}

// GetID returns the value of ID.
func (s *LDAPSyncLogDetails) GetID() uint {
	return s.ID
}

// GetTimestamp returns the value of Timestamp.
func (s *LDAPSyncLogDetails) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetLevel returns the value of Level.
func (s *LDAPSyncLogDetails) GetLevel() LDAPSyncLogDetailsLevel {
	return s.Level
}

// GetMessage returns the value of Message.
func (s *LDAPSyncLogDetails) GetMessage() string {
	return s.Message
}

// GetUsername returns the value of Username.
func (s *LDAPSyncLogDetails) GetUsername() OptNilString {
	return s.Username
}

// GetDetails returns the value of Details.
func (s *LDAPSyncLogDetails) GetDetails() OptNilString {
	return s.Details
}

// GetSyncSessionID returns the value of SyncSessionID.
func (s *LDAPSyncLogDetails) GetSyncSessionID() string {
	return s.SyncSessionID
}

// GetStackTrace returns the value of StackTrace.
func (s *LDAPSyncLogDetails) GetStackTrace() OptNilString {
	return s.StackTrace
}

// GetLdapErrorCode returns the value of LdapErrorCode.
func (s *LDAPSyncLogDetails) GetLdapErrorCode() OptNilInt {
	return s.LdapErrorCode
}

// GetLdapErrorMessage returns the value of LdapErrorMessage.
func (s *LDAPSyncLogDetails) GetLdapErrorMessage() OptNilString {
	return s.LdapErrorMessage
}

// SetID sets the value of ID.
func (s *LDAPSyncLogDetails) SetID(val uint) {
	s.ID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *LDAPSyncLogDetails) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetLevel sets the value of Level.
func (s *LDAPSyncLogDetails) SetLevel(val LDAPSyncLogDetailsLevel) {
	s.Level = val
}

// SetMessage sets the value of Message.
func (s *LDAPSyncLogDetails) SetMessage(val string) {
	s.Message = val
}

// SetUsername sets the value of Username.
func (s *LDAPSyncLogDetails) SetUsername(val OptNilString) {
	s.Username = val
}

// SetDetails sets the value of Details.
func (s *LDAPSyncLogDetails) SetDetails(val OptNilString) {
	s.Details = val
}

// SetSyncSessionID sets the value of SyncSessionID.
func (s *LDAPSyncLogDetails) SetSyncSessionID(val string) {
	s.SyncSessionID = val
}

// SetStackTrace sets the value of StackTrace.
func (s *LDAPSyncLogDetails) SetStackTrace(val OptNilString) {
	s.StackTrace = val
}

// SetLdapErrorCode sets the value of LdapErrorCode.
func (s *LDAPSyncLogDetails) SetLdapErrorCode(val OptNilInt) {
	s.LdapErrorCode = val
}

// SetLdapErrorMessage sets the value of LdapErrorMessage.
func (s *LDAPSyncLogDetails) SetLdapErrorMessage(val OptNilString) {
	s.LdapErrorMessage = val
}

func (*LDAPSyncLogDetails) getLDAPSyncLogDetailsRes() {}

type LDAPSyncLogDetailsLevel string

const (
	LDAPSyncLogDetailsLevelInfo    LDAPSyncLogDetailsLevel = "info"
	LDAPSyncLogDetailsLevelWarning LDAPSyncLogDetailsLevel = "warning"
	LDAPSyncLogDetailsLevelError   LDAPSyncLogDetailsLevel = "error"
)

// AllValues returns all LDAPSyncLogDetailsLevel values.
func (LDAPSyncLogDetailsLevel) AllValues() []LDAPSyncLogDetailsLevel {
	return []LDAPSyncLogDetailsLevel{
		LDAPSyncLogDetailsLevelInfo,
		LDAPSyncLogDetailsLevelWarning,
		LDAPSyncLogDetailsLevelError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LDAPSyncLogDetailsLevel) MarshalText() ([]byte, error) {
	switch s {
	case LDAPSyncLogDetailsLevelInfo:
		return []byte(s), nil
	case LDAPSyncLogDetailsLevelWarning:
		return []byte(s), nil
	case LDAPSyncLogDetailsLevelError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LDAPSyncLogDetailsLevel) UnmarshalText(data []byte) error {
	switch LDAPSyncLogDetailsLevel(data) {
	case LDAPSyncLogDetailsLevelInfo:
		*s = LDAPSyncLogDetailsLevelInfo
		return nil
	case LDAPSyncLogDetailsLevelWarning:
		*s = LDAPSyncLogDetailsLevelWarning
		return nil
	case LDAPSyncLogDetailsLevelError:
		*s = LDAPSyncLogDetailsLevelError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/LDAPSyncLogEntry
type LDAPSyncLogEntry struct {
	ID            uint                  `json:"id"`
	Timestamp     time.Time             `json:"timestamp"`
	Level         LDAPSyncLogEntryLevel `json:"level"`
	Message       string                `json:"message"`
	Username      OptNilString          `json:"username"`
	Details       OptNilString          `json:"details"`
	SyncSessionID string                `json:"sync_session_id"`
}

// GetID returns the value of ID.
func (s *LDAPSyncLogEntry) GetID() uint {
	return s.ID
}

// GetTimestamp returns the value of Timestamp.
func (s *LDAPSyncLogEntry) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetLevel returns the value of Level.
func (s *LDAPSyncLogEntry) GetLevel() LDAPSyncLogEntryLevel {
	return s.Level
}

// GetMessage returns the value of Message.
func (s *LDAPSyncLogEntry) GetMessage() string {
	return s.Message
}

// GetUsername returns the value of Username.
func (s *LDAPSyncLogEntry) GetUsername() OptNilString {
	return s.Username
}

// GetDetails returns the value of Details.
func (s *LDAPSyncLogEntry) GetDetails() OptNilString {
	return s.Details
}

// GetSyncSessionID returns the value of SyncSessionID.
func (s *LDAPSyncLogEntry) GetSyncSessionID() string {
	return s.SyncSessionID
}

// SetID sets the value of ID.
func (s *LDAPSyncLogEntry) SetID(val uint) {
	s.ID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *LDAPSyncLogEntry) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetLevel sets the value of Level.
func (s *LDAPSyncLogEntry) SetLevel(val LDAPSyncLogEntryLevel) {
	s.Level = val
}

// SetMessage sets the value of Message.
func (s *LDAPSyncLogEntry) SetMessage(val string) {
	s.Message = val
}

// SetUsername sets the value of Username.
func (s *LDAPSyncLogEntry) SetUsername(val OptNilString) {
	s.Username = val
}

// SetDetails sets the value of Details.
func (s *LDAPSyncLogEntry) SetDetails(val OptNilString) {
	s.Details = val
}

// SetSyncSessionID sets the value of SyncSessionID.
func (s *LDAPSyncLogEntry) SetSyncSessionID(val string) {
	s.SyncSessionID = val
}

type LDAPSyncLogEntryLevel string

const (
	LDAPSyncLogEntryLevelInfo    LDAPSyncLogEntryLevel = "info"
	LDAPSyncLogEntryLevelWarning LDAPSyncLogEntryLevel = "warning"
	LDAPSyncLogEntryLevelError   LDAPSyncLogEntryLevel = "error"
)

// AllValues returns all LDAPSyncLogEntryLevel values.
func (LDAPSyncLogEntryLevel) AllValues() []LDAPSyncLogEntryLevel {
	return []LDAPSyncLogEntryLevel{
		LDAPSyncLogEntryLevelInfo,
		LDAPSyncLogEntryLevelWarning,
		LDAPSyncLogEntryLevelError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LDAPSyncLogEntryLevel) MarshalText() ([]byte, error) {
	switch s {
	case LDAPSyncLogEntryLevelInfo:
		return []byte(s), nil
	case LDAPSyncLogEntryLevelWarning:
		return []byte(s), nil
	case LDAPSyncLogEntryLevelError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LDAPSyncLogEntryLevel) UnmarshalText(data []byte) error {
	switch LDAPSyncLogEntryLevel(data) {
	case LDAPSyncLogEntryLevelInfo:
		*s = LDAPSyncLogEntryLevelInfo
		return nil
	case LDAPSyncLogEntryLevelWarning:
		*s = LDAPSyncLogEntryLevelWarning
		return nil
	case LDAPSyncLogEntryLevelError:
		*s = LDAPSyncLogEntryLevelError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/LDAPSyncLogs
type LDAPSyncLogs struct {
	Logs    []LDAPSyncLogEntry `json:"logs"`
	Total   OptInt             `json:"total"`
	HasMore OptBool            `json:"has_more"`
}

// GetLogs returns the value of Logs.
func (s *LDAPSyncLogs) GetLogs() []LDAPSyncLogEntry {
	return s.Logs
}

// GetTotal returns the value of Total.
func (s *LDAPSyncLogs) GetTotal() OptInt {
	return s.Total
}

// GetHasMore returns the value of HasMore.
func (s *LDAPSyncLogs) GetHasMore() OptBool {
	return s.HasMore
}

// SetLogs sets the value of Logs.
func (s *LDAPSyncLogs) SetLogs(val []LDAPSyncLogEntry) {
	s.Logs = val
}

// SetTotal sets the value of Total.
func (s *LDAPSyncLogs) SetTotal(val OptInt) {
	s.Total = val
}

// SetHasMore sets the value of HasMore.
func (s *LDAPSyncLogs) SetHasMore(val OptBool) {
	s.HasMore = val
}

func (*LDAPSyncLogs) getLDAPSyncLogsRes() {}

// Ref: #/components/schemas/LDAPSyncProgress
type LDAPSyncProgress struct {
	IsRunning      bool      `json:"is_running"`
	Progress       float32   `json:"progress"`
	CurrentStep    string    `json:"current_step"`
	ProcessedItems int       `json:"processed_items"`
	TotalItems     int       `json:"total_items"`
	EstimatedTime  string    `json:"estimated_time"`
	StartTime      time.Time `json:"start_time"`
	SyncID         string    `json:"sync_id"`
}

// GetIsRunning returns the value of IsRunning.
func (s *LDAPSyncProgress) GetIsRunning() bool {
	return s.IsRunning
}

// GetProgress returns the value of Progress.
func (s *LDAPSyncProgress) GetProgress() float32 {
	return s.Progress
}

// GetCurrentStep returns the value of CurrentStep.
func (s *LDAPSyncProgress) GetCurrentStep() string {
	return s.CurrentStep
}

// GetProcessedItems returns the value of ProcessedItems.
func (s *LDAPSyncProgress) GetProcessedItems() int {
	return s.ProcessedItems
}

// GetTotalItems returns the value of TotalItems.
func (s *LDAPSyncProgress) GetTotalItems() int {
	return s.TotalItems
}

// GetEstimatedTime returns the value of EstimatedTime.
func (s *LDAPSyncProgress) GetEstimatedTime() string {
	return s.EstimatedTime
}

// GetStartTime returns the value of StartTime.
func (s *LDAPSyncProgress) GetStartTime() time.Time {
	return s.StartTime
}

// GetSyncID returns the value of SyncID.
func (s *LDAPSyncProgress) GetSyncID() string {
	return s.SyncID
}

// SetIsRunning sets the value of IsRunning.
func (s *LDAPSyncProgress) SetIsRunning(val bool) {
	s.IsRunning = val
}

// SetProgress sets the value of Progress.
func (s *LDAPSyncProgress) SetProgress(val float32) {
	s.Progress = val
}

// SetCurrentStep sets the value of CurrentStep.
func (s *LDAPSyncProgress) SetCurrentStep(val string) {
	s.CurrentStep = val
}

// SetProcessedItems sets the value of ProcessedItems.
func (s *LDAPSyncProgress) SetProcessedItems(val int) {
	s.ProcessedItems = val
}

// SetTotalItems sets the value of TotalItems.
func (s *LDAPSyncProgress) SetTotalItems(val int) {
	s.TotalItems = val
}

// SetEstimatedTime sets the value of EstimatedTime.
func (s *LDAPSyncProgress) SetEstimatedTime(val string) {
	s.EstimatedTime = val
}

// SetStartTime sets the value of StartTime.
func (s *LDAPSyncProgress) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetSyncID sets the value of SyncID.
func (s *LDAPSyncProgress) SetSyncID(val string) {
	s.SyncID = val
}

func (*LDAPSyncProgress) getLDAPSyncProgressRes() {}

// Ref: #/components/schemas/LDAPSyncStartResponse
type LDAPSyncStartResponse struct {
	Message           OptString `json:"message"`
	SyncID            OptUUID   `json:"sync_id"`
	EstimatedDuration OptString `json:"estimated_duration"`
}

// GetMessage returns the value of Message.
func (s *LDAPSyncStartResponse) GetMessage() OptString {
	return s.Message
}

// GetSyncID returns the value of SyncID.
func (s *LDAPSyncStartResponse) GetSyncID() OptUUID {
	return s.SyncID
}

// GetEstimatedDuration returns the value of EstimatedDuration.
func (s *LDAPSyncStartResponse) GetEstimatedDuration() OptString {
	return s.EstimatedDuration
}

// SetMessage sets the value of Message.
func (s *LDAPSyncStartResponse) SetMessage(val OptString) {
	s.Message = val
}

// SetSyncID sets the value of SyncID.
func (s *LDAPSyncStartResponse) SetSyncID(val OptUUID) {
	s.SyncID = val
}

// SetEstimatedDuration sets the value of EstimatedDuration.
func (s *LDAPSyncStartResponse) SetEstimatedDuration(val OptString) {
	s.EstimatedDuration = val
}

func (*LDAPSyncStartResponse) syncLDAPUsersRes() {}

// Ref: #/components/schemas/LDAPSyncStatus
type LDAPSyncStatus struct {
	Status           string      `json:"status"`
	IsRunning        bool        `json:"is_running"`
	LastSyncTime     OptDateTime `json:"last_sync_time"`
	TotalUsers       int         `json:"total_users"`
	SyncedUsers      int         `json:"synced_users"`
	Errors           int         `json:"errors"`
	Warnings         int         `json:"warnings"`
	LastSyncDuration OptString   `json:"last_sync_duration"`
}

// GetStatus returns the value of Status.
func (s *LDAPSyncStatus) GetStatus() string {
	return s.Status
}

// GetIsRunning returns the value of IsRunning.
func (s *LDAPSyncStatus) GetIsRunning() bool {
	return s.IsRunning
}

// GetLastSyncTime returns the value of LastSyncTime.
func (s *LDAPSyncStatus) GetLastSyncTime() OptDateTime {
	return s.LastSyncTime
}

// GetTotalUsers returns the value of TotalUsers.
func (s *LDAPSyncStatus) GetTotalUsers() int {
	return s.TotalUsers
}

// GetSyncedUsers returns the value of SyncedUsers.
func (s *LDAPSyncStatus) GetSyncedUsers() int {
	return s.SyncedUsers
}

// GetErrors returns the value of Errors.
func (s *LDAPSyncStatus) GetErrors() int {
	return s.Errors
}

// GetWarnings returns the value of Warnings.
func (s *LDAPSyncStatus) GetWarnings() int {
	return s.Warnings
}

// GetLastSyncDuration returns the value of LastSyncDuration.
func (s *LDAPSyncStatus) GetLastSyncDuration() OptString {
	return s.LastSyncDuration
}

// SetStatus sets the value of Status.
func (s *LDAPSyncStatus) SetStatus(val string) {
	s.Status = val
}

// SetIsRunning sets the value of IsRunning.
func (s *LDAPSyncStatus) SetIsRunning(val bool) {
	s.IsRunning = val
}

// SetLastSyncTime sets the value of LastSyncTime.
func (s *LDAPSyncStatus) SetLastSyncTime(val OptDateTime) {
	s.LastSyncTime = val
}

// SetTotalUsers sets the value of TotalUsers.
func (s *LDAPSyncStatus) SetTotalUsers(val int) {
	s.TotalUsers = val
}

// SetSyncedUsers sets the value of SyncedUsers.
func (s *LDAPSyncStatus) SetSyncedUsers(val int) {
	s.SyncedUsers = val
}

// SetErrors sets the value of Errors.
func (s *LDAPSyncStatus) SetErrors(val int) {
	s.Errors = val
}

// SetWarnings sets the value of Warnings.
func (s *LDAPSyncStatus) SetWarnings(val int) {
	s.Warnings = val
}

// SetLastSyncDuration sets the value of LastSyncDuration.
func (s *LDAPSyncStatus) SetLastSyncDuration(val OptString) {
	s.LastSyncDuration = val
}

func (*LDAPSyncStatus) getLDAPSyncStatusRes() {}

type ListCategoriesResponse []Category

func (*ListCategoriesResponse) listCategoriesRes() {}

// Ref: #/components/schemas/ListChangesResponse
type ListChangesResponse struct {
	// Project ID.
	ProjectID uuid.UUID `json:"project_id"`
	// List of change groups.
	Items      []ChangeGroup `json:"items"`
	Pagination Pagination    `json:"pagination"`
}

// GetProjectID returns the value of ProjectID.
func (s *ListChangesResponse) GetProjectID() uuid.UUID {
	return s.ProjectID
}

// GetItems returns the value of Items.
func (s *ListChangesResponse) GetItems() []ChangeGroup {
	return s.Items
}

// GetPagination returns the value of Pagination.
func (s *ListChangesResponse) GetPagination() Pagination {
	return s.Pagination
}

// SetProjectID sets the value of ProjectID.
func (s *ListChangesResponse) SetProjectID(val uuid.UUID) {
	s.ProjectID = val
}

// SetItems sets the value of Items.
func (s *ListChangesResponse) SetItems(val []ChangeGroup) {
	s.Items = val
}

// SetPagination sets the value of Pagination.
func (s *ListChangesResponse) SetPagination(val Pagination) {
	s.Pagination = val
}

func (*ListChangesResponse) listProjectChangesRes() {}

// Ref: #/components/schemas/ListEnvironmentsResponse
type ListEnvironmentsResponse struct {
	Items      []Environment `json:"items"`
	Pagination OptPagination `json:"pagination"`
}

// GetItems returns the value of Items.
func (s *ListEnvironmentsResponse) GetItems() []Environment {
	return s.Items
}

// GetPagination returns the value of Pagination.
func (s *ListEnvironmentsResponse) GetPagination() OptPagination {
	return s.Pagination
}

// SetItems sets the value of Items.
func (s *ListEnvironmentsResponse) SetItems(val []Environment) {
	s.Items = val
}

// SetPagination sets the value of Pagination.
func (s *ListEnvironmentsResponse) SetPagination(val OptPagination) {
	s.Pagination = val
}

func (*ListEnvironmentsResponse) listProjectEnvironmentsRes() {}

type ListFeatureIDsResponse []string

func (*ListFeatureIDsResponse) listSegmentDesyncFeatureIDsRes() {}

type ListFeatureSchedulesResponse []FeatureSchedule

func (*ListFeatureSchedulesResponse) listAllFeatureSchedulesRes() {}
func (*ListFeatureSchedulesResponse) listFeatureSchedulesRes()    {}

// Ref: #/components/schemas/ListFeaturesResponse
type ListFeaturesResponse struct {
	Items      []FeatureExtended `json:"items"`
	Pagination Pagination        `json:"pagination"`
}

// GetItems returns the value of Items.
func (s *ListFeaturesResponse) GetItems() []FeatureExtended {
	return s.Items
}

// GetPagination returns the value of Pagination.
func (s *ListFeaturesResponse) GetPagination() Pagination {
	return s.Pagination
}

// SetItems sets the value of Items.
func (s *ListFeaturesResponse) SetItems(val []FeatureExtended) {
	s.Items = val
}

// SetPagination sets the value of Pagination.
func (s *ListFeaturesResponse) SetPagination(val Pagination) {
	s.Pagination = val
}

func (*ListFeaturesResponse) listProjectFeaturesRes() {}

type ListFlagVariantsResponse []FlagVariant

func (*ListFlagVariantsResponse) listFeatureFlagVariantsRes() {}

// Ref: #/components/schemas/ListNotificationSettingsResponse
type ListNotificationSettingsResponse struct {
	NotificationSettings []NotificationSetting `json:"notification_settings"`
}

// GetNotificationSettings returns the value of NotificationSettings.
func (s *ListNotificationSettingsResponse) GetNotificationSettings() []NotificationSetting {
	return s.NotificationSettings
}

// SetNotificationSettings sets the value of NotificationSettings.
func (s *ListNotificationSettingsResponse) SetNotificationSettings(val []NotificationSetting) {
	s.NotificationSettings = val
}

func (*ListNotificationSettingsResponse) listNotificationSettingsRes() {}

type ListPendingChangesSortBy string

const (
	ListPendingChangesSortByCreatedAt   ListPendingChangesSortBy = "created_at"
	ListPendingChangesSortByStatus      ListPendingChangesSortBy = "status"
	ListPendingChangesSortByRequestedBy ListPendingChangesSortBy = "requested_by"
)

// AllValues returns all ListPendingChangesSortBy values.
func (ListPendingChangesSortBy) AllValues() []ListPendingChangesSortBy {
	return []ListPendingChangesSortBy{
		ListPendingChangesSortByCreatedAt,
		ListPendingChangesSortByStatus,
		ListPendingChangesSortByRequestedBy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPendingChangesSortBy) MarshalText() ([]byte, error) {
	switch s {
	case ListPendingChangesSortByCreatedAt:
		return []byte(s), nil
	case ListPendingChangesSortByStatus:
		return []byte(s), nil
	case ListPendingChangesSortByRequestedBy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPendingChangesSortBy) UnmarshalText(data []byte) error {
	switch ListPendingChangesSortBy(data) {
	case ListPendingChangesSortByCreatedAt:
		*s = ListPendingChangesSortByCreatedAt
		return nil
	case ListPendingChangesSortByStatus:
		*s = ListPendingChangesSortByStatus
		return nil
	case ListPendingChangesSortByRequestedBy:
		*s = ListPendingChangesSortByRequestedBy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPendingChangesStatus string

const (
	ListPendingChangesStatusPending   ListPendingChangesStatus = "pending"
	ListPendingChangesStatusApproved  ListPendingChangesStatus = "approved"
	ListPendingChangesStatusRejected  ListPendingChangesStatus = "rejected"
	ListPendingChangesStatusCancelled ListPendingChangesStatus = "cancelled"
)

// AllValues returns all ListPendingChangesStatus values.
func (ListPendingChangesStatus) AllValues() []ListPendingChangesStatus {
	return []ListPendingChangesStatus{
		ListPendingChangesStatusPending,
		ListPendingChangesStatusApproved,
		ListPendingChangesStatusRejected,
		ListPendingChangesStatusCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPendingChangesStatus) MarshalText() ([]byte, error) {
	switch s {
	case ListPendingChangesStatusPending:
		return []byte(s), nil
	case ListPendingChangesStatusApproved:
		return []byte(s), nil
	case ListPendingChangesStatusRejected:
		return []byte(s), nil
	case ListPendingChangesStatusCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPendingChangesStatus) UnmarshalText(data []byte) error {
	switch ListPendingChangesStatus(data) {
	case ListPendingChangesStatusPending:
		*s = ListPendingChangesStatusPending
		return nil
	case ListPendingChangesStatusApproved:
		*s = ListPendingChangesStatusApproved
		return nil
	case ListPendingChangesStatusRejected:
		*s = ListPendingChangesStatusRejected
		return nil
	case ListPendingChangesStatusCancelled:
		*s = ListPendingChangesStatusCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPermissionsOKApplicationJSON []Permission

func (*ListPermissionsOKApplicationJSON) listPermissionsRes() {}

type ListProjectAuditLogsOK struct {
	Items      []AuditLog `json:"items"`
	Pagination Pagination `json:"pagination"`
}

// GetItems returns the value of Items.
func (s *ListProjectAuditLogsOK) GetItems() []AuditLog {
	return s.Items
}

// GetPagination returns the value of Pagination.
func (s *ListProjectAuditLogsOK) GetPagination() Pagination {
	return s.Pagination
}

// SetItems sets the value of Items.
func (s *ListProjectAuditLogsOK) SetItems(val []AuditLog) {
	s.Items = val
}

// SetPagination sets the value of Pagination.
func (s *ListProjectAuditLogsOK) SetPagination(val Pagination) {
	s.Pagination = val
}

func (*ListProjectAuditLogsOK) listProjectAuditLogsRes() {}

type ListProjectAuditLogsSortBy string

const (
	ListProjectAuditLogsSortByEnvironmentKey ListProjectAuditLogsSortBy = "environment_key"
	ListProjectAuditLogsSortByEntity         ListProjectAuditLogsSortBy = "entity"
	ListProjectAuditLogsSortByEntityID       ListProjectAuditLogsSortBy = "entity_id"
	ListProjectAuditLogsSortByActor          ListProjectAuditLogsSortBy = "actor"
	ListProjectAuditLogsSortByAction         ListProjectAuditLogsSortBy = "action"
	ListProjectAuditLogsSortByUsername       ListProjectAuditLogsSortBy = "username"
	ListProjectAuditLogsSortByCreatedAt      ListProjectAuditLogsSortBy = "created_at"
)

// AllValues returns all ListProjectAuditLogsSortBy values.
func (ListProjectAuditLogsSortBy) AllValues() []ListProjectAuditLogsSortBy {
	return []ListProjectAuditLogsSortBy{
		ListProjectAuditLogsSortByEnvironmentKey,
		ListProjectAuditLogsSortByEntity,
		ListProjectAuditLogsSortByEntityID,
		ListProjectAuditLogsSortByActor,
		ListProjectAuditLogsSortByAction,
		ListProjectAuditLogsSortByUsername,
		ListProjectAuditLogsSortByCreatedAt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListProjectAuditLogsSortBy) MarshalText() ([]byte, error) {
	switch s {
	case ListProjectAuditLogsSortByEnvironmentKey:
		return []byte(s), nil
	case ListProjectAuditLogsSortByEntity:
		return []byte(s), nil
	case ListProjectAuditLogsSortByEntityID:
		return []byte(s), nil
	case ListProjectAuditLogsSortByActor:
		return []byte(s), nil
	case ListProjectAuditLogsSortByAction:
		return []byte(s), nil
	case ListProjectAuditLogsSortByUsername:
		return []byte(s), nil
	case ListProjectAuditLogsSortByCreatedAt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListProjectAuditLogsSortBy) UnmarshalText(data []byte) error {
	switch ListProjectAuditLogsSortBy(data) {
	case ListProjectAuditLogsSortByEnvironmentKey:
		*s = ListProjectAuditLogsSortByEnvironmentKey
		return nil
	case ListProjectAuditLogsSortByEntity:
		*s = ListProjectAuditLogsSortByEntity
		return nil
	case ListProjectAuditLogsSortByEntityID:
		*s = ListProjectAuditLogsSortByEntityID
		return nil
	case ListProjectAuditLogsSortByActor:
		*s = ListProjectAuditLogsSortByActor
		return nil
	case ListProjectAuditLogsSortByAction:
		*s = ListProjectAuditLogsSortByAction
		return nil
	case ListProjectAuditLogsSortByUsername:
		*s = ListProjectAuditLogsSortByUsername
		return nil
	case ListProjectAuditLogsSortByCreatedAt:
		*s = ListProjectAuditLogsSortByCreatedAt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListProjectChangesSortBy string

const (
	ListProjectChangesSortByCreatedAt ListProjectChangesSortBy = "created_at"
	ListProjectChangesSortByActor     ListProjectChangesSortBy = "actor"
	ListProjectChangesSortByEntity    ListProjectChangesSortBy = "entity"
)

// AllValues returns all ListProjectChangesSortBy values.
func (ListProjectChangesSortBy) AllValues() []ListProjectChangesSortBy {
	return []ListProjectChangesSortBy{
		ListProjectChangesSortByCreatedAt,
		ListProjectChangesSortByActor,
		ListProjectChangesSortByEntity,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListProjectChangesSortBy) MarshalText() ([]byte, error) {
	switch s {
	case ListProjectChangesSortByCreatedAt:
		return []byte(s), nil
	case ListProjectChangesSortByActor:
		return []byte(s), nil
	case ListProjectChangesSortByEntity:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListProjectChangesSortBy) UnmarshalText(data []byte) error {
	switch ListProjectChangesSortBy(data) {
	case ListProjectChangesSortByCreatedAt:
		*s = ListProjectChangesSortByCreatedAt
		return nil
	case ListProjectChangesSortByActor:
		*s = ListProjectChangesSortByActor
		return nil
	case ListProjectChangesSortByEntity:
		*s = ListProjectChangesSortByEntity
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListProjectFeaturesKind string

const (
	ListProjectFeaturesKindSimple       ListProjectFeaturesKind = "simple"
	ListProjectFeaturesKindMultivariant ListProjectFeaturesKind = "multivariant"
)

// AllValues returns all ListProjectFeaturesKind values.
func (ListProjectFeaturesKind) AllValues() []ListProjectFeaturesKind {
	return []ListProjectFeaturesKind{
		ListProjectFeaturesKindSimple,
		ListProjectFeaturesKindMultivariant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListProjectFeaturesKind) MarshalText() ([]byte, error) {
	switch s {
	case ListProjectFeaturesKindSimple:
		return []byte(s), nil
	case ListProjectFeaturesKindMultivariant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListProjectFeaturesKind) UnmarshalText(data []byte) error {
	switch ListProjectFeaturesKind(data) {
	case ListProjectFeaturesKindSimple:
		*s = ListProjectFeaturesKindSimple
		return nil
	case ListProjectFeaturesKindMultivariant:
		*s = ListProjectFeaturesKindMultivariant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListProjectFeaturesSortBy string

const (
	ListProjectFeaturesSortByName      ListProjectFeaturesSortBy = "name"
	ListProjectFeaturesSortByKey       ListProjectFeaturesSortBy = "key"
	ListProjectFeaturesSortByEnabled   ListProjectFeaturesSortBy = "enabled"
	ListProjectFeaturesSortByKind      ListProjectFeaturesSortBy = "kind"
	ListProjectFeaturesSortByCreatedAt ListProjectFeaturesSortBy = "created_at"
	ListProjectFeaturesSortByUpdatedAt ListProjectFeaturesSortBy = "updated_at"
)

// AllValues returns all ListProjectFeaturesSortBy values.
func (ListProjectFeaturesSortBy) AllValues() []ListProjectFeaturesSortBy {
	return []ListProjectFeaturesSortBy{
		ListProjectFeaturesSortByName,
		ListProjectFeaturesSortByKey,
		ListProjectFeaturesSortByEnabled,
		ListProjectFeaturesSortByKind,
		ListProjectFeaturesSortByCreatedAt,
		ListProjectFeaturesSortByUpdatedAt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListProjectFeaturesSortBy) MarshalText() ([]byte, error) {
	switch s {
	case ListProjectFeaturesSortByName:
		return []byte(s), nil
	case ListProjectFeaturesSortByKey:
		return []byte(s), nil
	case ListProjectFeaturesSortByEnabled:
		return []byte(s), nil
	case ListProjectFeaturesSortByKind:
		return []byte(s), nil
	case ListProjectFeaturesSortByCreatedAt:
		return []byte(s), nil
	case ListProjectFeaturesSortByUpdatedAt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListProjectFeaturesSortBy) UnmarshalText(data []byte) error {
	switch ListProjectFeaturesSortBy(data) {
	case ListProjectFeaturesSortByName:
		*s = ListProjectFeaturesSortByName
		return nil
	case ListProjectFeaturesSortByKey:
		*s = ListProjectFeaturesSortByKey
		return nil
	case ListProjectFeaturesSortByEnabled:
		*s = ListProjectFeaturesSortByEnabled
		return nil
	case ListProjectFeaturesSortByKind:
		*s = ListProjectFeaturesSortByKind
		return nil
	case ListProjectFeaturesSortByCreatedAt:
		*s = ListProjectFeaturesSortByCreatedAt
		return nil
	case ListProjectFeaturesSortByUpdatedAt:
		*s = ListProjectFeaturesSortByUpdatedAt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListProjectMembershipsOKApplicationJSON []Membership

func (*ListProjectMembershipsOKApplicationJSON) listProjectMembershipsRes() {}

type ListProjectSegmentsSortBy string

const (
	ListProjectSegmentsSortByName      ListProjectSegmentsSortBy = "name"
	ListProjectSegmentsSortByCreatedAt ListProjectSegmentsSortBy = "created_at"
	ListProjectSegmentsSortByUpdatedAt ListProjectSegmentsSortBy = "updated_at"
)

// AllValues returns all ListProjectSegmentsSortBy values.
func (ListProjectSegmentsSortBy) AllValues() []ListProjectSegmentsSortBy {
	return []ListProjectSegmentsSortBy{
		ListProjectSegmentsSortByName,
		ListProjectSegmentsSortByCreatedAt,
		ListProjectSegmentsSortByUpdatedAt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListProjectSegmentsSortBy) MarshalText() ([]byte, error) {
	switch s {
	case ListProjectSegmentsSortByName:
		return []byte(s), nil
	case ListProjectSegmentsSortByCreatedAt:
		return []byte(s), nil
	case ListProjectSegmentsSortByUpdatedAt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListProjectSegmentsSortBy) UnmarshalText(data []byte) error {
	switch ListProjectSegmentsSortBy(data) {
	case ListProjectSegmentsSortByName:
		*s = ListProjectSegmentsSortByName
		return nil
	case ListProjectSegmentsSortByCreatedAt:
		*s = ListProjectSegmentsSortByCreatedAt
		return nil
	case ListProjectSegmentsSortByUpdatedAt:
		*s = ListProjectSegmentsSortByUpdatedAt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListProjectSettingsResponse
type ListProjectSettingsResponse struct {
	Data       []ProjectSetting `json:"data"`
	Pagination OptPagination    `json:"pagination"`
}

// GetData returns the value of Data.
func (s *ListProjectSettingsResponse) GetData() []ProjectSetting {
	return s.Data
}

// GetPagination returns the value of Pagination.
func (s *ListProjectSettingsResponse) GetPagination() OptPagination {
	return s.Pagination
}

// SetData sets the value of Data.
func (s *ListProjectSettingsResponse) SetData(val []ProjectSetting) {
	s.Data = val
}

// SetPagination sets the value of Pagination.
func (s *ListProjectSettingsResponse) SetPagination(val OptPagination) {
	s.Pagination = val
}

func (*ListProjectSettingsResponse) listProjectSettingsRes() {}

type ListProjectTagsResponse []ProjectTag

func (*ListProjectTagsResponse) listFeatureTagsRes() {}
func (*ListProjectTagsResponse) listProjectTagsRes() {}

type ListProjectsResponse []Project

func (*ListProjectsResponse) listProjectsRes() {}

type ListRolePermissionsOKApplicationJSON []ListRolePermissionsOKItem

func (*ListRolePermissionsOKApplicationJSON) listRolePermissionsRes() {}

type ListRolePermissionsOKItem struct {
	Role        OptRole      `json:"role"`
	Permissions []Permission `json:"permissions"`
}

// GetRole returns the value of Role.
func (s *ListRolePermissionsOKItem) GetRole() OptRole {
	return s.Role
}

// GetPermissions returns the value of Permissions.
func (s *ListRolePermissionsOKItem) GetPermissions() []Permission {
	return s.Permissions
}

// SetRole sets the value of Role.
func (s *ListRolePermissionsOKItem) SetRole(val OptRole) {
	s.Role = val
}

// SetPermissions sets the value of Permissions.
func (s *ListRolePermissionsOKItem) SetPermissions(val []Permission) {
	s.Permissions = val
}

type ListRolesOKApplicationJSON []Role

func (*ListRolesOKApplicationJSON) listRolesRes() {}

type ListRuleAttributesResponse []RuleAttributeEntity

func (*ListRuleAttributesResponse) listRuleAttributesRes() {}

type ListRulesResponse []Rule

func (*ListRulesResponse) listFeatureRulesRes() {}

// Ref: #/components/schemas/ListSegmentsResponse
type ListSegmentsResponse struct {
	Items      []Segment  `json:"items"`
	Pagination Pagination `json:"pagination"`
}

// GetItems returns the value of Items.
func (s *ListSegmentsResponse) GetItems() []Segment {
	return s.Items
}

// GetPagination returns the value of Pagination.
func (s *ListSegmentsResponse) GetPagination() Pagination {
	return s.Pagination
}

// SetItems sets the value of Items.
func (s *ListSegmentsResponse) SetItems(val []Segment) {
	s.Items = val
}

// SetPagination sets the value of Pagination.
func (s *ListSegmentsResponse) SetPagination(val Pagination) {
	s.Pagination = val
}

func (*ListSegmentsResponse) listProjectSegmentsRes() {}

type ListUsersResponse []User

func (*ListUsersResponse) listUsersRes() {}

// Ref: #/components/schemas/LogicalOperator
type LogicalOperator string

const (
	LogicalOperatorAnd    LogicalOperator = "and"
	LogicalOperatorOr     LogicalOperator = "or"
	LogicalOperatorAndNot LogicalOperator = "and_not"
)

// AllValues returns all LogicalOperator values.
func (LogicalOperator) AllValues() []LogicalOperator {
	return []LogicalOperator{
		LogicalOperatorAnd,
		LogicalOperatorOr,
		LogicalOperatorAndNot,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LogicalOperator) MarshalText() ([]byte, error) {
	switch s {
	case LogicalOperatorAnd:
		return []byte(s), nil
	case LogicalOperatorOr:
		return []byte(s), nil
	case LogicalOperatorAndNot:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LogicalOperator) UnmarshalText(data []byte) error {
	switch LogicalOperator(data) {
	case LogicalOperatorAnd:
		*s = LogicalOperatorAnd
		return nil
	case LogicalOperatorOr:
		*s = LogicalOperatorOr
		return nil
	case LogicalOperatorAndNot:
		*s = LogicalOperatorAndNot
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/LoginRequest
type LoginRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *LoginRequest) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *LoginRequest) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *LoginRequest) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *LoginRequest) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/LoginResponse
type LoginResponse struct {
	AccessToken   string `json:"access_token"`
	RefreshToken  string `json:"refresh_token"`
	ExpiresIn     int    `json:"expires_in"`
	IsTmpPassword bool   `json:"is_tmp_password"`
}

// GetAccessToken returns the value of AccessToken.
func (s *LoginResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *LoginResponse) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *LoginResponse) GetExpiresIn() int {
	return s.ExpiresIn
}

// GetIsTmpPassword returns the value of IsTmpPassword.
func (s *LoginResponse) GetIsTmpPassword() bool {
	return s.IsTmpPassword
}

// SetAccessToken sets the value of AccessToken.
func (s *LoginResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *LoginResponse) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *LoginResponse) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

// SetIsTmpPassword sets the value of IsTmpPassword.
func (s *LoginResponse) SetIsTmpPassword(val bool) {
	s.IsTmpPassword = val
}

func (*LoginResponse) loginRes()       {}
func (*LoginResponse) sSOCallbackRes() {}

// MarkAllNotificationsAsReadNoContent is response for MarkAllNotificationsAsRead operation.
type MarkAllNotificationsAsReadNoContent struct{}

func (*MarkAllNotificationsAsReadNoContent) markAllNotificationsAsReadRes() {}

// MarkNotificationAsReadNoContent is response for MarkNotificationAsRead operation.
type MarkNotificationAsReadNoContent struct{}

func (*MarkNotificationAsReadNoContent) markNotificationAsReadRes() {}

// Ref: #/components/schemas/Membership
type Membership struct {
	ID        uuid.UUID `json:"id"`
	UserID    int64     `json:"user_id"`
	ProjectID uuid.UUID `json:"project_id"`
	RoleID    uuid.UUID `json:"role_id"`
	RoleKey   string    `json:"role_key"`
	RoleName  string    `json:"role_name"`
	CreatedAt time.Time `json:"created_at"`
}

// GetID returns the value of ID.
func (s *Membership) GetID() uuid.UUID {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *Membership) GetUserID() int64 {
	return s.UserID
}

// GetProjectID returns the value of ProjectID.
func (s *Membership) GetProjectID() uuid.UUID {
	return s.ProjectID
}

// GetRoleID returns the value of RoleID.
func (s *Membership) GetRoleID() uuid.UUID {
	return s.RoleID
}

// GetRoleKey returns the value of RoleKey.
func (s *Membership) GetRoleKey() string {
	return s.RoleKey
}

// GetRoleName returns the value of RoleName.
func (s *Membership) GetRoleName() string {
	return s.RoleName
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Membership) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Membership) SetID(val uuid.UUID) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *Membership) SetUserID(val int64) {
	s.UserID = val
}

// SetProjectID sets the value of ProjectID.
func (s *Membership) SetProjectID(val uuid.UUID) {
	s.ProjectID = val
}

// SetRoleID sets the value of RoleID.
func (s *Membership) SetRoleID(val uuid.UUID) {
	s.RoleID = val
}

// SetRoleKey sets the value of RoleKey.
func (s *Membership) SetRoleKey(val string) {
	s.RoleKey = val
}

// SetRoleName sets the value of RoleName.
func (s *Membership) SetRoleName(val string) {
	s.RoleName = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Membership) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*Membership) createProjectMembershipRes() {}
func (*Membership) getProjectMembershipRes()    {}
func (*Membership) updateProjectMembershipRes() {}

// Type of notification channel (mattermost, slack, etc.).
// Ref: #/components/schemas/NotificationChannelType
type NotificationChannelType string

const (
	NotificationChannelTypeTelegram   NotificationChannelType = "telegram"
	NotificationChannelTypeSlack      NotificationChannelType = "slack"
	NotificationChannelTypeMattermost NotificationChannelType = "mattermost"
	NotificationChannelTypeWebhook    NotificationChannelType = "webhook"
	NotificationChannelTypePachca     NotificationChannelType = "pachca"
)

// AllValues returns all NotificationChannelType values.
func (NotificationChannelType) AllValues() []NotificationChannelType {
	return []NotificationChannelType{
		NotificationChannelTypeTelegram,
		NotificationChannelTypeSlack,
		NotificationChannelTypeMattermost,
		NotificationChannelTypeWebhook,
		NotificationChannelTypePachca,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NotificationChannelType) MarshalText() ([]byte, error) {
	switch s {
	case NotificationChannelTypeTelegram:
		return []byte(s), nil
	case NotificationChannelTypeSlack:
		return []byte(s), nil
	case NotificationChannelTypeMattermost:
		return []byte(s), nil
	case NotificationChannelTypeWebhook:
		return []byte(s), nil
	case NotificationChannelTypePachca:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NotificationChannelType) UnmarshalText(data []byte) error {
	switch NotificationChannelType(data) {
	case NotificationChannelTypeTelegram:
		*s = NotificationChannelTypeTelegram
		return nil
	case NotificationChannelTypeSlack:
		*s = NotificationChannelTypeSlack
		return nil
	case NotificationChannelTypeMattermost:
		*s = NotificationChannelTypeMattermost
		return nil
	case NotificationChannelTypeWebhook:
		*s = NotificationChannelTypeWebhook
		return nil
	case NotificationChannelTypePachca:
		*s = NotificationChannelTypePachca
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NotificationSetting
type NotificationSetting struct {
	ID             uint      `json:"id"`
	ProjectID      uuid.UUID `json:"project_id"`
	EnvironmentID  uint      `json:"environment_id"`
	EnvironmentKey string    `json:"environment_key"`
	// Type of notification channel (email, mattermost, slack, etc.).
	Type string `json:"type"`
	// Configuration for the notification channel (JSONB in database).
	Config    string    `json:"config"`
	Enabled   bool      `json:"enabled"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *NotificationSetting) GetID() uint {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *NotificationSetting) GetProjectID() uuid.UUID {
	return s.ProjectID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *NotificationSetting) GetEnvironmentID() uint {
	return s.EnvironmentID
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *NotificationSetting) GetEnvironmentKey() string {
	return s.EnvironmentKey
}

// GetType returns the value of Type.
func (s *NotificationSetting) GetType() string {
	return s.Type
}

// GetConfig returns the value of Config.
func (s *NotificationSetting) GetConfig() string {
	return s.Config
}

// GetEnabled returns the value of Enabled.
func (s *NotificationSetting) GetEnabled() bool {
	return s.Enabled
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NotificationSetting) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NotificationSetting) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *NotificationSetting) SetID(val uint) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *NotificationSetting) SetProjectID(val uuid.UUID) {
	s.ProjectID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *NotificationSetting) SetEnvironmentID(val uint) {
	s.EnvironmentID = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *NotificationSetting) SetEnvironmentKey(val string) {
	s.EnvironmentKey = val
}

// SetType sets the value of Type.
func (s *NotificationSetting) SetType(val string) {
	s.Type = val
}

// SetConfig sets the value of Config.
func (s *NotificationSetting) SetConfig(val string) {
	s.Config = val
}

// SetEnabled sets the value of Enabled.
func (s *NotificationSetting) SetEnabled(val bool) {
	s.Enabled = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NotificationSetting) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NotificationSetting) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*NotificationSetting) createNotificationSettingRes() {}
func (*NotificationSetting) getNotificationSettingRes()    {}
func (*NotificationSetting) updateNotificationSettingRes() {}

// NewOptAuditAction returns new OptAuditAction with value set to v.
func NewOptAuditAction(v AuditAction) OptAuditAction {
	return OptAuditAction{
		Value: v,
		Set:   true,
	}
}

// OptAuditAction is optional AuditAction.
type OptAuditAction struct {
	Value AuditAction
	Set   bool
}

// IsSet returns true if OptAuditAction was set.
func (o OptAuditAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuditAction) Reset() {
	var v AuditAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuditAction) SetTo(v AuditAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuditAction) Get() (v AuditAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuditAction) Or(d AuditAction) AuditAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategory returns new OptCategory with value set to v.
func NewOptCategory(v Category) OptCategory {
	return OptCategory{
		Value: v,
		Set:   true,
	}
}

// OptCategory is optional Category.
type OptCategory struct {
	Value Category
	Set   bool
}

// IsSet returns true if OptCategory was set.
func (o OptCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategory) Reset() {
	var v Category
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategory) SetTo(v Category) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategory) Get() (v Category, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategory) Or(d Category) Category {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategoryHealthHealthStatus returns new OptCategoryHealthHealthStatus with value set to v.
func NewOptCategoryHealthHealthStatus(v CategoryHealthHealthStatus) OptCategoryHealthHealthStatus {
	return OptCategoryHealthHealthStatus{
		Value: v,
		Set:   true,
	}
}

// OptCategoryHealthHealthStatus is optional CategoryHealthHealthStatus.
type OptCategoryHealthHealthStatus struct {
	Value CategoryHealthHealthStatus
	Set   bool
}

// IsSet returns true if OptCategoryHealthHealthStatus was set.
func (o OptCategoryHealthHealthStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategoryHealthHealthStatus) Reset() {
	var v CategoryHealthHealthStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategoryHealthHealthStatus) SetTo(v CategoryHealthHealthStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategoryHealthHealthStatus) Get() (v CategoryHealthHealthStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategoryHealthHealthStatus) Or(d CategoryHealthHealthStatus) CategoryHealthHealthStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDashboardOverviewResponseFeatureActivity returns new OptDashboardOverviewResponseFeatureActivity with value set to v.
func NewOptDashboardOverviewResponseFeatureActivity(v DashboardOverviewResponseFeatureActivity) OptDashboardOverviewResponseFeatureActivity {
	return OptDashboardOverviewResponseFeatureActivity{
		Value: v,
		Set:   true,
	}
}

// OptDashboardOverviewResponseFeatureActivity is optional DashboardOverviewResponseFeatureActivity.
type OptDashboardOverviewResponseFeatureActivity struct {
	Value DashboardOverviewResponseFeatureActivity
	Set   bool
}

// IsSet returns true if OptDashboardOverviewResponseFeatureActivity was set.
func (o OptDashboardOverviewResponseFeatureActivity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDashboardOverviewResponseFeatureActivity) Reset() {
	var v DashboardOverviewResponseFeatureActivity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDashboardOverviewResponseFeatureActivity) SetTo(v DashboardOverviewResponseFeatureActivity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDashboardOverviewResponseFeatureActivity) Get() (v DashboardOverviewResponseFeatureActivity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDashboardOverviewResponseFeatureActivity) Or(d DashboardOverviewResponseFeatureActivity) DashboardOverviewResponseFeatureActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEntityType returns new OptEntityType with value set to v.
func NewOptEntityType(v EntityType) OptEntityType {
	return OptEntityType{
		Value: v,
		Set:   true,
	}
}

// OptEntityType is optional EntityType.
type OptEntityType struct {
	Value EntityType
	Set   bool
}

// IsSet returns true if OptEntityType was set.
func (o OptEntityType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEntityType) Reset() {
	var v EntityType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEntityType) SetTo(v EntityType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEntityType) Get() (v EntityType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEntityType) Or(d EntityType) EntityType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironment returns new OptEnvironment with value set to v.
func NewOptEnvironment(v Environment) OptEnvironment {
	return OptEnvironment{
		Value: v,
		Set:   true,
	}
}

// OptEnvironment is optional Environment.
type OptEnvironment struct {
	Value Environment
	Set   bool
}

// IsSet returns true if OptEnvironment was set.
func (o OptEnvironment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironment) Reset() {
	var v Environment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironment) SetTo(v Environment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironment) Get() (v Environment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironment) Or(d Environment) Environment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFeatureUpcomingNextState returns new OptFeatureUpcomingNextState with value set to v.
func NewOptFeatureUpcomingNextState(v FeatureUpcomingNextState) OptFeatureUpcomingNextState {
	return OptFeatureUpcomingNextState{
		Value: v,
		Set:   true,
	}
}

// OptFeatureUpcomingNextState is optional FeatureUpcomingNextState.
type OptFeatureUpcomingNextState struct {
	Value FeatureUpcomingNextState
	Set   bool
}

// IsSet returns true if OptFeatureUpcomingNextState was set.
func (o OptFeatureUpcomingNextState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFeatureUpcomingNextState) Reset() {
	var v FeatureUpcomingNextState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFeatureUpcomingNextState) SetTo(v FeatureUpcomingNextState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFeatureUpcomingNextState) Get() (v FeatureUpcomingNextState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFeatureUpcomingNextState) Or(d FeatureUpcomingNextState) FeatureUpcomingNextState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetLDAPSyncLogsLevel returns new OptGetLDAPSyncLogsLevel with value set to v.
func NewOptGetLDAPSyncLogsLevel(v GetLDAPSyncLogsLevel) OptGetLDAPSyncLogsLevel {
	return OptGetLDAPSyncLogsLevel{
		Value: v,
		Set:   true,
	}
}

// OptGetLDAPSyncLogsLevel is optional GetLDAPSyncLogsLevel.
type OptGetLDAPSyncLogsLevel struct {
	Value GetLDAPSyncLogsLevel
	Set   bool
}

// IsSet returns true if OptGetLDAPSyncLogsLevel was set.
func (o OptGetLDAPSyncLogsLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetLDAPSyncLogsLevel) Reset() {
	var v GetLDAPSyncLogsLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetLDAPSyncLogsLevel) SetTo(v GetLDAPSyncLogsLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetLDAPSyncLogsLevel) Get() (v GetLDAPSyncLogsLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetLDAPSyncLogsLevel) Or(d GetLDAPSyncLogsLevel) GetLDAPSyncLogsLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLDAPConfig returns new OptLDAPConfig with value set to v.
func NewOptLDAPConfig(v LDAPConfig) OptLDAPConfig {
	return OptLDAPConfig{
		Value: v,
		Set:   true,
	}
}

// OptLDAPConfig is optional LDAPConfig.
type OptLDAPConfig struct {
	Value LDAPConfig
	Set   bool
}

// IsSet returns true if OptLDAPConfig was set.
func (o OptLDAPConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLDAPConfig) Reset() {
	var v LDAPConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLDAPConfig) SetTo(v LDAPConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLDAPConfig) Get() (v LDAPConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLDAPConfig) Or(d LDAPConfig) LDAPConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLDAPConnectionTestResponseDetails returns new OptLDAPConnectionTestResponseDetails with value set to v.
func NewOptLDAPConnectionTestResponseDetails(v LDAPConnectionTestResponseDetails) OptLDAPConnectionTestResponseDetails {
	return OptLDAPConnectionTestResponseDetails{
		Value: v,
		Set:   true,
	}
}

// OptLDAPConnectionTestResponseDetails is optional LDAPConnectionTestResponseDetails.
type OptLDAPConnectionTestResponseDetails struct {
	Value LDAPConnectionTestResponseDetails
	Set   bool
}

// IsSet returns true if OptLDAPConnectionTestResponseDetails was set.
func (o OptLDAPConnectionTestResponseDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLDAPConnectionTestResponseDetails) Reset() {
	var v LDAPConnectionTestResponseDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLDAPConnectionTestResponseDetails) SetTo(v LDAPConnectionTestResponseDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLDAPConnectionTestResponseDetails) Get() (v LDAPConnectionTestResponseDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLDAPConnectionTestResponseDetails) Or(d LDAPConnectionTestResponseDetails) LDAPConnectionTestResponseDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPendingChangesSortBy returns new OptListPendingChangesSortBy with value set to v.
func NewOptListPendingChangesSortBy(v ListPendingChangesSortBy) OptListPendingChangesSortBy {
	return OptListPendingChangesSortBy{
		Value: v,
		Set:   true,
	}
}

// OptListPendingChangesSortBy is optional ListPendingChangesSortBy.
type OptListPendingChangesSortBy struct {
	Value ListPendingChangesSortBy
	Set   bool
}

// IsSet returns true if OptListPendingChangesSortBy was set.
func (o OptListPendingChangesSortBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPendingChangesSortBy) Reset() {
	var v ListPendingChangesSortBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPendingChangesSortBy) SetTo(v ListPendingChangesSortBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPendingChangesSortBy) Get() (v ListPendingChangesSortBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPendingChangesSortBy) Or(d ListPendingChangesSortBy) ListPendingChangesSortBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPendingChangesStatus returns new OptListPendingChangesStatus with value set to v.
func NewOptListPendingChangesStatus(v ListPendingChangesStatus) OptListPendingChangesStatus {
	return OptListPendingChangesStatus{
		Value: v,
		Set:   true,
	}
}

// OptListPendingChangesStatus is optional ListPendingChangesStatus.
type OptListPendingChangesStatus struct {
	Value ListPendingChangesStatus
	Set   bool
}

// IsSet returns true if OptListPendingChangesStatus was set.
func (o OptListPendingChangesStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPendingChangesStatus) Reset() {
	var v ListPendingChangesStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPendingChangesStatus) SetTo(v ListPendingChangesStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPendingChangesStatus) Get() (v ListPendingChangesStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPendingChangesStatus) Or(d ListPendingChangesStatus) ListPendingChangesStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListProjectAuditLogsSortBy returns new OptListProjectAuditLogsSortBy with value set to v.
func NewOptListProjectAuditLogsSortBy(v ListProjectAuditLogsSortBy) OptListProjectAuditLogsSortBy {
	return OptListProjectAuditLogsSortBy{
		Value: v,
		Set:   true,
	}
}

// OptListProjectAuditLogsSortBy is optional ListProjectAuditLogsSortBy.
type OptListProjectAuditLogsSortBy struct {
	Value ListProjectAuditLogsSortBy
	Set   bool
}

// IsSet returns true if OptListProjectAuditLogsSortBy was set.
func (o OptListProjectAuditLogsSortBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListProjectAuditLogsSortBy) Reset() {
	var v ListProjectAuditLogsSortBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListProjectAuditLogsSortBy) SetTo(v ListProjectAuditLogsSortBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListProjectAuditLogsSortBy) Get() (v ListProjectAuditLogsSortBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListProjectAuditLogsSortBy) Or(d ListProjectAuditLogsSortBy) ListProjectAuditLogsSortBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListProjectChangesSortBy returns new OptListProjectChangesSortBy with value set to v.
func NewOptListProjectChangesSortBy(v ListProjectChangesSortBy) OptListProjectChangesSortBy {
	return OptListProjectChangesSortBy{
		Value: v,
		Set:   true,
	}
}

// OptListProjectChangesSortBy is optional ListProjectChangesSortBy.
type OptListProjectChangesSortBy struct {
	Value ListProjectChangesSortBy
	Set   bool
}

// IsSet returns true if OptListProjectChangesSortBy was set.
func (o OptListProjectChangesSortBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListProjectChangesSortBy) Reset() {
	var v ListProjectChangesSortBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListProjectChangesSortBy) SetTo(v ListProjectChangesSortBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListProjectChangesSortBy) Get() (v ListProjectChangesSortBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListProjectChangesSortBy) Or(d ListProjectChangesSortBy) ListProjectChangesSortBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListProjectFeaturesKind returns new OptListProjectFeaturesKind with value set to v.
func NewOptListProjectFeaturesKind(v ListProjectFeaturesKind) OptListProjectFeaturesKind {
	return OptListProjectFeaturesKind{
		Value: v,
		Set:   true,
	}
}

// OptListProjectFeaturesKind is optional ListProjectFeaturesKind.
type OptListProjectFeaturesKind struct {
	Value ListProjectFeaturesKind
	Set   bool
}

// IsSet returns true if OptListProjectFeaturesKind was set.
func (o OptListProjectFeaturesKind) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListProjectFeaturesKind) Reset() {
	var v ListProjectFeaturesKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListProjectFeaturesKind) SetTo(v ListProjectFeaturesKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListProjectFeaturesKind) Get() (v ListProjectFeaturesKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListProjectFeaturesKind) Or(d ListProjectFeaturesKind) ListProjectFeaturesKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListProjectFeaturesSortBy returns new OptListProjectFeaturesSortBy with value set to v.
func NewOptListProjectFeaturesSortBy(v ListProjectFeaturesSortBy) OptListProjectFeaturesSortBy {
	return OptListProjectFeaturesSortBy{
		Value: v,
		Set:   true,
	}
}

// OptListProjectFeaturesSortBy is optional ListProjectFeaturesSortBy.
type OptListProjectFeaturesSortBy struct {
	Value ListProjectFeaturesSortBy
	Set   bool
}

// IsSet returns true if OptListProjectFeaturesSortBy was set.
func (o OptListProjectFeaturesSortBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListProjectFeaturesSortBy) Reset() {
	var v ListProjectFeaturesSortBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListProjectFeaturesSortBy) SetTo(v ListProjectFeaturesSortBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListProjectFeaturesSortBy) Get() (v ListProjectFeaturesSortBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListProjectFeaturesSortBy) Or(d ListProjectFeaturesSortBy) ListProjectFeaturesSortBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListProjectSegmentsSortBy returns new OptListProjectSegmentsSortBy with value set to v.
func NewOptListProjectSegmentsSortBy(v ListProjectSegmentsSortBy) OptListProjectSegmentsSortBy {
	return OptListProjectSegmentsSortBy{
		Value: v,
		Set:   true,
	}
}

// OptListProjectSegmentsSortBy is optional ListProjectSegmentsSortBy.
type OptListProjectSegmentsSortBy struct {
	Value ListProjectSegmentsSortBy
	Set   bool
}

// IsSet returns true if OptListProjectSegmentsSortBy was set.
func (o OptListProjectSegmentsSortBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListProjectSegmentsSortBy) Reset() {
	var v ListProjectSegmentsSortBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListProjectSegmentsSortBy) SetTo(v ListProjectSegmentsSortBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListProjectSegmentsSortBy) Get() (v ListProjectSegmentsSortBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListProjectSegmentsSortBy) Or(d ListProjectSegmentsSortBy) ListProjectSegmentsSortBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAuditLogNewValue returns new OptNilAuditLogNewValue with value set to v.
func NewOptNilAuditLogNewValue(v AuditLogNewValue) OptNilAuditLogNewValue {
	return OptNilAuditLogNewValue{
		Value: v,
		Set:   true,
	}
}

// OptNilAuditLogNewValue is optional nullable AuditLogNewValue.
type OptNilAuditLogNewValue struct {
	Value AuditLogNewValue
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAuditLogNewValue was set.
func (o OptNilAuditLogNewValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAuditLogNewValue) Reset() {
	var v AuditLogNewValue
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAuditLogNewValue) SetTo(v AuditLogNewValue) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilAuditLogNewValue) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilAuditLogNewValue) SetToNull() {
	o.Set = true
	o.Null = true
	var v AuditLogNewValue
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAuditLogNewValue) Get() (v AuditLogNewValue, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAuditLogNewValue) Or(d AuditLogNewValue) AuditLogNewValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAuditLogOldValue returns new OptNilAuditLogOldValue with value set to v.
func NewOptNilAuditLogOldValue(v AuditLogOldValue) OptNilAuditLogOldValue {
	return OptNilAuditLogOldValue{
		Value: v,
		Set:   true,
	}
}

// OptNilAuditLogOldValue is optional nullable AuditLogOldValue.
type OptNilAuditLogOldValue struct {
	Value AuditLogOldValue
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAuditLogOldValue was set.
func (o OptNilAuditLogOldValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAuditLogOldValue) Reset() {
	var v AuditLogOldValue
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAuditLogOldValue) SetTo(v AuditLogOldValue) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilAuditLogOldValue) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilAuditLogOldValue) SetToNull() {
	o.Set = true
	o.Null = true
	var v AuditLogOldValue
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAuditLogOldValue) Get() (v AuditLogOldValue, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAuditLogOldValue) Or(d AuditLogOldValue) AuditLogOldValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDuration returns new OptNilDuration with value set to v.
func NewOptNilDuration(v time.Duration) OptNilDuration {
	return OptNilDuration{
		Value: v,
		Set:   true,
	}
}

// OptNilDuration is optional nullable time.Duration.
type OptNilDuration struct {
	Value time.Duration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDuration was set.
func (o OptNilDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDuration) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDuration) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Duration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDuration) Get() (v time.Duration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDuration) Or(d time.Duration) time.Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUID returns new OptNilUUID with value set to v.
func NewOptNilUUID(v uuid.UUID) OptNilUUID {
	return OptNilUUID{
		Value: v,
		Set:   true,
	}
}

// OptNilUUID is optional nullable uuid.UUID.
type OptNilUUID struct {
	Value uuid.UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUID was set.
func (o OptNilUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilUUID) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilUUID) SetToNull() {
	o.Set = true
	o.Null = true
	var v uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUID) Get() (v uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUint returns new OptNilUint with value set to v.
func NewOptNilUint(v uint) OptNilUint {
	return OptNilUint{
		Value: v,
		Set:   true,
	}
}

// OptNilUint is optional nullable uint.
type OptNilUint struct {
	Value uint
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUint was set.
func (o OptNilUint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUint) Reset() {
	var v uint
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUint) SetTo(v uint) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilUint) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilUint) SetToNull() {
	o.Set = true
	o.Null = true
	var v uint
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUint) Get() (v uint, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUint) Or(d uint) uint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPagination returns new OptPagination with value set to v.
func NewOptPagination(v Pagination) OptPagination {
	return OptPagination{
		Value: v,
		Set:   true,
	}
}

// OptPagination is optional Pagination.
type OptPagination struct {
	Value Pagination
	Set   bool
}

// IsSet returns true if OptPagination was set.
func (o OptPagination) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPagination) Reset() {
	var v Pagination
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPagination) SetTo(v Pagination) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPagination) Get() (v Pagination, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPagination) Or(d Pagination) Pagination {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectHealthHealthStatus returns new OptProjectHealthHealthStatus with value set to v.
func NewOptProjectHealthHealthStatus(v ProjectHealthHealthStatus) OptProjectHealthHealthStatus {
	return OptProjectHealthHealthStatus{
		Value: v,
		Set:   true,
	}
}

// OptProjectHealthHealthStatus is optional ProjectHealthHealthStatus.
type OptProjectHealthHealthStatus struct {
	Value ProjectHealthHealthStatus
	Set   bool
}

// IsSet returns true if OptProjectHealthHealthStatus was set.
func (o OptProjectHealthHealthStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectHealthHealthStatus) Reset() {
	var v ProjectHealthHealthStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectHealthHealthStatus) SetTo(v ProjectHealthHealthStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectHealthHealthStatus) Get() (v ProjectHealthHealthStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectHealthHealthStatus) Or(d ProjectHealthHealthStatus) ProjectHealthHealthStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecentActivityStatus returns new OptRecentActivityStatus with value set to v.
func NewOptRecentActivityStatus(v RecentActivityStatus) OptRecentActivityStatus {
	return OptRecentActivityStatus{
		Value: v,
		Set:   true,
	}
}

// OptRecentActivityStatus is optional RecentActivityStatus.
type OptRecentActivityStatus struct {
	Value RecentActivityStatus
	Set   bool
}

// IsSet returns true if OptRecentActivityStatus was set.
func (o OptRecentActivityStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecentActivityStatus) Reset() {
	var v RecentActivityStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecentActivityStatus) SetTo(v RecentActivityStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecentActivityStatus) Get() (v RecentActivityStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecentActivityStatus) Or(d RecentActivityStatus) RecentActivityStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRole returns new OptRole with value set to v.
func NewOptRole(v Role) OptRole {
	return OptRole{
		Value: v,
		Set:   true,
	}
}

// OptRole is optional Role.
type OptRole struct {
	Value Role
	Set   bool
}

// IsSet returns true if OptRole was set.
func (o OptRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRole) Reset() {
	var v Role
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRole) SetTo(v Role) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRole) Get() (v Role, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRole) Or(d Role) Role {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleCondition returns new OptRuleCondition with value set to v.
func NewOptRuleCondition(v RuleCondition) OptRuleCondition {
	return OptRuleCondition{
		Value: v,
		Set:   true,
	}
}

// OptRuleCondition is optional RuleCondition.
type OptRuleCondition struct {
	Value RuleCondition
	Set   bool
}

// IsSet returns true if OptRuleCondition was set.
func (o OptRuleCondition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleCondition) Reset() {
	var v RuleCondition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleCondition) SetTo(v RuleCondition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleCondition) Get() (v RuleCondition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleCondition) Or(d RuleCondition) RuleCondition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleConditionGroup returns new OptRuleConditionGroup with value set to v.
func NewOptRuleConditionGroup(v RuleConditionGroup) OptRuleConditionGroup {
	return OptRuleConditionGroup{
		Value: v,
		Set:   true,
	}
}

// OptRuleConditionGroup is optional RuleConditionGroup.
type OptRuleConditionGroup struct {
	Value RuleConditionGroup
	Set   bool
}

// IsSet returns true if OptRuleConditionGroup was set.
func (o OptRuleConditionGroup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleConditionGroup) Reset() {
	var v RuleConditionGroup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleConditionGroup) SetTo(v RuleConditionGroup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleConditionGroup) Get() (v RuleConditionGroup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleConditionGroup) Or(d RuleConditionGroup) RuleConditionGroup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSortOrder returns new OptSortOrder with value set to v.
func NewOptSortOrder(v SortOrder) OptSortOrder {
	return OptSortOrder{
		Value: v,
		Set:   true,
	}
}

// OptSortOrder is optional SortOrder.
type OptSortOrder struct {
	Value SortOrder
	Set   bool
}

// IsSet returns true if OptSortOrder was set.
func (o OptSortOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSortOrder) Reset() {
	var v SortOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSortOrder) SetTo(v SortOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSortOrder) Get() (v SortOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSortOrder) Or(d SortOrder) SortOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint returns new OptUint with value set to v.
func NewOptUint(v uint) OptUint {
	return OptUint{
		Value: v,
		Set:   true,
	}
}

// OptUint is optional uint.
type OptUint struct {
	Value uint
	Set   bool
}

// IsSet returns true if OptUint was set.
func (o OptUint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint) Reset() {
	var v uint
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint) SetTo(v uint) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint) Get() (v uint, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint) Or(d uint) uint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Pagination
type Pagination struct {
	Total   uint `json:"total"`
	Page    uint `json:"page"`
	PerPage uint `json:"per_page"`
}

// GetTotal returns the value of Total.
func (s *Pagination) GetTotal() uint {
	return s.Total
}

// GetPage returns the value of Page.
func (s *Pagination) GetPage() uint {
	return s.Page
}

// GetPerPage returns the value of PerPage.
func (s *Pagination) GetPerPage() uint {
	return s.PerPage
}

// SetTotal sets the value of Total.
func (s *Pagination) SetTotal(val uint) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *Pagination) SetPage(val uint) {
	s.Page = val
}

// SetPerPage sets the value of PerPage.
func (s *Pagination) SetPerPage(val uint) {
	s.PerPage = val
}

// Ref: #/components/schemas/PendingChangeMeta
type PendingChangeMeta struct {
	Reason string `json:"reason"`
	Client string `json:"client"`
	Origin string `json:"origin"`
	// True if the project has only 1 active user (enables auto-approve).
	SingleUserProject OptBool `json:"single_user_project"`
}

// GetReason returns the value of Reason.
func (s *PendingChangeMeta) GetReason() string {
	return s.Reason
}

// GetClient returns the value of Client.
func (s *PendingChangeMeta) GetClient() string {
	return s.Client
}

// GetOrigin returns the value of Origin.
func (s *PendingChangeMeta) GetOrigin() string {
	return s.Origin
}

// GetSingleUserProject returns the value of SingleUserProject.
func (s *PendingChangeMeta) GetSingleUserProject() OptBool {
	return s.SingleUserProject
}

// SetReason sets the value of Reason.
func (s *PendingChangeMeta) SetReason(val string) {
	s.Reason = val
}

// SetClient sets the value of Client.
func (s *PendingChangeMeta) SetClient(val string) {
	s.Client = val
}

// SetOrigin sets the value of Origin.
func (s *PendingChangeMeta) SetOrigin(val string) {
	s.Origin = val
}

// SetSingleUserProject sets the value of SingleUserProject.
func (s *PendingChangeMeta) SetSingleUserProject(val OptBool) {
	s.SingleUserProject = val
}

// Ref: #/components/schemas/PendingChangePayload
type PendingChangePayload struct {
	Entities []EntityChange    `json:"entities"`
	Meta     PendingChangeMeta `json:"meta"`
}

// GetEntities returns the value of Entities.
func (s *PendingChangePayload) GetEntities() []EntityChange {
	return s.Entities
}

// GetMeta returns the value of Meta.
func (s *PendingChangePayload) GetMeta() PendingChangeMeta {
	return s.Meta
}

// SetEntities sets the value of Entities.
func (s *PendingChangePayload) SetEntities(val []EntityChange) {
	s.Entities = val
}

// SetMeta sets the value of Meta.
func (s *PendingChangePayload) SetMeta(val PendingChangeMeta) {
	s.Meta = val
}

// Ref: #/components/schemas/PendingChangeResponse
type PendingChangeResponse struct {
	ID              uuid.UUID                   `json:"id"`
	EnvironmentKey  string                      `json:"environment_key"`
	ProjectID       uuid.UUID                   `json:"project_id"`
	RequestedBy     string                      `json:"requested_by"`
	RequestUserID   OptNilUint                  `json:"request_user_id"`
	Change          PendingChangePayload        `json:"change"`
	Status          PendingChangeResponseStatus `json:"status"`
	CreatedAt       time.Time                   `json:"created_at"`
	ApprovedBy      OptNilString                `json:"approved_by"`
	ApprovedUserID  OptNilUint                  `json:"approved_user_id"`
	ApprovedAt      OptNilDateTime              `json:"approved_at"`
	RejectedBy      OptNilString                `json:"rejected_by"`
	RejectedAt      OptNilDateTime              `json:"rejected_at"`
	RejectionReason OptNilString                `json:"rejection_reason"`
}

// GetID returns the value of ID.
func (s *PendingChangeResponse) GetID() uuid.UUID {
	return s.ID
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *PendingChangeResponse) GetEnvironmentKey() string {
	return s.EnvironmentKey
}

// GetProjectID returns the value of ProjectID.
func (s *PendingChangeResponse) GetProjectID() uuid.UUID {
	return s.ProjectID
}

// GetRequestedBy returns the value of RequestedBy.
func (s *PendingChangeResponse) GetRequestedBy() string {
	return s.RequestedBy
}

// GetRequestUserID returns the value of RequestUserID.
func (s *PendingChangeResponse) GetRequestUserID() OptNilUint {
	return s.RequestUserID
}

// GetChange returns the value of Change.
func (s *PendingChangeResponse) GetChange() PendingChangePayload {
	return s.Change
}

// GetStatus returns the value of Status.
func (s *PendingChangeResponse) GetStatus() PendingChangeResponseStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PendingChangeResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetApprovedBy returns the value of ApprovedBy.
func (s *PendingChangeResponse) GetApprovedBy() OptNilString {
	return s.ApprovedBy
}

// GetApprovedUserID returns the value of ApprovedUserID.
func (s *PendingChangeResponse) GetApprovedUserID() OptNilUint {
	return s.ApprovedUserID
}

// GetApprovedAt returns the value of ApprovedAt.
func (s *PendingChangeResponse) GetApprovedAt() OptNilDateTime {
	return s.ApprovedAt
}

// GetRejectedBy returns the value of RejectedBy.
func (s *PendingChangeResponse) GetRejectedBy() OptNilString {
	return s.RejectedBy
}

// GetRejectedAt returns the value of RejectedAt.
func (s *PendingChangeResponse) GetRejectedAt() OptNilDateTime {
	return s.RejectedAt
}

// GetRejectionReason returns the value of RejectionReason.
func (s *PendingChangeResponse) GetRejectionReason() OptNilString {
	return s.RejectionReason
}

// SetID sets the value of ID.
func (s *PendingChangeResponse) SetID(val uuid.UUID) {
	s.ID = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *PendingChangeResponse) SetEnvironmentKey(val string) {
	s.EnvironmentKey = val
}

// SetProjectID sets the value of ProjectID.
func (s *PendingChangeResponse) SetProjectID(val uuid.UUID) {
	s.ProjectID = val
}

// SetRequestedBy sets the value of RequestedBy.
func (s *PendingChangeResponse) SetRequestedBy(val string) {
	s.RequestedBy = val
}

// SetRequestUserID sets the value of RequestUserID.
func (s *PendingChangeResponse) SetRequestUserID(val OptNilUint) {
	s.RequestUserID = val
}

// SetChange sets the value of Change.
func (s *PendingChangeResponse) SetChange(val PendingChangePayload) {
	s.Change = val
}

// SetStatus sets the value of Status.
func (s *PendingChangeResponse) SetStatus(val PendingChangeResponseStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PendingChangeResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetApprovedBy sets the value of ApprovedBy.
func (s *PendingChangeResponse) SetApprovedBy(val OptNilString) {
	s.ApprovedBy = val
}

// SetApprovedUserID sets the value of ApprovedUserID.
func (s *PendingChangeResponse) SetApprovedUserID(val OptNilUint) {
	s.ApprovedUserID = val
}

// SetApprovedAt sets the value of ApprovedAt.
func (s *PendingChangeResponse) SetApprovedAt(val OptNilDateTime) {
	s.ApprovedAt = val
}

// SetRejectedBy sets the value of RejectedBy.
func (s *PendingChangeResponse) SetRejectedBy(val OptNilString) {
	s.RejectedBy = val
}

// SetRejectedAt sets the value of RejectedAt.
func (s *PendingChangeResponse) SetRejectedAt(val OptNilDateTime) {
	s.RejectedAt = val
}

// SetRejectionReason sets the value of RejectionReason.
func (s *PendingChangeResponse) SetRejectionReason(val OptNilString) {
	s.RejectionReason = val
}

func (*PendingChangeResponse) addFeatureTagRes()            {}
func (*PendingChangeResponse) createFeatureFlagVariantRes() {}
func (*PendingChangeResponse) createFeatureRuleRes()        {}
func (*PendingChangeResponse) createFeatureScheduleRes()    {}
func (*PendingChangeResponse) deleteFeatureRes()            {}
func (*PendingChangeResponse) deleteFeatureScheduleRes()    {}
func (*PendingChangeResponse) getPendingChangeRes()         {}
func (*PendingChangeResponse) removeFeatureTagRes()         {}
func (*PendingChangeResponse) toggleFeatureRes()            {}
func (*PendingChangeResponse) updateFeatureRes()            {}
func (*PendingChangeResponse) updateFeatureScheduleRes()    {}

type PendingChangeResponseStatus string

const (
	PendingChangeResponseStatusPending   PendingChangeResponseStatus = "pending"
	PendingChangeResponseStatusApproved  PendingChangeResponseStatus = "approved"
	PendingChangeResponseStatusRejected  PendingChangeResponseStatus = "rejected"
	PendingChangeResponseStatusCancelled PendingChangeResponseStatus = "cancelled"
)

// AllValues returns all PendingChangeResponseStatus values.
func (PendingChangeResponseStatus) AllValues() []PendingChangeResponseStatus {
	return []PendingChangeResponseStatus{
		PendingChangeResponseStatusPending,
		PendingChangeResponseStatusApproved,
		PendingChangeResponseStatusRejected,
		PendingChangeResponseStatusCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PendingChangeResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PendingChangeResponseStatusPending:
		return []byte(s), nil
	case PendingChangeResponseStatusApproved:
		return []byte(s), nil
	case PendingChangeResponseStatusRejected:
		return []byte(s), nil
	case PendingChangeResponseStatusCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PendingChangeResponseStatus) UnmarshalText(data []byte) error {
	switch PendingChangeResponseStatus(data) {
	case PendingChangeResponseStatusPending:
		*s = PendingChangeResponseStatusPending
		return nil
	case PendingChangeResponseStatusApproved:
		*s = PendingChangeResponseStatusApproved
		return nil
	case PendingChangeResponseStatusRejected:
		*s = PendingChangeResponseStatusRejected
		return nil
	case PendingChangeResponseStatusCancelled:
		*s = PendingChangeResponseStatusCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PendingChangesListResponse
type PendingChangesListResponse struct {
	Data       []PendingChangeResponse `json:"data"`
	Pagination Pagination              `json:"pagination"`
}

// GetData returns the value of Data.
func (s *PendingChangesListResponse) GetData() []PendingChangeResponse {
	return s.Data
}

// GetPagination returns the value of Pagination.
func (s *PendingChangesListResponse) GetPagination() Pagination {
	return s.Pagination
}

// SetData sets the value of Data.
func (s *PendingChangesListResponse) SetData(val []PendingChangeResponse) {
	s.Data = val
}

// SetPagination sets the value of Pagination.
func (s *PendingChangesListResponse) SetPagination(val Pagination) {
	s.Pagination = val
}

func (*PendingChangesListResponse) listPendingChangesRes() {}

// Ref: #/components/schemas/PendingSummary
type PendingSummary struct {
	ProjectID             OptUUID     `json:"project_id"`
	ProjectName           OptString   `json:"project_name"`
	EnvironmentID         OptUUID     `json:"environment_id"`
	EnvironmentKey        OptString   `json:"environment_key"`
	TotalPending          OptUint     `json:"total_pending"`
	PendingFeatureChanges OptUint     `json:"pending_feature_changes"`
	PendingGuardedChanges OptUint     `json:"pending_guarded_changes"`
	OldestRequestAt       OptDateTime `json:"oldest_request_at"`
}

// GetProjectID returns the value of ProjectID.
func (s *PendingSummary) GetProjectID() OptUUID {
	return s.ProjectID
}

// GetProjectName returns the value of ProjectName.
func (s *PendingSummary) GetProjectName() OptString {
	return s.ProjectName
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *PendingSummary) GetEnvironmentID() OptUUID {
	return s.EnvironmentID
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *PendingSummary) GetEnvironmentKey() OptString {
	return s.EnvironmentKey
}

// GetTotalPending returns the value of TotalPending.
func (s *PendingSummary) GetTotalPending() OptUint {
	return s.TotalPending
}

// GetPendingFeatureChanges returns the value of PendingFeatureChanges.
func (s *PendingSummary) GetPendingFeatureChanges() OptUint {
	return s.PendingFeatureChanges
}

// GetPendingGuardedChanges returns the value of PendingGuardedChanges.
func (s *PendingSummary) GetPendingGuardedChanges() OptUint {
	return s.PendingGuardedChanges
}

// GetOldestRequestAt returns the value of OldestRequestAt.
func (s *PendingSummary) GetOldestRequestAt() OptDateTime {
	return s.OldestRequestAt
}

// SetProjectID sets the value of ProjectID.
func (s *PendingSummary) SetProjectID(val OptUUID) {
	s.ProjectID = val
}

// SetProjectName sets the value of ProjectName.
func (s *PendingSummary) SetProjectName(val OptString) {
	s.ProjectName = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *PendingSummary) SetEnvironmentID(val OptUUID) {
	s.EnvironmentID = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *PendingSummary) SetEnvironmentKey(val OptString) {
	s.EnvironmentKey = val
}

// SetTotalPending sets the value of TotalPending.
func (s *PendingSummary) SetTotalPending(val OptUint) {
	s.TotalPending = val
}

// SetPendingFeatureChanges sets the value of PendingFeatureChanges.
func (s *PendingSummary) SetPendingFeatureChanges(val OptUint) {
	s.PendingFeatureChanges = val
}

// SetPendingGuardedChanges sets the value of PendingGuardedChanges.
func (s *PendingSummary) SetPendingGuardedChanges(val OptUint) {
	s.PendingGuardedChanges = val
}

// SetOldestRequestAt sets the value of OldestRequestAt.
func (s *PendingSummary) SetOldestRequestAt(val OptDateTime) {
	s.OldestRequestAt = val
}

// Ref: #/components/schemas/Permission
type Permission struct {
	ID   uuid.UUID `json:"id"`
	Key  string    `json:"key"`
	Name string    `json:"name"`
}

// GetID returns the value of ID.
func (s *Permission) GetID() uuid.UUID {
	return s.ID
}

// GetKey returns the value of Key.
func (s *Permission) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *Permission) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *Permission) SetID(val uuid.UUID) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *Permission) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *Permission) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/Project
type Project struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
}

// GetID returns the value of ID.
func (s *Project) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Project) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Project) GetDescription() string {
	return s.Description
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Project) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Project) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Project) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Project) SetDescription(val string) {
	s.Description = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Project) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/ProjectHealth
type ProjectHealth struct {
	ProjectID                  OptUUID                      `json:"project_id"`
	ProjectName                OptString                    `json:"project_name"`
	EnvironmentID              OptUUID                      `json:"environment_id"`
	EnvironmentKey             OptString                    `json:"environment_key"`
	TotalFeatures              OptUint                      `json:"total_features"`
	EnabledFeatures            OptUint                      `json:"enabled_features"`
	DisabledFeatures           OptUint                      `json:"disabled_features"`
	AutoDisableManagedFeatures OptUint                      `json:"auto_disable_managed_features"`
	UncategorizedFeatures      OptUint                      `json:"uncategorized_features"`
	GuardedFeatures            OptUint                      `json:"guarded_features"`
	PendingFeatures            OptUint                      `json:"pending_features"`
	PendingGuardedFeatures     OptUint                      `json:"pending_guarded_features"`
	HealthStatus               OptProjectHealthHealthStatus `json:"health_status"`
}

// GetProjectID returns the value of ProjectID.
func (s *ProjectHealth) GetProjectID() OptUUID {
	return s.ProjectID
}

// GetProjectName returns the value of ProjectName.
func (s *ProjectHealth) GetProjectName() OptString {
	return s.ProjectName
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *ProjectHealth) GetEnvironmentID() OptUUID {
	return s.EnvironmentID
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *ProjectHealth) GetEnvironmentKey() OptString {
	return s.EnvironmentKey
}

// GetTotalFeatures returns the value of TotalFeatures.
func (s *ProjectHealth) GetTotalFeatures() OptUint {
	return s.TotalFeatures
}

// GetEnabledFeatures returns the value of EnabledFeatures.
func (s *ProjectHealth) GetEnabledFeatures() OptUint {
	return s.EnabledFeatures
}

// GetDisabledFeatures returns the value of DisabledFeatures.
func (s *ProjectHealth) GetDisabledFeatures() OptUint {
	return s.DisabledFeatures
}

// GetAutoDisableManagedFeatures returns the value of AutoDisableManagedFeatures.
func (s *ProjectHealth) GetAutoDisableManagedFeatures() OptUint {
	return s.AutoDisableManagedFeatures
}

// GetUncategorizedFeatures returns the value of UncategorizedFeatures.
func (s *ProjectHealth) GetUncategorizedFeatures() OptUint {
	return s.UncategorizedFeatures
}

// GetGuardedFeatures returns the value of GuardedFeatures.
func (s *ProjectHealth) GetGuardedFeatures() OptUint {
	return s.GuardedFeatures
}

// GetPendingFeatures returns the value of PendingFeatures.
func (s *ProjectHealth) GetPendingFeatures() OptUint {
	return s.PendingFeatures
}

// GetPendingGuardedFeatures returns the value of PendingGuardedFeatures.
func (s *ProjectHealth) GetPendingGuardedFeatures() OptUint {
	return s.PendingGuardedFeatures
}

// GetHealthStatus returns the value of HealthStatus.
func (s *ProjectHealth) GetHealthStatus() OptProjectHealthHealthStatus {
	return s.HealthStatus
}

// SetProjectID sets the value of ProjectID.
func (s *ProjectHealth) SetProjectID(val OptUUID) {
	s.ProjectID = val
}

// SetProjectName sets the value of ProjectName.
func (s *ProjectHealth) SetProjectName(val OptString) {
	s.ProjectName = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *ProjectHealth) SetEnvironmentID(val OptUUID) {
	s.EnvironmentID = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *ProjectHealth) SetEnvironmentKey(val OptString) {
	s.EnvironmentKey = val
}

// SetTotalFeatures sets the value of TotalFeatures.
func (s *ProjectHealth) SetTotalFeatures(val OptUint) {
	s.TotalFeatures = val
}

// SetEnabledFeatures sets the value of EnabledFeatures.
func (s *ProjectHealth) SetEnabledFeatures(val OptUint) {
	s.EnabledFeatures = val
}

// SetDisabledFeatures sets the value of DisabledFeatures.
func (s *ProjectHealth) SetDisabledFeatures(val OptUint) {
	s.DisabledFeatures = val
}

// SetAutoDisableManagedFeatures sets the value of AutoDisableManagedFeatures.
func (s *ProjectHealth) SetAutoDisableManagedFeatures(val OptUint) {
	s.AutoDisableManagedFeatures = val
}

// SetUncategorizedFeatures sets the value of UncategorizedFeatures.
func (s *ProjectHealth) SetUncategorizedFeatures(val OptUint) {
	s.UncategorizedFeatures = val
}

// SetGuardedFeatures sets the value of GuardedFeatures.
func (s *ProjectHealth) SetGuardedFeatures(val OptUint) {
	s.GuardedFeatures = val
}

// SetPendingFeatures sets the value of PendingFeatures.
func (s *ProjectHealth) SetPendingFeatures(val OptUint) {
	s.PendingFeatures = val
}

// SetPendingGuardedFeatures sets the value of PendingGuardedFeatures.
func (s *ProjectHealth) SetPendingGuardedFeatures(val OptUint) {
	s.PendingGuardedFeatures = val
}

// SetHealthStatus sets the value of HealthStatus.
func (s *ProjectHealth) SetHealthStatus(val OptProjectHealthHealthStatus) {
	s.HealthStatus = val
}

type ProjectHealthHealthStatus string

const (
	ProjectHealthHealthStatusGreen  ProjectHealthHealthStatus = "green"
	ProjectHealthHealthStatusYellow ProjectHealthHealthStatus = "yellow"
	ProjectHealthHealthStatusRed    ProjectHealthHealthStatus = "red"
)

// AllValues returns all ProjectHealthHealthStatus values.
func (ProjectHealthHealthStatus) AllValues() []ProjectHealthHealthStatus {
	return []ProjectHealthHealthStatus{
		ProjectHealthHealthStatusGreen,
		ProjectHealthHealthStatusYellow,
		ProjectHealthHealthStatusRed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectHealthHealthStatus) MarshalText() ([]byte, error) {
	switch s {
	case ProjectHealthHealthStatusGreen:
		return []byte(s), nil
	case ProjectHealthHealthStatusYellow:
		return []byte(s), nil
	case ProjectHealthHealthStatusRed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectHealthHealthStatus) UnmarshalText(data []byte) error {
	switch ProjectHealthHealthStatus(data) {
	case ProjectHealthHealthStatusGreen:
		*s = ProjectHealthHealthStatusGreen
		return nil
	case ProjectHealthHealthStatusYellow:
		*s = ProjectHealthHealthStatusYellow
		return nil
	case ProjectHealthHealthStatusRed:
		*s = ProjectHealthHealthStatusRed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ProjectResponse
type ProjectResponse struct {
	Project Project `json:"project"`
}

// GetProject returns the value of Project.
func (s *ProjectResponse) GetProject() Project {
	return s.Project
}

// SetProject sets the value of Project.
func (s *ProjectResponse) SetProject(val Project) {
	s.Project = val
}

func (*ProjectResponse) getProjectRes()    {}
func (*ProjectResponse) updateProjectRes() {}

// Ref: #/components/schemas/ProjectSetting
type ProjectSetting struct {
	ID        int                 `json:"id"`
	ProjectID string              `json:"project_id"`
	Name      string              `json:"name"`
	Value     ProjectSettingValue `json:"value"`
	CreatedAt time.Time           `json:"created_at"`
	UpdatedAt time.Time           `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *ProjectSetting) GetID() int {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *ProjectSetting) GetProjectID() string {
	return s.ProjectID
}

// GetName returns the value of Name.
func (s *ProjectSetting) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *ProjectSetting) GetValue() ProjectSettingValue {
	return s.Value
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProjectSetting) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProjectSetting) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *ProjectSetting) SetID(val int) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *ProjectSetting) SetProjectID(val string) {
	s.ProjectID = val
}

// SetName sets the value of Name.
func (s *ProjectSetting) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *ProjectSetting) SetValue(val ProjectSettingValue) {
	s.Value = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProjectSetting) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProjectSetting) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*ProjectSetting) createProjectSettingRes() {}
func (*ProjectSetting) getProjectSettingRes()    {}
func (*ProjectSetting) updateProjectSettingRes() {}

type ProjectSettingValue struct{}

// Ref: #/components/schemas/ProjectTag
type ProjectTag struct {
	ID          uuid.UUID    `json:"id"`
	ProjectID   uuid.UUID    `json:"project_id"`
	CategoryID  OptNilUUID   `json:"category_id"`
	Name        string       `json:"name"`
	Slug        string       `json:"slug"`
	Description OptNilString `json:"description"`
	Color       OptNilString `json:"color"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   time.Time    `json:"updated_at"`
	// Category this tag belongs to.
	Category OptCategory `json:"category"`
}

// GetID returns the value of ID.
func (s *ProjectTag) GetID() uuid.UUID {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *ProjectTag) GetProjectID() uuid.UUID {
	return s.ProjectID
}

// GetCategoryID returns the value of CategoryID.
func (s *ProjectTag) GetCategoryID() OptNilUUID {
	return s.CategoryID
}

// GetName returns the value of Name.
func (s *ProjectTag) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *ProjectTag) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *ProjectTag) GetDescription() OptNilString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *ProjectTag) GetColor() OptNilString {
	return s.Color
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProjectTag) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProjectTag) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetCategory returns the value of Category.
func (s *ProjectTag) GetCategory() OptCategory {
	return s.Category
}

// SetID sets the value of ID.
func (s *ProjectTag) SetID(val uuid.UUID) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *ProjectTag) SetProjectID(val uuid.UUID) {
	s.ProjectID = val
}

// SetCategoryID sets the value of CategoryID.
func (s *ProjectTag) SetCategoryID(val OptNilUUID) {
	s.CategoryID = val
}

// SetName sets the value of Name.
func (s *ProjectTag) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *ProjectTag) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *ProjectTag) SetDescription(val OptNilString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *ProjectTag) SetColor(val OptNilString) {
	s.Color = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProjectTag) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProjectTag) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetCategory sets the value of Category.
func (s *ProjectTag) SetCategory(val OptCategory) {
	s.Category = val
}

// Ref: #/components/schemas/ProjectTagResponse
type ProjectTagResponse struct {
	Tag ProjectTag `json:"tag"`
}

// GetTag returns the value of Tag.
func (s *ProjectTagResponse) GetTag() ProjectTag {
	return s.Tag
}

// SetTag sets the value of Tag.
func (s *ProjectTagResponse) SetTag(val ProjectTag) {
	s.Tag = val
}

func (*ProjectTagResponse) createProjectTagRes() {}
func (*ProjectTagResponse) getProjectTagRes()    {}
func (*ProjectTagResponse) updateProjectTagRes() {}

// Ref: #/components/schemas/RecentActivity
type RecentActivity struct {
	ProjectID      OptUUID                     `json:"project_id"`
	EnvironmentID  OptUUID                     `json:"environment_id"`
	EnvironmentKey OptString                   `json:"environment_key"`
	ProjectName    OptString                   `json:"project_name"`
	RequestID      OptUUID                     `json:"request_id"`
	Actor          OptString                   `json:"actor"`
	CreatedAt      OptDateTime                 `json:"created_at"`
	Status         OptRecentActivityStatus     `json:"status"`
	Changes        []RecentActivityChangesItem `json:"changes"`
}

// GetProjectID returns the value of ProjectID.
func (s *RecentActivity) GetProjectID() OptUUID {
	return s.ProjectID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *RecentActivity) GetEnvironmentID() OptUUID {
	return s.EnvironmentID
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *RecentActivity) GetEnvironmentKey() OptString {
	return s.EnvironmentKey
}

// GetProjectName returns the value of ProjectName.
func (s *RecentActivity) GetProjectName() OptString {
	return s.ProjectName
}

// GetRequestID returns the value of RequestID.
func (s *RecentActivity) GetRequestID() OptUUID {
	return s.RequestID
}

// GetActor returns the value of Actor.
func (s *RecentActivity) GetActor() OptString {
	return s.Actor
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RecentActivity) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetStatus returns the value of Status.
func (s *RecentActivity) GetStatus() OptRecentActivityStatus {
	return s.Status
}

// GetChanges returns the value of Changes.
func (s *RecentActivity) GetChanges() []RecentActivityChangesItem {
	return s.Changes
}

// SetProjectID sets the value of ProjectID.
func (s *RecentActivity) SetProjectID(val OptUUID) {
	s.ProjectID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *RecentActivity) SetEnvironmentID(val OptUUID) {
	s.EnvironmentID = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *RecentActivity) SetEnvironmentKey(val OptString) {
	s.EnvironmentKey = val
}

// SetProjectName sets the value of ProjectName.
func (s *RecentActivity) SetProjectName(val OptString) {
	s.ProjectName = val
}

// SetRequestID sets the value of RequestID.
func (s *RecentActivity) SetRequestID(val OptUUID) {
	s.RequestID = val
}

// SetActor sets the value of Actor.
func (s *RecentActivity) SetActor(val OptString) {
	s.Actor = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RecentActivity) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetStatus sets the value of Status.
func (s *RecentActivity) SetStatus(val OptRecentActivityStatus) {
	s.Status = val
}

// SetChanges sets the value of Changes.
func (s *RecentActivity) SetChanges(val []RecentActivityChangesItem) {
	s.Changes = val
}

type RecentActivityChangesItem struct {
	Entity   OptString `json:"entity"`
	EntityID OptUUID   `json:"entity_id"`
	Action   OptString `json:"action"`
}

// GetEntity returns the value of Entity.
func (s *RecentActivityChangesItem) GetEntity() OptString {
	return s.Entity
}

// GetEntityID returns the value of EntityID.
func (s *RecentActivityChangesItem) GetEntityID() OptUUID {
	return s.EntityID
}

// GetAction returns the value of Action.
func (s *RecentActivityChangesItem) GetAction() OptString {
	return s.Action
}

// SetEntity sets the value of Entity.
func (s *RecentActivityChangesItem) SetEntity(val OptString) {
	s.Entity = val
}

// SetEntityID sets the value of EntityID.
func (s *RecentActivityChangesItem) SetEntityID(val OptUUID) {
	s.EntityID = val
}

// SetAction sets the value of Action.
func (s *RecentActivityChangesItem) SetAction(val OptString) {
	s.Action = val
}

type RecentActivityStatus string

const (
	RecentActivityStatusApplied  RecentActivityStatus = "applied"
	RecentActivityStatusPending  RecentActivityStatus = "pending"
	RecentActivityStatusRejected RecentActivityStatus = "rejected"
)

// AllValues returns all RecentActivityStatus values.
func (RecentActivityStatus) AllValues() []RecentActivityStatus {
	return []RecentActivityStatus{
		RecentActivityStatusApplied,
		RecentActivityStatusPending,
		RecentActivityStatusRejected,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecentActivityStatus) MarshalText() ([]byte, error) {
	switch s {
	case RecentActivityStatusApplied:
		return []byte(s), nil
	case RecentActivityStatusPending:
		return []byte(s), nil
	case RecentActivityStatusRejected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecentActivityStatus) UnmarshalText(data []byte) error {
	switch RecentActivityStatus(data) {
	case RecentActivityStatusApplied:
		*s = RecentActivityStatusApplied
		return nil
	case RecentActivityStatusPending:
		*s = RecentActivityStatusPending
		return nil
	case RecentActivityStatusRejected:
		*s = RecentActivityStatusRejected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RefreshTokenRequest
type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token"`
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshTokenRequest) GetRefreshToken() string {
	return s.RefreshToken
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshTokenRequest) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// Ref: #/components/schemas/RefreshTokenResponse
type RefreshTokenResponse struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresIn    int    `json:"expires_in"`
}

// GetAccessToken returns the value of AccessToken.
func (s *RefreshTokenResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshTokenResponse) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *RefreshTokenResponse) GetExpiresIn() int {
	return s.ExpiresIn
}

// SetAccessToken sets the value of AccessToken.
func (s *RefreshTokenResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshTokenResponse) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *RefreshTokenResponse) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

func (*RefreshTokenResponse) refreshTokenRes() {}

// Ref: #/components/schemas/RejectPendingChangeRequest
type RejectPendingChangeRequest struct {
	RejectedBy string `json:"rejected_by"`
	Reason     string `json:"reason"`
}

// GetRejectedBy returns the value of RejectedBy.
func (s *RejectPendingChangeRequest) GetRejectedBy() string {
	return s.RejectedBy
}

// GetReason returns the value of Reason.
func (s *RejectPendingChangeRequest) GetReason() string {
	return s.Reason
}

// SetRejectedBy sets the value of RejectedBy.
func (s *RejectPendingChangeRequest) SetRejectedBy(val string) {
	s.RejectedBy = val
}

// SetReason sets the value of Reason.
func (s *RejectPendingChangeRequest) SetReason(val string) {
	s.Reason = val
}

// RemoveFeatureTagNoContent is response for RemoveFeatureTag operation.
type RemoveFeatureTagNoContent struct{}

func (*RemoveFeatureTagNoContent) removeFeatureTagRes() {}

// ResetPasswordNoContent is response for ResetPassword operation.
type ResetPasswordNoContent struct{}

func (*ResetPasswordNoContent) resetPasswordRes() {}

// Ref: #/components/schemas/ResetPasswordRequest
type ResetPasswordRequest struct {
	Token       string `json:"token"`
	NewPassword string `json:"new_password"`
}

// GetToken returns the value of Token.
func (s *ResetPasswordRequest) GetToken() string {
	return s.Token
}

// GetNewPassword returns the value of NewPassword.
func (s *ResetPasswordRequest) GetNewPassword() string {
	return s.NewPassword
}

// SetToken sets the value of Token.
func (s *ResetPasswordRequest) SetToken(val string) {
	s.Token = val
}

// SetNewPassword sets the value of NewPassword.
func (s *ResetPasswordRequest) SetNewPassword(val string) {
	s.NewPassword = val
}

// Ref: #/components/schemas/RiskyFeature
type RiskyFeature struct {
	ProjectID      OptUUID   `json:"project_id"`
	ProjectName    OptString `json:"project_name"`
	EnvironmentID  OptUUID   `json:"environment_id"`
	EnvironmentKey OptString `json:"environment_key"`
	FeatureID      OptUUID   `json:"feature_id"`
	FeatureName    OptString `json:"feature_name"`
	Enabled        OptBool   `json:"enabled"`
	HasPending     OptBool   `json:"has_pending"`
	RiskyTags      OptString `json:"risky_tags"`
}

// GetProjectID returns the value of ProjectID.
func (s *RiskyFeature) GetProjectID() OptUUID {
	return s.ProjectID
}

// GetProjectName returns the value of ProjectName.
func (s *RiskyFeature) GetProjectName() OptString {
	return s.ProjectName
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *RiskyFeature) GetEnvironmentID() OptUUID {
	return s.EnvironmentID
}

// GetEnvironmentKey returns the value of EnvironmentKey.
func (s *RiskyFeature) GetEnvironmentKey() OptString {
	return s.EnvironmentKey
}

// GetFeatureID returns the value of FeatureID.
func (s *RiskyFeature) GetFeatureID() OptUUID {
	return s.FeatureID
}

// GetFeatureName returns the value of FeatureName.
func (s *RiskyFeature) GetFeatureName() OptString {
	return s.FeatureName
}

// GetEnabled returns the value of Enabled.
func (s *RiskyFeature) GetEnabled() OptBool {
	return s.Enabled
}

// GetHasPending returns the value of HasPending.
func (s *RiskyFeature) GetHasPending() OptBool {
	return s.HasPending
}

// GetRiskyTags returns the value of RiskyTags.
func (s *RiskyFeature) GetRiskyTags() OptString {
	return s.RiskyTags
}

// SetProjectID sets the value of ProjectID.
func (s *RiskyFeature) SetProjectID(val OptUUID) {
	s.ProjectID = val
}

// SetProjectName sets the value of ProjectName.
func (s *RiskyFeature) SetProjectName(val OptString) {
	s.ProjectName = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *RiskyFeature) SetEnvironmentID(val OptUUID) {
	s.EnvironmentID = val
}

// SetEnvironmentKey sets the value of EnvironmentKey.
func (s *RiskyFeature) SetEnvironmentKey(val OptString) {
	s.EnvironmentKey = val
}

// SetFeatureID sets the value of FeatureID.
func (s *RiskyFeature) SetFeatureID(val OptUUID) {
	s.FeatureID = val
}

// SetFeatureName sets the value of FeatureName.
func (s *RiskyFeature) SetFeatureName(val OptString) {
	s.FeatureName = val
}

// SetEnabled sets the value of Enabled.
func (s *RiskyFeature) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetHasPending sets the value of HasPending.
func (s *RiskyFeature) SetHasPending(val OptBool) {
	s.HasPending = val
}

// SetRiskyTags sets the value of RiskyTags.
func (s *RiskyFeature) SetRiskyTags(val OptString) {
	s.RiskyTags = val
}

// Ref: #/components/schemas/Role
type Role struct {
	ID          uuid.UUID `json:"id"`
	Key         string    `json:"key"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

// GetID returns the value of ID.
func (s *Role) GetID() uuid.UUID {
	return s.ID
}

// GetKey returns the value of Key.
func (s *Role) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *Role) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Role) GetDescription() string {
	return s.Description
}

// SetID sets the value of ID.
func (s *Role) SetID(val uuid.UUID) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *Role) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *Role) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Role) SetDescription(val string) {
	s.Description = val
}

// Ref: #/components/schemas/Rule
type Rule struct {
	ID            string                  `json:"id"`
	FeatureID     string                  `json:"feature_id"`
	Conditions    RuleConditionExpression `json:"conditions"`
	SegmentID     OptString               `json:"segment_id"`
	IsCustomized  bool                    `json:"is_customized"`
	Action        RuleAction              `json:"action"`
	FlagVariantID OptString               `json:"flag_variant_id"`
	Priority      int                     `json:"priority"`
	CreatedAt     time.Time               `json:"created_at"`
}

// GetID returns the value of ID.
func (s *Rule) GetID() string {
	return s.ID
}

// GetFeatureID returns the value of FeatureID.
func (s *Rule) GetFeatureID() string {
	return s.FeatureID
}

// GetConditions returns the value of Conditions.
func (s *Rule) GetConditions() RuleConditionExpression {
	return s.Conditions
}

// GetSegmentID returns the value of SegmentID.
func (s *Rule) GetSegmentID() OptString {
	return s.SegmentID
}

// GetIsCustomized returns the value of IsCustomized.
func (s *Rule) GetIsCustomized() bool {
	return s.IsCustomized
}

// GetAction returns the value of Action.
func (s *Rule) GetAction() RuleAction {
	return s.Action
}

// GetFlagVariantID returns the value of FlagVariantID.
func (s *Rule) GetFlagVariantID() OptString {
	return s.FlagVariantID
}

// GetPriority returns the value of Priority.
func (s *Rule) GetPriority() int {
	return s.Priority
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Rule) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Rule) SetID(val string) {
	s.ID = val
}

// SetFeatureID sets the value of FeatureID.
func (s *Rule) SetFeatureID(val string) {
	s.FeatureID = val
}

// SetConditions sets the value of Conditions.
func (s *Rule) SetConditions(val RuleConditionExpression) {
	s.Conditions = val
}

// SetSegmentID sets the value of SegmentID.
func (s *Rule) SetSegmentID(val OptString) {
	s.SegmentID = val
}

// SetIsCustomized sets the value of IsCustomized.
func (s *Rule) SetIsCustomized(val bool) {
	s.IsCustomized = val
}

// SetAction sets the value of Action.
func (s *Rule) SetAction(val RuleAction) {
	s.Action = val
}

// SetFlagVariantID sets the value of FlagVariantID.
func (s *Rule) SetFlagVariantID(val OptString) {
	s.FlagVariantID = val
}

// SetPriority sets the value of Priority.
func (s *Rule) SetPriority(val int) {
	s.Priority = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Rule) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Type of rule action.
// Ref: #/components/schemas/RuleAction
type RuleAction string

const (
	RuleActionAssign  RuleAction = "assign"
	RuleActionInclude RuleAction = "include"
	RuleActionExclude RuleAction = "exclude"
)

// AllValues returns all RuleAction values.
func (RuleAction) AllValues() []RuleAction {
	return []RuleAction{
		RuleActionAssign,
		RuleActionInclude,
		RuleActionExclude,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleAction) MarshalText() ([]byte, error) {
	switch s {
	case RuleActionAssign:
		return []byte(s), nil
	case RuleActionInclude:
		return []byte(s), nil
	case RuleActionExclude:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleAction) UnmarshalText(data []byte) error {
	switch RuleAction(data) {
	case RuleActionAssign:
		*s = RuleActionAssign
		return nil
	case RuleActionInclude:
		*s = RuleActionInclude
		return nil
	case RuleActionExclude:
		*s = RuleActionExclude
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RuleAttribute string

// Ref: #/components/schemas/RuleAttributeEntity
type RuleAttributeEntity struct {
	Name        string    `json:"name"`
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *RuleAttributeEntity) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *RuleAttributeEntity) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *RuleAttributeEntity) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *RuleAttributeEntity) SetDescription(val OptString) {
	s.Description = val
}

// Single condition item.
// Ref: #/components/schemas/RuleCondition
type RuleCondition struct {
	Attribute RuleAttribute `json:"attribute"`
	Operator  RuleOperator  `json:"operator"`
	Value     jx.Raw        `json:"value"`
}

// GetAttribute returns the value of Attribute.
func (s *RuleCondition) GetAttribute() RuleAttribute {
	return s.Attribute
}

// GetOperator returns the value of Operator.
func (s *RuleCondition) GetOperator() RuleOperator {
	return s.Operator
}

// GetValue returns the value of Value.
func (s *RuleCondition) GetValue() jx.Raw {
	return s.Value
}

// SetAttribute sets the value of Attribute.
func (s *RuleCondition) SetAttribute(val RuleAttribute) {
	s.Attribute = val
}

// SetOperator sets the value of Operator.
func (s *RuleCondition) SetOperator(val RuleOperator) {
	s.Operator = val
}

// SetValue sets the value of Value.
func (s *RuleCondition) SetValue(val jx.Raw) {
	s.Value = val
}

// Boolean expression tree for conditions.
// Ref: #/components/schemas/RuleConditionExpression
type RuleConditionExpression struct {
	Condition OptRuleCondition      `json:"condition"`
	Group     OptRuleConditionGroup `json:"group"`
}

// GetCondition returns the value of Condition.
func (s *RuleConditionExpression) GetCondition() OptRuleCondition {
	return s.Condition
}

// GetGroup returns the value of Group.
func (s *RuleConditionExpression) GetGroup() OptRuleConditionGroup {
	return s.Group
}

// SetCondition sets the value of Condition.
func (s *RuleConditionExpression) SetCondition(val OptRuleCondition) {
	s.Condition = val
}

// SetGroup sets the value of Group.
func (s *RuleConditionExpression) SetGroup(val OptRuleConditionGroup) {
	s.Group = val
}

// Ref: #/components/schemas/RuleConditionGroup
type RuleConditionGroup struct {
	Operator LogicalOperator           `json:"operator"`
	Children []RuleConditionExpression `json:"children"`
}

// GetOperator returns the value of Operator.
func (s *RuleConditionGroup) GetOperator() LogicalOperator {
	return s.Operator
}

// GetChildren returns the value of Children.
func (s *RuleConditionGroup) GetChildren() []RuleConditionExpression {
	return s.Children
}

// SetOperator sets the value of Operator.
func (s *RuleConditionGroup) SetOperator(val LogicalOperator) {
	s.Operator = val
}

// SetChildren sets the value of Children.
func (s *RuleConditionGroup) SetChildren(val []RuleConditionExpression) {
	s.Children = val
}

// Operator for condition comparison.
// Ref: #/components/schemas/RuleOperator
type RuleOperator string

const (
	RuleOperatorEq         RuleOperator = "eq"
	RuleOperatorNeq        RuleOperator = "neq"
	RuleOperatorIn         RuleOperator = "in"
	RuleOperatorNotIn      RuleOperator = "not_in"
	RuleOperatorGt         RuleOperator = "gt"
	RuleOperatorGte        RuleOperator = "gte"
	RuleOperatorLt         RuleOperator = "lt"
	RuleOperatorLte        RuleOperator = "lte"
	RuleOperatorRegex      RuleOperator = "regex"
	RuleOperatorPercentage RuleOperator = "percentage"
)

// AllValues returns all RuleOperator values.
func (RuleOperator) AllValues() []RuleOperator {
	return []RuleOperator{
		RuleOperatorEq,
		RuleOperatorNeq,
		RuleOperatorIn,
		RuleOperatorNotIn,
		RuleOperatorGt,
		RuleOperatorGte,
		RuleOperatorLt,
		RuleOperatorLte,
		RuleOperatorRegex,
		RuleOperatorPercentage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleOperator) MarshalText() ([]byte, error) {
	switch s {
	case RuleOperatorEq:
		return []byte(s), nil
	case RuleOperatorNeq:
		return []byte(s), nil
	case RuleOperatorIn:
		return []byte(s), nil
	case RuleOperatorNotIn:
		return []byte(s), nil
	case RuleOperatorGt:
		return []byte(s), nil
	case RuleOperatorGte:
		return []byte(s), nil
	case RuleOperatorLt:
		return []byte(s), nil
	case RuleOperatorLte:
		return []byte(s), nil
	case RuleOperatorRegex:
		return []byte(s), nil
	case RuleOperatorPercentage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleOperator) UnmarshalText(data []byte) error {
	switch RuleOperator(data) {
	case RuleOperatorEq:
		*s = RuleOperatorEq
		return nil
	case RuleOperatorNeq:
		*s = RuleOperatorNeq
		return nil
	case RuleOperatorIn:
		*s = RuleOperatorIn
		return nil
	case RuleOperatorNotIn:
		*s = RuleOperatorNotIn
		return nil
	case RuleOperatorGt:
		*s = RuleOperatorGt
		return nil
	case RuleOperatorGte:
		*s = RuleOperatorGte
		return nil
	case RuleOperatorLt:
		*s = RuleOperatorLt
		return nil
	case RuleOperatorLte:
		*s = RuleOperatorLte
		return nil
	case RuleOperatorRegex:
		*s = RuleOperatorRegex
		return nil
	case RuleOperatorPercentage:
		*s = RuleOperatorPercentage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RuleResponse
type RuleResponse struct {
	Rule Rule `json:"rule"`
}

// GetRule returns the value of Rule.
func (s *RuleResponse) GetRule() Rule {
	return s.Rule
}

// SetRule sets the value of Rule.
func (s *RuleResponse) SetRule(val Rule) {
	s.Rule = val
}

func (*RuleResponse) createFeatureRuleRes()         {}
func (*RuleResponse) syncCustomizedFeatureRuleRes() {}

// Ref: #/components/schemas/SSOCallbackRequest
type SSOCallbackRequest struct {
	// Name of the SSO provider.
	Provider string `json:"provider"`
	// Response from SSO provider (code for OIDC, SAML response for SAML).
	Response string `json:"response"`
	// State parameter for CSRF protection.
	State string `json:"state"`
}

// GetProvider returns the value of Provider.
func (s *SSOCallbackRequest) GetProvider() string {
	return s.Provider
}

// GetResponse returns the value of Response.
func (s *SSOCallbackRequest) GetResponse() string {
	return s.Response
}

// GetState returns the value of State.
func (s *SSOCallbackRequest) GetState() string {
	return s.State
}

// SetProvider sets the value of Provider.
func (s *SSOCallbackRequest) SetProvider(val string) {
	s.Provider = val
}

// SetResponse sets the value of Response.
func (s *SSOCallbackRequest) SetResponse(val string) {
	s.Response = val
}

// SetState sets the value of State.
func (s *SSOCallbackRequest) SetState(val string) {
	s.State = val
}

// Ref: #/components/schemas/SSOInitiateResponse
type SSOInitiateResponse struct {
	// URL to redirect user for SSO login.
	RedirectURL string `json:"redirect_url"`
}

// GetRedirectURL returns the value of RedirectURL.
func (s *SSOInitiateResponse) GetRedirectURL() string {
	return s.RedirectURL
}

// SetRedirectURL sets the value of RedirectURL.
func (s *SSOInitiateResponse) SetRedirectURL(val string) {
	s.RedirectURL = val
}

func (*SSOInitiateResponse) sSOInitiateRes() {}

// Ref: #/components/schemas/SSOProvider
type SSOProvider struct {
	// Internal name of the provider.
	Name string `json:"name"`
	// Display name for UI.
	DisplayName string `json:"display_name"`
	// Type of SSO provider.
	Type SSOProviderType `json:"type"`
	// URL to provider icon.
	IconURL OptString `json:"icon_url"`
	// Whether the provider is enabled.
	Enabled bool `json:"enabled"`
}

// GetName returns the value of Name.
func (s *SSOProvider) GetName() string {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *SSOProvider) GetDisplayName() string {
	return s.DisplayName
}

// GetType returns the value of Type.
func (s *SSOProvider) GetType() SSOProviderType {
	return s.Type
}

// GetIconURL returns the value of IconURL.
func (s *SSOProvider) GetIconURL() OptString {
	return s.IconURL
}

// GetEnabled returns the value of Enabled.
func (s *SSOProvider) GetEnabled() bool {
	return s.Enabled
}

// SetName sets the value of Name.
func (s *SSOProvider) SetName(val string) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *SSOProvider) SetDisplayName(val string) {
	s.DisplayName = val
}

// SetType sets the value of Type.
func (s *SSOProvider) SetType(val SSOProviderType) {
	s.Type = val
}

// SetIconURL sets the value of IconURL.
func (s *SSOProvider) SetIconURL(val OptString) {
	s.IconURL = val
}

// SetEnabled sets the value of Enabled.
func (s *SSOProvider) SetEnabled(val bool) {
	s.Enabled = val
}

// Type of SSO provider.
type SSOProviderType string

const (
	SSOProviderTypeSaml SSOProviderType = "saml"
)

// AllValues returns all SSOProviderType values.
func (SSOProviderType) AllValues() []SSOProviderType {
	return []SSOProviderType{
		SSOProviderTypeSaml,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SSOProviderType) MarshalText() ([]byte, error) {
	switch s {
	case SSOProviderTypeSaml:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SSOProviderType) UnmarshalText(data []byte) error {
	switch SSOProviderType(data) {
	case SSOProviderTypeSaml:
		*s = SSOProviderTypeSaml
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SSOProvidersResponse
type SSOProvidersResponse struct {
	Providers []SSOProvider `json:"providers"`
}

// GetProviders returns the value of Providers.
func (s *SSOProvidersResponse) GetProviders() []SSOProvider {
	return s.Providers
}

// SetProviders sets the value of Providers.
func (s *SSOProvidersResponse) SetProviders(val []SSOProvider) {
	s.Providers = val
}

func (*SSOProvidersResponse) getSSOProvidersRes() {}

// Ref: #/components/schemas/Segment
type Segment struct {
	ID          string                  `json:"id"`
	ProjectID   string                  `json:"project_id"`
	Name        string                  `json:"name"`
	Description OptNilString            `json:"description"`
	Conditions  RuleConditionExpression `json:"conditions"`
	CreatedAt   time.Time               `json:"created_at"`
	UpdatedAt   time.Time               `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Segment) GetID() string {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *Segment) GetProjectID() string {
	return s.ProjectID
}

// GetName returns the value of Name.
func (s *Segment) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Segment) GetDescription() OptNilString {
	return s.Description
}

// GetConditions returns the value of Conditions.
func (s *Segment) GetConditions() RuleConditionExpression {
	return s.Conditions
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Segment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Segment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Segment) SetID(val string) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *Segment) SetProjectID(val string) {
	s.ProjectID = val
}

// SetName sets the value of Name.
func (s *Segment) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Segment) SetDescription(val OptNilString) {
	s.Description = val
}

// SetConditions sets the value of Conditions.
func (s *Segment) SetConditions(val RuleConditionExpression) {
	s.Conditions = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Segment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Segment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/SegmentResponse
type SegmentResponse struct {
	Segment Segment `json:"segment"`
}

// GetSegment returns the value of Segment.
func (s *SegmentResponse) GetSegment() Segment {
	return s.Segment
}

// SetSegment sets the value of Segment.
func (s *SegmentResponse) SetSegment(val Segment) {
	s.Segment = val
}

func (*SegmentResponse) createProjectSegmentRes() {}
func (*SegmentResponse) getSegmentRes()           {}
func (*SegmentResponse) updateSegmentRes()        {}

// Send2FACodeNoContent is response for Send2FACode operation.
type Send2FACodeNoContent struct{}

func (*Send2FACodeNoContent) send2FACodeRes() {}

// SendTestNotificationNoContent is response for SendTestNotification operation.
type SendTestNotificationNoContent struct{}

func (*SendTestNotificationNoContent) sendTestNotificationRes() {}

// Ref: #/components/schemas/SetSuperuserStatusRequest
type SetSuperuserStatusRequest struct {
	IsSuperuser bool `json:"is_superuser"`
}

// GetIsSuperuser returns the value of IsSuperuser.
func (s *SetSuperuserStatusRequest) GetIsSuperuser() bool {
	return s.IsSuperuser
}

// SetIsSuperuser sets the value of IsSuperuser.
func (s *SetSuperuserStatusRequest) SetIsSuperuser(val bool) {
	s.IsSuperuser = val
}

// Ref: #/components/schemas/SetUserActiveStatusRequest
type SetUserActiveStatusRequest struct {
	IsActive bool `json:"is_active"`
}

// GetIsActive returns the value of IsActive.
func (s *SetUserActiveStatusRequest) GetIsActive() bool {
	return s.IsActive
}

// SetIsActive sets the value of IsActive.
func (s *SetUserActiveStatusRequest) SetIsActive(val bool) {
	s.IsActive = val
}

// Sort order (ascending or descending).
// Ref: #/components/schemas/SortOrder
type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

// AllValues returns all SortOrder values.
func (SortOrder) AllValues() []SortOrder {
	return []SortOrder{
		SortOrderAsc,
		SortOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SortOrder) MarshalText() ([]byte, error) {
	switch s {
	case SortOrderAsc:
		return []byte(s), nil
	case SortOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SortOrder) UnmarshalText(data []byte) error {
	switch SortOrder(data) {
	case SortOrderAsc:
		*s = SortOrderAsc
		return nil
	case SortOrderDesc:
		*s = SortOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SuccessResponse
type SuccessResponse struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *SuccessResponse) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *SuccessResponse) SetMessage(val OptString) {
	s.Message = val
}

func (*SuccessResponse) approvePendingChangeRes() {}
func (*SuccessResponse) cancelLDAPSyncRes()       {}
func (*SuccessResponse) cancelPendingChangeRes()  {}
func (*SuccessResponse) deleteLDAPConfigRes()     {}
func (*SuccessResponse) rejectPendingChangeRes()  {}

// Ref: #/components/schemas/TestFeatureSchedule
type TestFeatureSchedule struct {
	StartsAt     OptNilDateTime            `json:"starts_at"`
	EndsAt       OptNilDateTime            `json:"ends_at"`
	CronExpr     OptNilString              `json:"cron_expr"`
	Timezone     string                    `json:"timezone"`
	Action       TestFeatureScheduleAction `json:"action"`
	CronDuration OptNilDuration            `json:"cron_duration"`
}

// GetStartsAt returns the value of StartsAt.
func (s *TestFeatureSchedule) GetStartsAt() OptNilDateTime {
	return s.StartsAt
}

// GetEndsAt returns the value of EndsAt.
func (s *TestFeatureSchedule) GetEndsAt() OptNilDateTime {
	return s.EndsAt
}

// GetCronExpr returns the value of CronExpr.
func (s *TestFeatureSchedule) GetCronExpr() OptNilString {
	return s.CronExpr
}

// GetTimezone returns the value of Timezone.
func (s *TestFeatureSchedule) GetTimezone() string {
	return s.Timezone
}

// GetAction returns the value of Action.
func (s *TestFeatureSchedule) GetAction() TestFeatureScheduleAction {
	return s.Action
}

// GetCronDuration returns the value of CronDuration.
func (s *TestFeatureSchedule) GetCronDuration() OptNilDuration {
	return s.CronDuration
}

// SetStartsAt sets the value of StartsAt.
func (s *TestFeatureSchedule) SetStartsAt(val OptNilDateTime) {
	s.StartsAt = val
}

// SetEndsAt sets the value of EndsAt.
func (s *TestFeatureSchedule) SetEndsAt(val OptNilDateTime) {
	s.EndsAt = val
}

// SetCronExpr sets the value of CronExpr.
func (s *TestFeatureSchedule) SetCronExpr(val OptNilString) {
	s.CronExpr = val
}

// SetTimezone sets the value of Timezone.
func (s *TestFeatureSchedule) SetTimezone(val string) {
	s.Timezone = val
}

// SetAction sets the value of Action.
func (s *TestFeatureSchedule) SetAction(val TestFeatureScheduleAction) {
	s.Action = val
}

// SetCronDuration sets the value of CronDuration.
func (s *TestFeatureSchedule) SetCronDuration(val OptNilDuration) {
	s.CronDuration = val
}

type TestFeatureScheduleAction string

const (
	TestFeatureScheduleActionEnable  TestFeatureScheduleAction = "enable"
	TestFeatureScheduleActionDisable TestFeatureScheduleAction = "disable"
)

// AllValues returns all TestFeatureScheduleAction values.
func (TestFeatureScheduleAction) AllValues() []TestFeatureScheduleAction {
	return []TestFeatureScheduleAction{
		TestFeatureScheduleActionEnable,
		TestFeatureScheduleActionDisable,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TestFeatureScheduleAction) MarshalText() ([]byte, error) {
	switch s {
	case TestFeatureScheduleActionEnable:
		return []byte(s), nil
	case TestFeatureScheduleActionDisable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TestFeatureScheduleAction) UnmarshalText(data []byte) error {
	switch TestFeatureScheduleAction(data) {
	case TestFeatureScheduleActionEnable:
		*s = TestFeatureScheduleActionEnable
		return nil
	case TestFeatureScheduleActionDisable:
		*s = TestFeatureScheduleActionDisable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TestFeatureTimelineRequest
type TestFeatureTimelineRequest struct {
	Schedules []TestFeatureSchedule `json:"schedules"`
}

// GetSchedules returns the value of Schedules.
func (s *TestFeatureTimelineRequest) GetSchedules() []TestFeatureSchedule {
	return s.Schedules
}

// SetSchedules sets the value of Schedules.
func (s *TestFeatureTimelineRequest) SetSchedules(val []TestFeatureSchedule) {
	s.Schedules = val
}

// Ref: #/components/schemas/ToggleFeatureRequest
type ToggleFeatureRequest struct {
	Enabled bool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *ToggleFeatureRequest) GetEnabled() bool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *ToggleFeatureRequest) SetEnabled(val bool) {
	s.Enabled = val
}

// Ref: #/components/schemas/TwoFAConfirmRequest
type TwoFAConfirmRequest struct {
	Code string `json:"code"`
}

// GetCode returns the value of Code.
func (s *TwoFAConfirmRequest) GetCode() string {
	return s.Code
}

// SetCode sets the value of Code.
func (s *TwoFAConfirmRequest) SetCode(val string) {
	s.Code = val
}

// Ref: #/components/schemas/TwoFADisableRequest
type TwoFADisableRequest struct {
	EmailCode string `json:"email_code"`
}

// GetEmailCode returns the value of EmailCode.
func (s *TwoFADisableRequest) GetEmailCode() string {
	return s.EmailCode
}

// SetEmailCode sets the value of EmailCode.
func (s *TwoFADisableRequest) SetEmailCode(val string) {
	s.EmailCode = val
}

// Ref: #/components/schemas/TwoFAResetRequest
type TwoFAResetRequest struct {
	EmailCode string `json:"email_code"`
}

// GetEmailCode returns the value of EmailCode.
func (s *TwoFAResetRequest) GetEmailCode() string {
	return s.EmailCode
}

// SetEmailCode sets the value of EmailCode.
func (s *TwoFAResetRequest) SetEmailCode(val string) {
	s.EmailCode = val
}

// Ref: #/components/schemas/TwoFASetupResponse
type TwoFASetupResponse struct {
	Secret string `json:"secret"`
	QrURL  string `json:"qr_url"`
	// Base64 PNG QR image.
	QrImage string `json:"qr_image"`
}

// GetSecret returns the value of Secret.
func (s *TwoFASetupResponse) GetSecret() string {
	return s.Secret
}

// GetQrURL returns the value of QrURL.
func (s *TwoFASetupResponse) GetQrURL() string {
	return s.QrURL
}

// GetQrImage returns the value of QrImage.
func (s *TwoFASetupResponse) GetQrImage() string {
	return s.QrImage
}

// SetSecret sets the value of Secret.
func (s *TwoFASetupResponse) SetSecret(val string) {
	s.Secret = val
}

// SetQrURL sets the value of QrURL.
func (s *TwoFASetupResponse) SetQrURL(val string) {
	s.QrURL = val
}

// SetQrImage sets the value of QrImage.
func (s *TwoFASetupResponse) SetQrImage(val string) {
	s.QrImage = val
}

func (*TwoFASetupResponse) reset2FARes() {}
func (*TwoFASetupResponse) setup2FARes() {}

// Ref: #/components/schemas/TwoFAVerifyRequest
type TwoFAVerifyRequest struct {
	Code      string    `json:"code"`
	SessionID uuid.UUID `json:"session_id"`
}

// GetCode returns the value of Code.
func (s *TwoFAVerifyRequest) GetCode() string {
	return s.Code
}

// GetSessionID returns the value of SessionID.
func (s *TwoFAVerifyRequest) GetSessionID() uuid.UUID {
	return s.SessionID
}

// SetCode sets the value of Code.
func (s *TwoFAVerifyRequest) SetCode(val string) {
	s.Code = val
}

// SetSessionID sets the value of SessionID.
func (s *TwoFAVerifyRequest) SetSessionID(val uuid.UUID) {
	s.SessionID = val
}

// Ref: #/components/schemas/TwoFAVerifyResponse
type TwoFAVerifyResponse struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresIn    int    `json:"expires_in"`
}

// GetAccessToken returns the value of AccessToken.
func (s *TwoFAVerifyResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *TwoFAVerifyResponse) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *TwoFAVerifyResponse) GetExpiresIn() int {
	return s.ExpiresIn
}

// SetAccessToken sets the value of AccessToken.
func (s *TwoFAVerifyResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *TwoFAVerifyResponse) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *TwoFAVerifyResponse) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

func (*TwoFAVerifyResponse) verify2FARes() {}

// Ref: #/components/schemas/UnreadCountResponse
type UnreadCountResponse struct {
	Count uint `json:"count"`
}

// GetCount returns the value of Count.
func (s *UnreadCountResponse) GetCount() uint {
	return s.Count
}

// SetCount sets the value of Count.
func (s *UnreadCountResponse) SetCount(val uint) {
	s.Count = val
}

func (*UnreadCountResponse) getUnreadNotificationsCountRes() {}

// Ref: #/components/schemas/UpdateCategoryRequest
type UpdateCategoryRequest struct {
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	Description OptString `json:"description"`
	Color       OptString `json:"color"`
}

// GetName returns the value of Name.
func (s *UpdateCategoryRequest) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *UpdateCategoryRequest) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *UpdateCategoryRequest) GetDescription() OptString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *UpdateCategoryRequest) GetColor() OptString {
	return s.Color
}

// SetName sets the value of Name.
func (s *UpdateCategoryRequest) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *UpdateCategoryRequest) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *UpdateCategoryRequest) SetDescription(val OptString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *UpdateCategoryRequest) SetColor(val OptString) {
	s.Color = val
}

// Ref: #/components/schemas/UpdateEnvironmentRequest
type UpdateEnvironmentRequest struct {
	// Human-readable environment name.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *UpdateEnvironmentRequest) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *UpdateEnvironmentRequest) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/UpdateFeatureScheduleRequest
type UpdateFeatureScheduleRequest struct {
	StartsAt OptNilDateTime `json:"starts_at"`
	EndsAt   OptNilDateTime `json:"ends_at"`
	CronExpr OptNilString   `json:"cron_expr"`
	// Duration for cron-based schedules. When cron triggers, feature will be enabled/disabled for this
	// duration. Format: '1h30m', '45m', '2h', etc.
	CronDuration OptNilDuration        `json:"cron_duration"`
	Timezone     string                `json:"timezone"`
	Action       FeatureScheduleAction `json:"action"`
}

// GetStartsAt returns the value of StartsAt.
func (s *UpdateFeatureScheduleRequest) GetStartsAt() OptNilDateTime {
	return s.StartsAt
}

// GetEndsAt returns the value of EndsAt.
func (s *UpdateFeatureScheduleRequest) GetEndsAt() OptNilDateTime {
	return s.EndsAt
}

// GetCronExpr returns the value of CronExpr.
func (s *UpdateFeatureScheduleRequest) GetCronExpr() OptNilString {
	return s.CronExpr
}

// GetCronDuration returns the value of CronDuration.
func (s *UpdateFeatureScheduleRequest) GetCronDuration() OptNilDuration {
	return s.CronDuration
}

// GetTimezone returns the value of Timezone.
func (s *UpdateFeatureScheduleRequest) GetTimezone() string {
	return s.Timezone
}

// GetAction returns the value of Action.
func (s *UpdateFeatureScheduleRequest) GetAction() FeatureScheduleAction {
	return s.Action
}

// SetStartsAt sets the value of StartsAt.
func (s *UpdateFeatureScheduleRequest) SetStartsAt(val OptNilDateTime) {
	s.StartsAt = val
}

// SetEndsAt sets the value of EndsAt.
func (s *UpdateFeatureScheduleRequest) SetEndsAt(val OptNilDateTime) {
	s.EndsAt = val
}

// SetCronExpr sets the value of CronExpr.
func (s *UpdateFeatureScheduleRequest) SetCronExpr(val OptNilString) {
	s.CronExpr = val
}

// SetCronDuration sets the value of CronDuration.
func (s *UpdateFeatureScheduleRequest) SetCronDuration(val OptNilDuration) {
	s.CronDuration = val
}

// SetTimezone sets the value of Timezone.
func (s *UpdateFeatureScheduleRequest) SetTimezone(val string) {
	s.Timezone = val
}

// SetAction sets the value of Action.
func (s *UpdateFeatureScheduleRequest) SetAction(val FeatureScheduleAction) {
	s.Action = val
}

// UpdateLicenseAcceptanceNoContent is response for UpdateLicenseAcceptance operation.
type UpdateLicenseAcceptanceNoContent struct{}

func (*UpdateLicenseAcceptanceNoContent) updateLicenseAcceptanceRes() {}

// Ref: #/components/schemas/UpdateLicenseAcceptanceRequest
type UpdateLicenseAcceptanceRequest struct {
	// Flag indicating whether the user accepts the license agreement.
	Accepted bool `json:"accepted"`
}

// GetAccepted returns the value of Accepted.
func (s *UpdateLicenseAcceptanceRequest) GetAccepted() bool {
	return s.Accepted
}

// SetAccepted sets the value of Accepted.
func (s *UpdateLicenseAcceptanceRequest) SetAccepted(val bool) {
	s.Accepted = val
}

// Ref: #/components/schemas/UpdateMembershipRequest
type UpdateMembershipRequest struct {
	RoleID uuid.UUID `json:"role_id"`
}

// GetRoleID returns the value of RoleID.
func (s *UpdateMembershipRequest) GetRoleID() uuid.UUID {
	return s.RoleID
}

// SetRoleID sets the value of RoleID.
func (s *UpdateMembershipRequest) SetRoleID(val uuid.UUID) {
	s.RoleID = val
}

// Ref: #/components/schemas/UpdateNotificationSettingRequest
type UpdateNotificationSettingRequest struct {
	// Type of notification channel (email, mattermost, slack, etc.).
	Type OptString `json:"type"`
	// Configuration for the notification channel (JSONB in database).
	Config  OptString `json:"config"`
	Enabled OptBool   `json:"enabled"`
}

// GetType returns the value of Type.
func (s *UpdateNotificationSettingRequest) GetType() OptString {
	return s.Type
}

// GetConfig returns the value of Config.
func (s *UpdateNotificationSettingRequest) GetConfig() OptString {
	return s.Config
}

// GetEnabled returns the value of Enabled.
func (s *UpdateNotificationSettingRequest) GetEnabled() OptBool {
	return s.Enabled
}

// SetType sets the value of Type.
func (s *UpdateNotificationSettingRequest) SetType(val OptString) {
	s.Type = val
}

// SetConfig sets the value of Config.
func (s *UpdateNotificationSettingRequest) SetConfig(val OptString) {
	s.Config = val
}

// SetEnabled sets the value of Enabled.
func (s *UpdateNotificationSettingRequest) SetEnabled(val OptBool) {
	s.Enabled = val
}

// Ref: #/components/schemas/UpdateProjectRequest
type UpdateProjectRequest struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *UpdateProjectRequest) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateProjectRequest) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *UpdateProjectRequest) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateProjectRequest) SetDescription(val string) {
	s.Description = val
}

// Ref: #/components/schemas/UpdateProjectSettingRequest
type UpdateProjectSettingRequest struct {
	Value UpdateProjectSettingRequestValue `json:"value"`
}

// GetValue returns the value of Value.
func (s *UpdateProjectSettingRequest) GetValue() UpdateProjectSettingRequestValue {
	return s.Value
}

// SetValue sets the value of Value.
func (s *UpdateProjectSettingRequest) SetValue(val UpdateProjectSettingRequestValue) {
	s.Value = val
}

type UpdateProjectSettingRequestValue struct{}

// Ref: #/components/schemas/UpdateProjectTagRequest
type UpdateProjectTagRequest struct {
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	Description OptString `json:"description"`
	Color       OptString `json:"color"`
	// ID of category to associate with this tag.
	CategoryID OptNilUUID `json:"category_id"`
}

// GetName returns the value of Name.
func (s *UpdateProjectTagRequest) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *UpdateProjectTagRequest) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *UpdateProjectTagRequest) GetDescription() OptString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *UpdateProjectTagRequest) GetColor() OptString {
	return s.Color
}

// GetCategoryID returns the value of CategoryID.
func (s *UpdateProjectTagRequest) GetCategoryID() OptNilUUID {
	return s.CategoryID
}

// SetName sets the value of Name.
func (s *UpdateProjectTagRequest) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *UpdateProjectTagRequest) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *UpdateProjectTagRequest) SetDescription(val OptString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *UpdateProjectTagRequest) SetColor(val OptString) {
	s.Color = val
}

// SetCategoryID sets the value of CategoryID.
func (s *UpdateProjectTagRequest) SetCategoryID(val OptNilUUID) {
	s.CategoryID = val
}

// Ref: #/components/schemas/UpdateSegmentRequest
type UpdateSegmentRequest struct {
	Name        string                  `json:"name"`
	Description OptNilString            `json:"description"`
	Conditions  RuleConditionExpression `json:"conditions"`
}

// GetName returns the value of Name.
func (s *UpdateSegmentRequest) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateSegmentRequest) GetDescription() OptNilString {
	return s.Description
}

// GetConditions returns the value of Conditions.
func (s *UpdateSegmentRequest) GetConditions() RuleConditionExpression {
	return s.Conditions
}

// SetName sets the value of Name.
func (s *UpdateSegmentRequest) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateSegmentRequest) SetDescription(val OptNilString) {
	s.Description = val
}

// SetConditions sets the value of Conditions.
func (s *UpdateSegmentRequest) SetConditions(val RuleConditionExpression) {
	s.Conditions = val
}

// Ref: #/components/schemas/User
type User struct {
	ID            uint   `json:"id"`
	Username      string `json:"username"`
	Email         string `json:"email"`
	IsSuperuser   bool   `json:"is_superuser"`
	IsActive      bool   `json:"is_active"`
	IsExternal    bool   `json:"is_external"`
	IsTmpPassword bool   `json:"is_tmp_password"`
	TwoFaEnabled  bool   `json:"two_fa_enabled"`
	// Flag indicating whether the user has accepted the license agreement.
	LicenseAccepted bool        `json:"license_accepted"`
	CreatedAt       time.Time   `json:"created_at"`
	LastLogin       OptDateTime `json:"last_login"`
	// Map of project_id to list of permission keys for that project. Contains only projects where user
	// has membership.
	ProjectPermissions UserProjectPermissions `json:"project_permissions"`
	// Map of project_id to role object. Contains only projects where user has membership.
	ProjectRoles UserProjectRoles `json:"project_roles"`
}

// GetID returns the value of ID.
func (s *User) GetID() uint {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetIsSuperuser returns the value of IsSuperuser.
func (s *User) GetIsSuperuser() bool {
	return s.IsSuperuser
}

// GetIsActive returns the value of IsActive.
func (s *User) GetIsActive() bool {
	return s.IsActive
}

// GetIsExternal returns the value of IsExternal.
func (s *User) GetIsExternal() bool {
	return s.IsExternal
}

// GetIsTmpPassword returns the value of IsTmpPassword.
func (s *User) GetIsTmpPassword() bool {
	return s.IsTmpPassword
}

// GetTwoFaEnabled returns the value of TwoFaEnabled.
func (s *User) GetTwoFaEnabled() bool {
	return s.TwoFaEnabled
}

// GetLicenseAccepted returns the value of LicenseAccepted.
func (s *User) GetLicenseAccepted() bool {
	return s.LicenseAccepted
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetLastLogin returns the value of LastLogin.
func (s *User) GetLastLogin() OptDateTime {
	return s.LastLogin
}

// GetProjectPermissions returns the value of ProjectPermissions.
func (s *User) GetProjectPermissions() UserProjectPermissions {
	return s.ProjectPermissions
}

// GetProjectRoles returns the value of ProjectRoles.
func (s *User) GetProjectRoles() UserProjectRoles {
	return s.ProjectRoles
}

// SetID sets the value of ID.
func (s *User) SetID(val uint) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetIsSuperuser sets the value of IsSuperuser.
func (s *User) SetIsSuperuser(val bool) {
	s.IsSuperuser = val
}

// SetIsActive sets the value of IsActive.
func (s *User) SetIsActive(val bool) {
	s.IsActive = val
}

// SetIsExternal sets the value of IsExternal.
func (s *User) SetIsExternal(val bool) {
	s.IsExternal = val
}

// SetIsTmpPassword sets the value of IsTmpPassword.
func (s *User) SetIsTmpPassword(val bool) {
	s.IsTmpPassword = val
}

// SetTwoFaEnabled sets the value of TwoFaEnabled.
func (s *User) SetTwoFaEnabled(val bool) {
	s.TwoFaEnabled = val
}

// SetLicenseAccepted sets the value of LicenseAccepted.
func (s *User) SetLicenseAccepted(val bool) {
	s.LicenseAccepted = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetLastLogin sets the value of LastLogin.
func (s *User) SetLastLogin(val OptDateTime) {
	s.LastLogin = val
}

// SetProjectPermissions sets the value of ProjectPermissions.
func (s *User) SetProjectPermissions(val UserProjectPermissions) {
	s.ProjectPermissions = val
}

// SetProjectRoles sets the value of ProjectRoles.
func (s *User) SetProjectRoles(val UserProjectRoles) {
	s.ProjectRoles = val
}

func (*User) getCurrentUserRes()      {}
func (*User) setSuperuserStatusRes()  {}
func (*User) setUserActiveStatusRes() {}

// UserChangeMyPasswordNoContent is response for UserChangeMyPassword operation.
type UserChangeMyPasswordNoContent struct{}

func (*UserChangeMyPasswordNoContent) userChangeMyPasswordRes() {}

// Ref: #/components/schemas/UserNotification
type UserNotification struct {
	ID        uint                    `json:"id"`
	UserID    uint                    `json:"user_id"`
	Type      UserNotificationType    `json:"type"`
	Content   UserNotificationContent `json:"content"`
	IsRead    bool                    `json:"is_read"`
	EmailSent bool                    `json:"email_sent"`
	CreatedAt time.Time               `json:"created_at"`
	UpdatedAt time.Time               `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *UserNotification) GetID() uint {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *UserNotification) GetUserID() uint {
	return s.UserID
}

// GetType returns the value of Type.
func (s *UserNotification) GetType() UserNotificationType {
	return s.Type
}

// GetContent returns the value of Content.
func (s *UserNotification) GetContent() UserNotificationContent {
	return s.Content
}

// GetIsRead returns the value of IsRead.
func (s *UserNotification) GetIsRead() bool {
	return s.IsRead
}

// GetEmailSent returns the value of EmailSent.
func (s *UserNotification) GetEmailSent() bool {
	return s.EmailSent
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserNotification) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserNotification) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *UserNotification) SetID(val uint) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *UserNotification) SetUserID(val uint) {
	s.UserID = val
}

// SetType sets the value of Type.
func (s *UserNotification) SetType(val UserNotificationType) {
	s.Type = val
}

// SetContent sets the value of Content.
func (s *UserNotification) SetContent(val UserNotificationContent) {
	s.Content = val
}

// SetIsRead sets the value of IsRead.
func (s *UserNotification) SetIsRead(val bool) {
	s.IsRead = val
}

// SetEmailSent sets the value of EmailSent.
func (s *UserNotification) SetEmailSent(val bool) {
	s.EmailSent = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserNotification) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserNotification) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

type UserNotificationContent map[string]jx.Raw

func (s *UserNotificationContent) init() UserNotificationContent {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type UserNotificationType string

const (
	UserNotificationTypeProjectAdded   UserNotificationType = "project_added"
	UserNotificationTypeProjectRemoved UserNotificationType = "project_removed"
	UserNotificationTypeRoleChanged    UserNotificationType = "role_changed"
	UserNotificationTypeNeedApprove    UserNotificationType = "need_approve"
)

// AllValues returns all UserNotificationType values.
func (UserNotificationType) AllValues() []UserNotificationType {
	return []UserNotificationType{
		UserNotificationTypeProjectAdded,
		UserNotificationTypeProjectRemoved,
		UserNotificationTypeRoleChanged,
		UserNotificationTypeNeedApprove,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserNotificationType) MarshalText() ([]byte, error) {
	switch s {
	case UserNotificationTypeProjectAdded:
		return []byte(s), nil
	case UserNotificationTypeProjectRemoved:
		return []byte(s), nil
	case UserNotificationTypeRoleChanged:
		return []byte(s), nil
	case UserNotificationTypeNeedApprove:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserNotificationType) UnmarshalText(data []byte) error {
	switch UserNotificationType(data) {
	case UserNotificationTypeProjectAdded:
		*s = UserNotificationTypeProjectAdded
		return nil
	case UserNotificationTypeProjectRemoved:
		*s = UserNotificationTypeProjectRemoved
		return nil
	case UserNotificationTypeRoleChanged:
		*s = UserNotificationTypeRoleChanged
		return nil
	case UserNotificationTypeNeedApprove:
		*s = UserNotificationTypeNeedApprove
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserNotificationsResponse
type UserNotificationsResponse struct {
	Notifications []UserNotification `json:"notifications"`
	Total         int                `json:"total"`
}

// GetNotifications returns the value of Notifications.
func (s *UserNotificationsResponse) GetNotifications() []UserNotification {
	return s.Notifications
}

// GetTotal returns the value of Total.
func (s *UserNotificationsResponse) GetTotal() int {
	return s.Total
}

// SetNotifications sets the value of Notifications.
func (s *UserNotificationsResponse) SetNotifications(val []UserNotification) {
	s.Notifications = val
}

// SetTotal sets the value of Total.
func (s *UserNotificationsResponse) SetTotal(val int) {
	s.Total = val
}

func (*UserNotificationsResponse) getUserNotificationsRes() {}

// Map of project_id to list of permission keys for that project. Contains only projects where user
// has membership.
type UserProjectPermissions map[string][]string

func (s *UserProjectPermissions) init() UserProjectPermissions {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// Map of project_id to role object. Contains only projects where user has membership.
type UserProjectRoles map[string]Role

func (s *UserProjectRoles) init() UserProjectRoles {
	m := *s
	if m == nil {
		m = map[string]Role{}
		*s = m
	}
	return m
}
