// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleBearerAuth handles bearerAuth security.
	HandleBearerAuth(ctx context.Context, operationName OperationName, t BearerAuth) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesBearerAuth = map[string][]string{
	AddFeatureTagOperation:               []string{},
	AddProjectOperation:                  []string{},
	ApprovePendingChangeOperation:        []string{},
	ArchiveProjectOperation:              []string{},
	CancelLDAPSyncOperation:              []string{},
	CancelPendingChangeOperation:         []string{},
	Confirm2FAOperation:                  []string{},
	CreateCategoryOperation:              []string{},
	CreateEnvironmentOperation:           []string{},
	CreateFeatureFlagVariantOperation:    []string{},
	CreateFeatureRuleOperation:           []string{},
	CreateFeatureScheduleOperation:       []string{},
	CreateProjectFeatureOperation:        []string{},
	CreateProjectMembershipOperation:     []string{},
	CreateProjectSegmentOperation:        []string{},
	CreateProjectSettingOperation:        []string{},
	CreateProjectTagOperation:            []string{},
	CreateRuleAttributeOperation:         []string{},
	CreateUserOperation:                  []string{},
	DeleteCategoryOperation:              []string{},
	DeleteEnvironmentOperation:           []string{},
	DeleteFeatureOperation:               []string{},
	DeleteFeatureScheduleOperation:       []string{},
	DeleteLDAPConfigOperation:            []string{},
	DeleteProjectMembershipOperation:     []string{},
	DeleteProjectSettingOperation:        []string{},
	DeleteProjectTagOperation:            []string{},
	DeleteRuleAttributeOperation:         []string{},
	DeleteSegmentOperation:               []string{},
	DeleteUserOperation:                  []string{},
	Disable2FAOperation:                  []string{},
	GetAuditLogEntryOperation:            []string{},
	GetCategoryOperation:                 []string{},
	GetCurrentUserOperation:              []string{},
	GetDashboardOverviewOperation:        []string{},
	GetEnvironmentOperation:              []string{},
	GetFeatureOperation:                  []string{},
	GetFeatureScheduleOperation:          []string{},
	GetFeatureTimelineOperation:          []string{},
	GetLDAPConfigOperation:               []string{},
	GetLDAPStatisticsOperation:           []string{},
	GetLDAPSyncLogDetailsOperation:       []string{},
	GetLDAPSyncLogsOperation:             []string{},
	GetLDAPSyncProgressOperation:         []string{},
	GetLDAPSyncStatusOperation:           []string{},
	GetPendingChangeOperation:            []string{},
	GetProjectOperation:                  []string{},
	GetProjectMembershipOperation:        []string{},
	GetProjectSettingOperation:           []string{},
	GetProjectTagOperation:               []string{},
	GetRolePermissionsOperation:          []string{},
	GetSegmentOperation:                  []string{},
	InitiateTOTPApprovalOperation:        []string{},
	ListAllFeatureSchedulesOperation:     []string{},
	ListCategoriesOperation:              []string{},
	ListFeatureFlagVariantsOperation:     []string{},
	ListFeatureRulesOperation:            []string{},
	ListFeatureSchedulesOperation:        []string{},
	ListFeatureTagsOperation:             []string{},
	ListPendingChangesOperation:          []string{},
	ListPermissionsOperation:             []string{},
	ListProjectAuditLogsOperation:        []string{},
	ListProjectChangesOperation:          []string{},
	ListProjectEnvironmentsOperation:     []string{},
	ListProjectFeaturesOperation:         []string{},
	ListProjectMembershipsOperation:      []string{},
	ListProjectSegmentsOperation:         []string{},
	ListProjectSettingsOperation:         []string{},
	ListProjectTagsOperation:             []string{},
	ListProjectsOperation:                []string{},
	ListRolePermissionsOperation:         []string{},
	ListRolesOperation:                   []string{},
	ListRuleAttributesOperation:          []string{},
	ListSegmentDesyncFeatureIDsOperation: []string{},
	ListUsersOperation:                   []string{},
	RejectPendingChangeOperation:         []string{},
	RemoveFeatureTagOperation:            []string{},
	Reset2FAOperation:                    []string{},
	SetSuperuserStatusOperation:          []string{},
	SetUserActiveStatusOperation:         []string{},
	Setup2FAOperation:                    []string{},
	SyncCustomizedFeatureRuleOperation:   []string{},
	SyncLDAPUsersOperation:               []string{},
	TestFeatureTimelineOperation:         []string{},
	TestLDAPConnectionOperation:          []string{},
	ToggleFeatureOperation:               []string{},
	UpdateCategoryOperation:              []string{},
	UpdateEnvironmentOperation:           []string{},
	UpdateFeatureOperation:               []string{},
	UpdateFeatureScheduleOperation:       []string{},
	UpdateLDAPConfigOperation:            []string{},
	UpdateLicenseAcceptanceOperation:     []string{},
	UpdateProjectOperation:               []string{},
	UpdateProjectMembershipOperation:     []string{},
	UpdateProjectSettingOperation:        []string{},
	UpdateProjectTagOperation:            []string{},
	UpdateSegmentOperation:               []string{},
	UserChangeMyPasswordOperation:        []string{},
}

func (s *Server) securityBearerAuth(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t BearerAuth
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Roles = operationRolesBearerAuth[operationName]
	rctx, err := s.sec.HandleBearerAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// BearerAuth provides bearerAuth security value.
	BearerAuth(ctx context.Context, operationName OperationName) (BearerAuth, error)
}

func (s *Client) securityBearerAuth(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.BearerAuth(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"BearerAuth\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
