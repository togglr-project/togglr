// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AddFeatureTagParams is parameters of AddFeatureTag operation.
type AddFeatureTagParams struct {
	FeatureID uuid.UUID
}

func unpackAddFeatureTagParams(packed middleware.Parameters) (params AddFeatureTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAddFeatureTagParams(args [1]string, argsEscaped bool, r *http.Request) (params AddFeatureTagParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ApprovePendingChangeParams is parameters of ApprovePendingChange operation.
type ApprovePendingChangeParams struct {
	PendingChangeID uuid.UUID
}

func unpackApprovePendingChangeParams(packed middleware.Parameters) (params ApprovePendingChangeParams) {
	{
		key := middleware.ParameterKey{
			Name: "pending_change_id",
			In:   "path",
		}
		params.PendingChangeID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeApprovePendingChangeParams(args [1]string, argsEscaped bool, r *http.Request) (params ApprovePendingChangeParams, _ error) {
	// Decode path: pending_change_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pending_change_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.PendingChangeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pending_change_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ArchiveProjectParams is parameters of ArchiveProject operation.
type ArchiveProjectParams struct {
	ProjectID string
}

func unpackArchiveProjectParams(packed middleware.Parameters) (params ArchiveProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeArchiveProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params ArchiveProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CancelPendingChangeParams is parameters of CancelPendingChange operation.
type CancelPendingChangeParams struct {
	PendingChangeID uuid.UUID
}

func unpackCancelPendingChangeParams(packed middleware.Parameters) (params CancelPendingChangeParams) {
	{
		key := middleware.ParameterKey{
			Name: "pending_change_id",
			In:   "path",
		}
		params.PendingChangeID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCancelPendingChangeParams(args [1]string, argsEscaped bool, r *http.Request) (params CancelPendingChangeParams, _ error) {
	// Decode path: pending_change_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pending_change_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.PendingChangeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pending_change_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateEnvironmentParams is parameters of CreateEnvironment operation.
type CreateEnvironmentParams struct {
	ProjectID uuid.UUID
}

func unpackCreateEnvironmentParams(packed middleware.Parameters) (params CreateEnvironmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateEnvironmentParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateEnvironmentParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateFeatureFlagVariantParams is parameters of CreateFeatureFlagVariant operation.
type CreateFeatureFlagVariantParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackCreateFeatureFlagVariantParams(packed middleware.Parameters) (params CreateFeatureFlagVariantParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeCreateFeatureFlagVariantParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateFeatureFlagVariantParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CreateFeatureRuleParams is parameters of CreateFeatureRule operation.
type CreateFeatureRuleParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackCreateFeatureRuleParams(packed middleware.Parameters) (params CreateFeatureRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeCreateFeatureRuleParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateFeatureRuleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CreateFeatureScheduleParams is parameters of CreateFeatureSchedule operation.
type CreateFeatureScheduleParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackCreateFeatureScheduleParams(packed middleware.Parameters) (params CreateFeatureScheduleParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeCreateFeatureScheduleParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateFeatureScheduleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CreateProjectFeatureParams is parameters of CreateProjectFeature operation.
type CreateProjectFeatureParams struct {
	ProjectID string
}

func unpackCreateProjectFeatureParams(packed middleware.Parameters) (params CreateProjectFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeCreateProjectFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateProjectFeatureParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateProjectSegmentParams is parameters of CreateProjectSegment operation.
type CreateProjectSegmentParams struct {
	ProjectID string
}

func unpackCreateProjectSegmentParams(packed middleware.Parameters) (params CreateProjectSegmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeCreateProjectSegmentParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateProjectSegmentParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateProjectSettingParams is parameters of CreateProjectSetting operation.
type CreateProjectSettingParams struct {
	ProjectID string
}

func unpackCreateProjectSettingParams(packed middleware.Parameters) (params CreateProjectSettingParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeCreateProjectSettingParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateProjectSettingParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateProjectTagParams is parameters of CreateProjectTag operation.
type CreateProjectTagParams struct {
	ProjectID uuid.UUID
}

func unpackCreateProjectTagParams(packed middleware.Parameters) (params CreateProjectTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateProjectTagParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateProjectTagParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteCategoryParams is parameters of DeleteCategory operation.
type DeleteCategoryParams struct {
	CategoryID uuid.UUID
}

func unpackDeleteCategoryParams(packed middleware.Parameters) (params DeleteCategoryParams) {
	{
		key := middleware.ParameterKey{
			Name: "category_id",
			In:   "path",
		}
		params.CategoryID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteCategoryParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteCategoryParams, _ error) {
	// Decode path: category_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "category_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CategoryID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "category_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteEnvironmentParams is parameters of DeleteEnvironment operation.
type DeleteEnvironmentParams struct {
	EnvironmentID int64
}

func unpackDeleteEnvironmentParams(packed middleware.Parameters) (params DeleteEnvironmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(int64)
	}
	return params
}

func decodeDeleteEnvironmentParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteEnvironmentParams, _ error) {
	// Decode path: environment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteFeatureParams is parameters of DeleteFeature operation.
type DeleteFeatureParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackDeleteFeatureParams(packed middleware.Parameters) (params DeleteFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeDeleteFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteFeatureParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteFeatureScheduleParams is parameters of DeleteFeatureSchedule operation.
type DeleteFeatureScheduleParams struct {
	ScheduleID string
}

func unpackDeleteFeatureScheduleParams(packed middleware.Parameters) (params DeleteFeatureScheduleParams) {
	{
		key := middleware.ParameterKey{
			Name: "schedule_id",
			In:   "path",
		}
		params.ScheduleID = packed[key].(string)
	}
	return params
}

func decodeDeleteFeatureScheduleParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteFeatureScheduleParams, _ error) {
	// Decode path: schedule_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schedule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScheduleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schedule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteProjectSettingParams is parameters of DeleteProjectSetting operation.
type DeleteProjectSettingParams struct {
	ProjectID   string
	SettingName string
}

func unpackDeleteProjectSettingParams(packed middleware.Parameters) (params DeleteProjectSettingParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_name",
			In:   "path",
		}
		params.SettingName = packed[key].(string)
	}
	return params
}

func decodeDeleteProjectSettingParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteProjectSettingParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SettingName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteProjectTagParams is parameters of DeleteProjectTag operation.
type DeleteProjectTagParams struct {
	ProjectID uuid.UUID
	TagID     uuid.UUID
}

func unpackDeleteProjectTagParams(packed middleware.Parameters) (params DeleteProjectTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "tag_id",
			In:   "path",
		}
		params.TagID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteProjectTagParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteProjectTagParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: tag_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tag_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.TagID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tag_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteRuleAttributeParams is parameters of DeleteRuleAttribute operation.
type DeleteRuleAttributeParams struct {
	Name string
}

func unpackDeleteRuleAttributeParams(packed middleware.Parameters) (params DeleteRuleAttributeParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeDeleteRuleAttributeParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteRuleAttributeParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSegmentParams is parameters of DeleteSegment operation.
type DeleteSegmentParams struct {
	SegmentID string
}

func unpackDeleteSegmentParams(packed middleware.Parameters) (params DeleteSegmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "segment_id",
			In:   "path",
		}
		params.SegmentID = packed[key].(string)
	}
	return params
}

func decodeDeleteSegmentParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteSegmentParams, _ error) {
	// Decode path: segment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "segment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SegmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteUserParams is parameters of DeleteUser operation.
type DeleteUserParams struct {
	UserID uint
}

func unpackDeleteUserParams(packed middleware.Parameters) (params DeleteUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeDeleteUserParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteUserParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCategoryParams is parameters of GetCategory operation.
type GetCategoryParams struct {
	CategoryID uuid.UUID
}

func unpackGetCategoryParams(packed middleware.Parameters) (params GetCategoryParams) {
	{
		key := middleware.ParameterKey{
			Name: "category_id",
			In:   "path",
		}
		params.CategoryID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetCategoryParams(args [1]string, argsEscaped bool, r *http.Request) (params GetCategoryParams, _ error) {
	// Decode path: category_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "category_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CategoryID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "category_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDashboardOverviewParams is parameters of GetDashboardOverview operation.
type GetDashboardOverviewParams struct {
	// Environment key (prod/stage/dev).
	EnvironmentKey string
	// Optional project ID to filter results.
	ProjectID OptUUID
	// Limit for recent activity entries.
	Limit OptUint
}

func unpackGetDashboardOverviewParams(packed middleware.Parameters) (params GetDashboardOverviewParams) {
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProjectID = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptUint)
		}
	}
	return params
}

func decodeGetDashboardOverviewParams(args [0]string, argsEscaped bool, r *http.Request) (params GetDashboardOverviewParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProjectIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotProjectIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProjectID.SetTo(paramsDotProjectIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := uint(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetEnvironmentParams is parameters of GetEnvironment operation.
type GetEnvironmentParams struct {
	EnvironmentID int64
}

func unpackGetEnvironmentParams(packed middleware.Parameters) (params GetEnvironmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(int64)
	}
	return params
}

func decodeGetEnvironmentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetEnvironmentParams, _ error) {
	// Decode path: environment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetFeatureParams is parameters of GetFeature operation.
type GetFeatureParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackGetFeatureParams(packed middleware.Parameters) (params GetFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeGetFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params GetFeatureParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetFeatureScheduleParams is parameters of GetFeatureSchedule operation.
type GetFeatureScheduleParams struct {
	ScheduleID string
}

func unpackGetFeatureScheduleParams(packed middleware.Parameters) (params GetFeatureScheduleParams) {
	{
		key := middleware.ParameterKey{
			Name: "schedule_id",
			In:   "path",
		}
		params.ScheduleID = packed[key].(string)
	}
	return params
}

func decodeGetFeatureScheduleParams(args [1]string, argsEscaped bool, r *http.Request) (params GetFeatureScheduleParams, _ error) {
	// Decode path: schedule_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schedule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScheduleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schedule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetFeatureTimelineParams is parameters of GetFeatureTimeline operation.
type GetFeatureTimelineParams struct {
	FeatureID string
	// Target environment key (e.g., dev, stage, prod).
	EnvironmentKey string
	// Start of the period (inclusive).
	From time.Time
	// End of the period (exclusive).
	To time.Time
	// Browser's location string.
	Location string
}

func unpackGetFeatureTimelineParams(packed middleware.Parameters) (params GetFeatureTimelineParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		params.From = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		params.To = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "location",
			In:   "query",
		}
		params.Location = packed[key].(string)
	}
	return params
}

func decodeGetFeatureTimelineParams(args [1]string, argsEscaped bool, r *http.Request) (params GetFeatureTimelineParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.From = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.To = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: location.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "location",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Location = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetLDAPSyncLogDetailsParams is parameters of GetLDAPSyncLogDetails operation.
type GetLDAPSyncLogDetailsParams struct {
	ID uint
}

func unpackGetLDAPSyncLogDetailsParams(packed middleware.Parameters) (params GetLDAPSyncLogDetailsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uint)
	}
	return params
}

func decodeGetLDAPSyncLogDetailsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetLDAPSyncLogDetailsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetLDAPSyncLogsParams is parameters of GetLDAPSyncLogs operation.
type GetLDAPSyncLogsParams struct {
	Limit    OptInt
	Level    OptGetLDAPSyncLogsLevel
	SyncID   OptString
	Username OptString
	From     OptDateTime
	To       OptDateTime
}

func unpackGetLDAPSyncLogsParams(packed middleware.Parameters) (params GetLDAPSyncLogsParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "level",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Level = v.(OptGetLDAPSyncLogsLevel)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sync_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SyncID = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Username = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.To = v.(OptDateTime)
		}
	}
	return params
}

func decodeGetLDAPSyncLogsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetLDAPSyncLogsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int(50)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        false,
							Min:           0,
							MaxSet:        true,
							Max:           1000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: level.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "level",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLevelVal GetLDAPSyncLogsLevel
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLevelVal = GetLDAPSyncLogsLevel(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Level.SetTo(paramsDotLevelVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Level.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "level",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sync_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sync_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSyncIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSyncIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SyncID.SetTo(paramsDotSyncIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sync_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username.SetTo(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.To.SetTo(paramsDotToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPendingChangeParams is parameters of GetPendingChange operation.
type GetPendingChangeParams struct {
	PendingChangeID uuid.UUID
}

func unpackGetPendingChangeParams(packed middleware.Parameters) (params GetPendingChangeParams) {
	{
		key := middleware.ParameterKey{
			Name: "pending_change_id",
			In:   "path",
		}
		params.PendingChangeID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetPendingChangeParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPendingChangeParams, _ error) {
	// Decode path: pending_change_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pending_change_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.PendingChangeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pending_change_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectParams is parameters of GetProject operation.
type GetProjectParams struct {
	ProjectID string
}

func unpackGetProjectParams(packed middleware.Parameters) (params GetProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeGetProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectSettingParams is parameters of GetProjectSetting operation.
type GetProjectSettingParams struct {
	ProjectID   string
	SettingName string
}

func unpackGetProjectSettingParams(packed middleware.Parameters) (params GetProjectSettingParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_name",
			In:   "path",
		}
		params.SettingName = packed[key].(string)
	}
	return params
}

func decodeGetProjectSettingParams(args [2]string, argsEscaped bool, r *http.Request) (params GetProjectSettingParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SettingName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectTagParams is parameters of GetProjectTag operation.
type GetProjectTagParams struct {
	ProjectID uuid.UUID
	TagID     uuid.UUID
}

func unpackGetProjectTagParams(packed middleware.Parameters) (params GetProjectTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "tag_id",
			In:   "path",
		}
		params.TagID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetProjectTagParams(args [2]string, argsEscaped bool, r *http.Request) (params GetProjectTagParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: tag_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tag_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.TagID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tag_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSegmentParams is parameters of GetSegment operation.
type GetSegmentParams struct {
	SegmentID string
}

func unpackGetSegmentParams(packed middleware.Parameters) (params GetSegmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "segment_id",
			In:   "path",
		}
		params.SegmentID = packed[key].(string)
	}
	return params
}

func decodeGetSegmentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSegmentParams, _ error) {
	// Decode path: segment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "segment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SegmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// InitiateTOTPApprovalParams is parameters of InitiateTOTPApproval operation.
type InitiateTOTPApprovalParams struct {
	PendingChangeID uuid.UUID
}

func unpackInitiateTOTPApprovalParams(packed middleware.Parameters) (params InitiateTOTPApprovalParams) {
	{
		key := middleware.ParameterKey{
			Name: "pending_change_id",
			In:   "path",
		}
		params.PendingChangeID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeInitiateTOTPApprovalParams(args [1]string, argsEscaped bool, r *http.Request) (params InitiateTOTPApprovalParams, _ error) {
	// Decode path: pending_change_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pending_change_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.PendingChangeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pending_change_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListFeatureFlagVariantsParams is parameters of ListFeatureFlagVariants operation.
type ListFeatureFlagVariantsParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackListFeatureFlagVariantsParams(packed middleware.Parameters) (params ListFeatureFlagVariantsParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeListFeatureFlagVariantsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListFeatureFlagVariantsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListFeatureRulesParams is parameters of ListFeatureRules operation.
type ListFeatureRulesParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackListFeatureRulesParams(packed middleware.Parameters) (params ListFeatureRulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeListFeatureRulesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListFeatureRulesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListFeatureSchedulesParams is parameters of ListFeatureSchedules operation.
type ListFeatureSchedulesParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackListFeatureSchedulesParams(packed middleware.Parameters) (params ListFeatureSchedulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeListFeatureSchedulesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListFeatureSchedulesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListFeatureTagsParams is parameters of ListFeatureTags operation.
type ListFeatureTagsParams struct {
	FeatureID uuid.UUID
}

func unpackListFeatureTagsParams(packed middleware.Parameters) (params ListFeatureTagsParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeListFeatureTagsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListFeatureTagsParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListPendingChangesParams is parameters of ListPendingChanges operation.
type ListPendingChangesParams struct {
	EnvironmentID OptInt64
	// Target environment key (e.g., dev, stage, prod). If provided, takes precedence over environment_id.
	EnvironmentKey OptString
	ProjectID      OptUUID
	Status         OptListPendingChangesStatus
	UserID         OptUint
	Page           OptUint
	PerPage        OptUint
	SortBy         OptListPendingChangesSortBy
	SortDesc       OptBool
}

func unpackListPendingChangesParams(packed middleware.Parameters) (params ListPendingChangesParams) {
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EnvironmentID = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EnvironmentKey = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProjectID = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptListPendingChangesStatus)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserID = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptListPendingChangesSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_desc",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortDesc = v.(OptBool)
		}
	}
	return params
}

func decodeListPendingChangesParams(args [0]string, argsEscaped bool, r *http.Request) (params ListPendingChangesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: environment_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEnvironmentIDVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotEnvironmentIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EnvironmentID.SetTo(paramsDotEnvironmentIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEnvironmentKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEnvironmentKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EnvironmentKey.SetTo(paramsDotEnvironmentKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: project_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "project_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProjectIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotProjectIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProjectID.SetTo(paramsDotProjectIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal ListPendingChangesStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = ListPendingChangesStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: user_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "user_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserIDVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotUserIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserID.SetTo(paramsDotUserIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := uint(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := uint(20)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := ListPendingChangesSortBy("created_at")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal ListPendingChangesSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = ListPendingChangesSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_desc.
	{
		val := bool(true)
		params.SortDesc.SetTo(val)
	}
	// Decode query: sort_desc.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_desc",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortDescVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSortDescVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SortDesc.SetTo(paramsDotSortDescVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_desc",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectChangesParams is parameters of ListProjectChanges operation.
type ListProjectChangesParams struct {
	// Project ID.
	ProjectID uuid.UUID
	// Page number (starts from 1).
	Page OptUint
	// Items per page.
	PerPage OptUint
	// Sort by field.
	SortBy OptListProjectChangesSortBy
	// Sort order.
	SortOrder OptSortOrder
	// Filter by actor (system, sdk, user:<user_id>).
	Actor OptString
	// Filter by entity type.
	Entity OptEntityType
	// Filter by action type.
	Action OptAuditAction
	// Filter by specific feature ID.
	FeatureID OptUUID
	// Filter changes from this date (ISO 8601 format).
	From OptDateTime
	// Filter changes until this date (ISO 8601 format).
	To OptDateTime
}

func unpackListProjectChangesParams(packed middleware.Parameters) (params ListProjectChangesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptListProjectChangesSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "actor",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Actor = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "entity",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Entity = v.(OptEntityType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "action",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Action = v.(OptAuditAction)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FeatureID = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.To = v.(OptDateTime)
		}
	}
	return params
}

func decodeListProjectChangesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListProjectChangesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := uint(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := uint(20)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_by.
	{
		val := ListProjectChangesSortBy("created_at")
		params.SortBy.SetTo(val)
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal ListProjectChangesSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = ListProjectChangesSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := SortOrder("desc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal SortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = SortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: actor.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "actor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotActorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotActorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Actor.SetTo(paramsDotActorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "actor",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: entity.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "entity",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEntityVal EntityType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEntityVal = EntityType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Entity.SetTo(paramsDotEntityVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Entity.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "entity",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: action.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "action",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotActionVal AuditAction
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotActionVal = AuditAction(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Action.SetTo(paramsDotActionVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Action.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "action",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: feature_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "feature_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFeatureIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotFeatureIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FeatureID.SetTo(paramsDotFeatureIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.To.SetTo(paramsDotToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectEnvironmentsParams is parameters of ListProjectEnvironments operation.
type ListProjectEnvironmentsParams struct {
	ProjectID uuid.UUID
}

func unpackListProjectEnvironmentsParams(packed middleware.Parameters) (params ListProjectEnvironmentsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeListProjectEnvironmentsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListProjectEnvironmentsParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectFeaturesParams is parameters of ListProjectFeatures operation.
type ListProjectFeaturesParams struct {
	ProjectID string
	// Environment key (dev, stage, prod) to filter features.
	EnvironmentKey string
	// Filter by feature kind.
	Kind OptListProjectFeaturesKind
	// Filter by enabled state.
	Enabled OptBool
	// Case-insensitive text search across key, name, description, rollout_key.
	TextSelector OptString
	// Filter by tag IDs (comma-separated).
	TagIds OptString
	// Sort by field.
	SortBy OptListProjectFeaturesSortBy
	// Sort order.
	SortOrder OptSortOrder
	// Page number (starts from 1).
	Page OptUint
	// Items per page.
	PerPage OptUint
}

func unpackListProjectFeaturesParams(packed middleware.Parameters) (params ListProjectFeaturesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kind",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Kind = v.(OptListProjectFeaturesKind)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "enabled",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Enabled = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "text_selector",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TextSelector = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tag_ids",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TagIds = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptListProjectFeaturesSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptUint)
		}
	}
	return params
}

func decodeListProjectFeaturesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListProjectFeaturesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: kind.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "kind",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKindVal ListProjectFeaturesKind
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKindVal = ListProjectFeaturesKind(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Kind.SetTo(paramsDotKindVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Kind.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kind",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: enabled.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "enabled",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEnabledVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotEnabledVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Enabled.SetTo(paramsDotEnabledVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "enabled",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: text_selector.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "text_selector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTextSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTextSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TextSelector.SetTo(paramsDotTextSelectorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "text_selector",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tag_ids.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tag_ids",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTagIdsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTagIdsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TagIds.SetTo(paramsDotTagIdsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tag_ids",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal ListProjectFeaturesSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = ListProjectFeaturesSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := SortOrder("desc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal SortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = SortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := uint(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := uint(20)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectSegmentsParams is parameters of ListProjectSegments operation.
type ListProjectSegmentsParams struct {
	ProjectID string
	// Case-insensitive text search across name, description.
	TextSelector OptString
	// Sort by field.
	SortBy OptListProjectSegmentsSortBy
	// Sort order.
	SortOrder OptSortOrder
	// Page number (starts from 1).
	Page OptUint
	// Items per page.
	PerPage OptUint
}

func unpackListProjectSegmentsParams(packed middleware.Parameters) (params ListProjectSegmentsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "text_selector",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TextSelector = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptListProjectSegmentsSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptUint)
		}
	}
	return params
}

func decodeListProjectSegmentsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListProjectSegmentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: text_selector.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "text_selector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTextSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTextSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TextSelector.SetTo(paramsDotTextSelectorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "text_selector",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal ListProjectSegmentsSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = ListProjectSegmentsSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort_order.
	{
		val := SortOrder("desc")
		params.SortOrder.SetTo(val)
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal SortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = SortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := uint(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := uint(20)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectSettingsParams is parameters of ListProjectSettings operation.
type ListProjectSettingsParams struct {
	ProjectID string
	Page      OptInt
	PerPage   OptInt
}

func unpackListProjectSettingsParams(packed middleware.Parameters) (params ListProjectSettingsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptInt)
		}
	}
	return params
}

func decodeListProjectSettingsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListProjectSettingsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := int(20)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectTagsParams is parameters of ListProjectTags operation.
type ListProjectTagsParams struct {
	ProjectID uuid.UUID
	// Filter by category ID.
	CategoryID OptUUID
}

func unpackListProjectTagsParams(packed middleware.Parameters) (params ListProjectTagsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "category_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CategoryID = v.(OptUUID)
		}
	}
	return params
}

func decodeListProjectTagsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListProjectTagsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: category_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "category_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCategoryIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotCategoryIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CategoryID.SetTo(paramsDotCategoryIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "category_id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListSegmentDesyncFeatureIDsParams is parameters of ListSegmentDesyncFeatureIDs operation.
type ListSegmentDesyncFeatureIDsParams struct {
	SegmentID string
}

func unpackListSegmentDesyncFeatureIDsParams(packed middleware.Parameters) (params ListSegmentDesyncFeatureIDsParams) {
	{
		key := middleware.ParameterKey{
			Name: "segment_id",
			In:   "path",
		}
		params.SegmentID = packed[key].(string)
	}
	return params
}

func decodeListSegmentDesyncFeatureIDsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListSegmentDesyncFeatureIDsParams, _ error) {
	// Decode path: segment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "segment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SegmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RejectPendingChangeParams is parameters of RejectPendingChange operation.
type RejectPendingChangeParams struct {
	PendingChangeID uuid.UUID
}

func unpackRejectPendingChangeParams(packed middleware.Parameters) (params RejectPendingChangeParams) {
	{
		key := middleware.ParameterKey{
			Name: "pending_change_id",
			In:   "path",
		}
		params.PendingChangeID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRejectPendingChangeParams(args [1]string, argsEscaped bool, r *http.Request) (params RejectPendingChangeParams, _ error) {
	// Decode path: pending_change_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pending_change_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.PendingChangeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pending_change_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveFeatureTagParams is parameters of RemoveFeatureTag operation.
type RemoveFeatureTagParams struct {
	FeatureID uuid.UUID
	TagID     uuid.UUID
}

func unpackRemoveFeatureTagParams(packed middleware.Parameters) (params RemoveFeatureTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "tag_id",
			In:   "query",
		}
		params.TagID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRemoveFeatureTagParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveFeatureTagParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: tag_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tag_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.TagID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tag_id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SSOInitiateParams is parameters of SSOInitiate operation.
type SSOInitiateParams struct {
	// Name of the SSO provider to use.
	Provider string
}

func unpackSSOInitiateParams(packed middleware.Parameters) (params SSOInitiateParams) {
	{
		key := middleware.ParameterKey{
			Name: "provider",
			In:   "query",
		}
		params.Provider = packed[key].(string)
	}
	return params
}

func decodeSSOInitiateParams(args [0]string, argsEscaped bool, r *http.Request) (params SSOInitiateParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: provider.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "provider",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Provider = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "provider",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SetSuperuserStatusParams is parameters of SetSuperuserStatus operation.
type SetSuperuserStatusParams struct {
	UserID uint
}

func unpackSetSuperuserStatusParams(packed middleware.Parameters) (params SetSuperuserStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeSetSuperuserStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params SetSuperuserStatusParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetUserActiveStatusParams is parameters of SetUserActiveStatus operation.
type SetUserActiveStatusParams struct {
	UserID uint
}

func unpackSetUserActiveStatusParams(packed middleware.Parameters) (params SetUserActiveStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeSetUserActiveStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params SetUserActiveStatusParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SyncCustomizedFeatureRuleParams is parameters of SyncCustomizedFeatureRule operation.
type SyncCustomizedFeatureRuleParams struct {
	FeatureID      string
	RuleID         string
	EnvironmentKey string
}

func unpackSyncCustomizedFeatureRuleParams(packed middleware.Parameters) (params SyncCustomizedFeatureRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "rule_id",
			In:   "path",
		}
		params.RuleID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeSyncCustomizedFeatureRuleParams(args [2]string, argsEscaped bool, r *http.Request) (params SyncCustomizedFeatureRuleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: rule_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "rule_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TestFeatureTimelineParams is parameters of TestFeatureTimeline operation.
type TestFeatureTimelineParams struct {
	FeatureID string
	// Target environment key (e.g., dev, stage, prod).
	EnvironmentKey string
	// Start of the period (inclusive).
	From time.Time
	// End of the period (exclusive).
	To time.Time
	// Browser's location string.
	Location string
}

func unpackTestFeatureTimelineParams(packed middleware.Parameters) (params TestFeatureTimelineParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		params.From = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		params.To = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "location",
			In:   "query",
		}
		params.Location = packed[key].(string)
	}
	return params
}

func decodeTestFeatureTimelineParams(args [1]string, argsEscaped bool, r *http.Request) (params TestFeatureTimelineParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.From = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.To = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: location.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "location",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Location = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ToggleFeatureParams is parameters of ToggleFeature operation.
type ToggleFeatureParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackToggleFeatureParams(packed middleware.Parameters) (params ToggleFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeToggleFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params ToggleFeatureParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateCategoryParams is parameters of UpdateCategory operation.
type UpdateCategoryParams struct {
	CategoryID uuid.UUID
}

func unpackUpdateCategoryParams(packed middleware.Parameters) (params UpdateCategoryParams) {
	{
		key := middleware.ParameterKey{
			Name: "category_id",
			In:   "path",
		}
		params.CategoryID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateCategoryParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateCategoryParams, _ error) {
	// Decode path: category_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "category_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CategoryID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "category_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateEnvironmentParams is parameters of UpdateEnvironment operation.
type UpdateEnvironmentParams struct {
	EnvironmentID int64
}

func unpackUpdateEnvironmentParams(packed middleware.Parameters) (params UpdateEnvironmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(int64)
	}
	return params
}

func decodeUpdateEnvironmentParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateEnvironmentParams, _ error) {
	// Decode path: environment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateFeatureParams is parameters of UpdateFeature operation.
type UpdateFeatureParams struct {
	FeatureID      string
	EnvironmentKey string
}

func unpackUpdateFeatureParams(packed middleware.Parameters) (params UpdateFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_key",
			In:   "query",
		}
		params.EnvironmentKey = packed[key].(string)
	}
	return params
}

func decodeUpdateFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateFeatureParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: environment_key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment_key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateFeatureScheduleParams is parameters of UpdateFeatureSchedule operation.
type UpdateFeatureScheduleParams struct {
	ScheduleID string
}

func unpackUpdateFeatureScheduleParams(packed middleware.Parameters) (params UpdateFeatureScheduleParams) {
	{
		key := middleware.ParameterKey{
			Name: "schedule_id",
			In:   "path",
		}
		params.ScheduleID = packed[key].(string)
	}
	return params
}

func decodeUpdateFeatureScheduleParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateFeatureScheduleParams, _ error) {
	// Decode path: schedule_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schedule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScheduleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schedule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateProjectParams is parameters of UpdateProject operation.
type UpdateProjectParams struct {
	ProjectID string
}

func unpackUpdateProjectParams(packed middleware.Parameters) (params UpdateProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeUpdateProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateProjectSettingParams is parameters of UpdateProjectSetting operation.
type UpdateProjectSettingParams struct {
	ProjectID   string
	SettingName string
}

func unpackUpdateProjectSettingParams(packed middleware.Parameters) (params UpdateProjectSettingParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "setting_name",
			In:   "path",
		}
		params.SettingName = packed[key].(string)
	}
	return params
}

func decodeUpdateProjectSettingParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateProjectSettingParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: setting_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "setting_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SettingName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "setting_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateProjectTagParams is parameters of UpdateProjectTag operation.
type UpdateProjectTagParams struct {
	ProjectID uuid.UUID
	TagID     uuid.UUID
}

func unpackUpdateProjectTagParams(packed middleware.Parameters) (params UpdateProjectTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "tag_id",
			In:   "path",
		}
		params.TagID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateProjectTagParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateProjectTagParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: tag_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tag_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.TagID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tag_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateSegmentParams is parameters of UpdateSegment operation.
type UpdateSegmentParams struct {
	SegmentID string
}

func unpackUpdateSegmentParams(packed middleware.Parameters) (params UpdateSegmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "segment_id",
			In:   "path",
		}
		params.SegmentID = packed[key].(string)
	}
	return params
}

func decodeUpdateSegmentParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateSegmentParams, _ error) {
	// Decode path: segment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "segment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SegmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
