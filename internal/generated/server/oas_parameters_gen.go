// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ArchiveProjectParams is parameters of ArchiveProject operation.
type ArchiveProjectParams struct {
	ProjectID string
}

func unpackArchiveProjectParams(packed middleware.Parameters) (params ArchiveProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeArchiveProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params ArchiveProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateFeatureFlagVariantParams is parameters of CreateFeatureFlagVariant operation.
type CreateFeatureFlagVariantParams struct {
	FeatureID string
}

func unpackCreateFeatureFlagVariantParams(packed middleware.Parameters) (params CreateFeatureFlagVariantParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeCreateFeatureFlagVariantParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateFeatureFlagVariantParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateFeatureRuleParams is parameters of CreateFeatureRule operation.
type CreateFeatureRuleParams struct {
	FeatureID string
}

func unpackCreateFeatureRuleParams(packed middleware.Parameters) (params CreateFeatureRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeCreateFeatureRuleParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateFeatureRuleParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateFeatureScheduleParams is parameters of CreateFeatureSchedule operation.
type CreateFeatureScheduleParams struct {
	FeatureID string
}

func unpackCreateFeatureScheduleParams(packed middleware.Parameters) (params CreateFeatureScheduleParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeCreateFeatureScheduleParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateFeatureScheduleParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateProjectFeatureParams is parameters of CreateProjectFeature operation.
type CreateProjectFeatureParams struct {
	ProjectID string
}

func unpackCreateProjectFeatureParams(packed middleware.Parameters) (params CreateProjectFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeCreateProjectFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateProjectFeatureParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateProjectSegmentParams is parameters of CreateProjectSegment operation.
type CreateProjectSegmentParams struct {
	ProjectID string
}

func unpackCreateProjectSegmentParams(packed middleware.Parameters) (params CreateProjectSegmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeCreateProjectSegmentParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateProjectSegmentParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteFeatureParams is parameters of DeleteFeature operation.
type DeleteFeatureParams struct {
	FeatureID string
}

func unpackDeleteFeatureParams(packed middleware.Parameters) (params DeleteFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeDeleteFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteFeatureParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteFeatureScheduleParams is parameters of DeleteFeatureSchedule operation.
type DeleteFeatureScheduleParams struct {
	ScheduleID string
}

func unpackDeleteFeatureScheduleParams(packed middleware.Parameters) (params DeleteFeatureScheduleParams) {
	{
		key := middleware.ParameterKey{
			Name: "schedule_id",
			In:   "path",
		}
		params.ScheduleID = packed[key].(string)
	}
	return params
}

func decodeDeleteFeatureScheduleParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteFeatureScheduleParams, _ error) {
	// Decode path: schedule_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schedule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScheduleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schedule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteRuleAttributeParams is parameters of DeleteRuleAttribute operation.
type DeleteRuleAttributeParams struct {
	Name string
}

func unpackDeleteRuleAttributeParams(packed middleware.Parameters) (params DeleteRuleAttributeParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeDeleteRuleAttributeParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteRuleAttributeParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSegmentParams is parameters of DeleteSegment operation.
type DeleteSegmentParams struct {
	SegmentID string
}

func unpackDeleteSegmentParams(packed middleware.Parameters) (params DeleteSegmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "segment_id",
			In:   "path",
		}
		params.SegmentID = packed[key].(string)
	}
	return params
}

func decodeDeleteSegmentParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteSegmentParams, _ error) {
	// Decode path: segment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "segment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SegmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteUserParams is parameters of DeleteUser operation.
type DeleteUserParams struct {
	UserID uint
}

func unpackDeleteUserParams(packed middleware.Parameters) (params DeleteUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeDeleteUserParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteUserParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetFeatureParams is parameters of GetFeature operation.
type GetFeatureParams struct {
	FeatureID string
}

func unpackGetFeatureParams(packed middleware.Parameters) (params GetFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeGetFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params GetFeatureParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetFeatureScheduleParams is parameters of GetFeatureSchedule operation.
type GetFeatureScheduleParams struct {
	ScheduleID string
}

func unpackGetFeatureScheduleParams(packed middleware.Parameters) (params GetFeatureScheduleParams) {
	{
		key := middleware.ParameterKey{
			Name: "schedule_id",
			In:   "path",
		}
		params.ScheduleID = packed[key].(string)
	}
	return params
}

func decodeGetFeatureScheduleParams(args [1]string, argsEscaped bool, r *http.Request) (params GetFeatureScheduleParams, _ error) {
	// Decode path: schedule_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schedule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScheduleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schedule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetLDAPSyncLogDetailsParams is parameters of GetLDAPSyncLogDetails operation.
type GetLDAPSyncLogDetailsParams struct {
	ID uint
}

func unpackGetLDAPSyncLogDetailsParams(packed middleware.Parameters) (params GetLDAPSyncLogDetailsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uint)
	}
	return params
}

func decodeGetLDAPSyncLogDetailsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetLDAPSyncLogDetailsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetLDAPSyncLogsParams is parameters of GetLDAPSyncLogs operation.
type GetLDAPSyncLogsParams struct {
	Limit    OptInt
	Level    OptGetLDAPSyncLogsLevel
	SyncID   OptString
	Username OptString
	From     OptDateTime
	To       OptDateTime
}

func unpackGetLDAPSyncLogsParams(packed middleware.Parameters) (params GetLDAPSyncLogsParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "level",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Level = v.(OptGetLDAPSyncLogsLevel)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sync_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SyncID = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Username = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.To = v.(OptDateTime)
		}
	}
	return params
}

func decodeGetLDAPSyncLogsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetLDAPSyncLogsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int(50)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        false,
							Min:           0,
							MaxSet:        true,
							Max:           1000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: level.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "level",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLevelVal GetLDAPSyncLogsLevel
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLevelVal = GetLDAPSyncLogsLevel(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Level.SetTo(paramsDotLevelVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Level.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "level",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sync_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sync_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSyncIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSyncIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SyncID.SetTo(paramsDotSyncIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sync_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username.SetTo(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.To.SetTo(paramsDotToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectParams is parameters of GetProject operation.
type GetProjectParams struct {
	ProjectID string
}

func unpackGetProjectParams(packed middleware.Parameters) (params GetProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeGetProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSegmentParams is parameters of GetSegment operation.
type GetSegmentParams struct {
	SegmentID string
}

func unpackGetSegmentParams(packed middleware.Parameters) (params GetSegmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "segment_id",
			In:   "path",
		}
		params.SegmentID = packed[key].(string)
	}
	return params
}

func decodeGetSegmentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSegmentParams, _ error) {
	// Decode path: segment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "segment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SegmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListFeatureFlagVariantsParams is parameters of ListFeatureFlagVariants operation.
type ListFeatureFlagVariantsParams struct {
	FeatureID string
}

func unpackListFeatureFlagVariantsParams(packed middleware.Parameters) (params ListFeatureFlagVariantsParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeListFeatureFlagVariantsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListFeatureFlagVariantsParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListFeatureRulesParams is parameters of ListFeatureRules operation.
type ListFeatureRulesParams struct {
	FeatureID string
}

func unpackListFeatureRulesParams(packed middleware.Parameters) (params ListFeatureRulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeListFeatureRulesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListFeatureRulesParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListFeatureSchedulesParams is parameters of ListFeatureSchedules operation.
type ListFeatureSchedulesParams struct {
	FeatureID string
}

func unpackListFeatureSchedulesParams(packed middleware.Parameters) (params ListFeatureSchedulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeListFeatureSchedulesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListFeatureSchedulesParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectFeaturesParams is parameters of ListProjectFeatures operation.
type ListProjectFeaturesParams struct {
	ProjectID string
	// Filter by feature kind.
	Kind OptListProjectFeaturesKind
	// Filter by enabled state.
	Enabled OptBool
	// Case-insensitive text search across key, name, description, rollout_key.
	TextSelector OptString
	// Sort by field.
	SortBy OptListProjectFeaturesSortBy
	// Sort order.
	SortOrder OptSortOrder
	// Page number (starts from 1).
	Page OptUint
	// Items per page.
	PerPage OptUint
}

func unpackListProjectFeaturesParams(packed middleware.Parameters) (params ListProjectFeaturesParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kind",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Kind = v.(OptListProjectFeaturesKind)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "enabled",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Enabled = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "text_selector",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TextSelector = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptListProjectFeaturesSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptUint)
		}
	}
	return params
}

func decodeListProjectFeaturesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListProjectFeaturesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: kind.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "kind",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKindVal ListProjectFeaturesKind
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKindVal = ListProjectFeaturesKind(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Kind.SetTo(paramsDotKindVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Kind.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kind",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: enabled.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "enabled",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEnabledVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotEnabledVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Enabled.SetTo(paramsDotEnabledVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "enabled",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: text_selector.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "text_selector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTextSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTextSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TextSelector.SetTo(paramsDotTextSelectorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "text_selector",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal ListProjectFeaturesSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = ListProjectFeaturesSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal SortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = SortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := uint(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := uint(20)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListProjectSegmentsParams is parameters of ListProjectSegments operation.
type ListProjectSegmentsParams struct {
	ProjectID string
	// Case-insensitive text search across name, description.
	TextSelector OptString
	// Sort by field.
	SortBy OptListProjectSegmentsSortBy
	// Sort order.
	SortOrder OptSortOrder
	// Page number (starts from 1).
	Page OptUint
	// Items per page.
	PerPage OptUint
}

func unpackListProjectSegmentsParams(packed middleware.Parameters) (params ListProjectSegmentsParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "text_selector",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TextSelector = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptListProjectSegmentsSortBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOrder = v.(OptSortOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptUint)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptUint)
		}
	}
	return params
}

func decodeListProjectSegmentsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListProjectSegmentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: text_selector.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "text_selector",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTextSelectorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTextSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TextSelector.SetTo(paramsDotTextSelectorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "text_selector",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sort_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal ListProjectSegmentsSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = ListProjectSegmentsSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_by",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sort_order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOrderVal SortOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOrderVal = SortOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOrder.SetTo(paramsDotSortOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_order",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := uint(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := uint(20)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal uint
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListSegmentDesyncFeatureIDsParams is parameters of ListSegmentDesyncFeatureIDs operation.
type ListSegmentDesyncFeatureIDsParams struct {
	SegmentID string
}

func unpackListSegmentDesyncFeatureIDsParams(packed middleware.Parameters) (params ListSegmentDesyncFeatureIDsParams) {
	{
		key := middleware.ParameterKey{
			Name: "segment_id",
			In:   "path",
		}
		params.SegmentID = packed[key].(string)
	}
	return params
}

func decodeListSegmentDesyncFeatureIDsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListSegmentDesyncFeatureIDsParams, _ error) {
	// Decode path: segment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "segment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SegmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SSOInitiateParams is parameters of SSOInitiate operation.
type SSOInitiateParams struct {
	// Name of the SSO provider to use.
	Provider string
}

func unpackSSOInitiateParams(packed middleware.Parameters) (params SSOInitiateParams) {
	{
		key := middleware.ParameterKey{
			Name: "provider",
			In:   "query",
		}
		params.Provider = packed[key].(string)
	}
	return params
}

func decodeSSOInitiateParams(args [0]string, argsEscaped bool, r *http.Request) (params SSOInitiateParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: provider.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "provider",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Provider = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "provider",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SetSuperuserStatusParams is parameters of SetSuperuserStatus operation.
type SetSuperuserStatusParams struct {
	UserID uint
}

func unpackSetSuperuserStatusParams(packed middleware.Parameters) (params SetSuperuserStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeSetSuperuserStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params SetSuperuserStatusParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetUserActiveStatusParams is parameters of SetUserActiveStatus operation.
type SetUserActiveStatusParams struct {
	UserID uint
}

func unpackSetUserActiveStatusParams(packed middleware.Parameters) (params SetUserActiveStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_id",
			In:   "path",
		}
		params.UserID = packed[key].(uint)
	}
	return params
}

func decodeSetUserActiveStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params SetUserActiveStatusParams, _ error) {
	// Decode path: user_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SyncCustomizedFeatureRuleParams is parameters of SyncCustomizedFeatureRule operation.
type SyncCustomizedFeatureRuleParams struct {
	FeatureID string
	RuleID    string
}

func unpackSyncCustomizedFeatureRuleParams(packed middleware.Parameters) (params SyncCustomizedFeatureRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "rule_id",
			In:   "path",
		}
		params.RuleID = packed[key].(string)
	}
	return params
}

func decodeSyncCustomizedFeatureRuleParams(args [2]string, argsEscaped bool, r *http.Request) (params SyncCustomizedFeatureRuleParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: rule_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "rule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ToggleFeatureParams is parameters of ToggleFeature operation.
type ToggleFeatureParams struct {
	FeatureID string
}

func unpackToggleFeatureParams(packed middleware.Parameters) (params ToggleFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeToggleFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params ToggleFeatureParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateFeatureParams is parameters of UpdateFeature operation.
type UpdateFeatureParams struct {
	FeatureID string
}

func unpackUpdateFeatureParams(packed middleware.Parameters) (params UpdateFeatureParams) {
	{
		key := middleware.ParameterKey{
			Name: "feature_id",
			In:   "path",
		}
		params.FeatureID = packed[key].(string)
	}
	return params
}

func decodeUpdateFeatureParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateFeatureParams, _ error) {
	// Decode path: feature_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "feature_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FeatureID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "feature_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateFeatureScheduleParams is parameters of UpdateFeatureSchedule operation.
type UpdateFeatureScheduleParams struct {
	ScheduleID string
}

func unpackUpdateFeatureScheduleParams(packed middleware.Parameters) (params UpdateFeatureScheduleParams) {
	{
		key := middleware.ParameterKey{
			Name: "schedule_id",
			In:   "path",
		}
		params.ScheduleID = packed[key].(string)
	}
	return params
}

func decodeUpdateFeatureScheduleParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateFeatureScheduleParams, _ error) {
	// Decode path: schedule_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schedule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScheduleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schedule_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateProjectParams is parameters of UpdateProject operation.
type UpdateProjectParams struct {
	ProjectID string
}

func unpackUpdateProjectParams(packed middleware.Parameters) (params UpdateProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "project_id",
			In:   "path",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeUpdateProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateProjectParams, _ error) {
	// Decode path: project_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "project_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateSegmentParams is parameters of UpdateSegment operation.
type UpdateSegmentParams struct {
	SegmentID string
}

func unpackUpdateSegmentParams(packed middleware.Parameters) (params UpdateSegmentParams) {
	{
		key := middleware.ParameterKey{
			Name: "segment_id",
			In:   "path",
		}
		params.SegmentID = packed[key].(string)
	}
	return params
}

func decodeUpdateSegmentParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateSegmentParams, _ error) {
	// Decode path: segment_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "segment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SegmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "segment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
