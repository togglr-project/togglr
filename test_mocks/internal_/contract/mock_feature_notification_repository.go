// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureNotificationRepository creates a new instance of MockFeatureNotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureNotificationRepository {
	mock := &MockFeatureNotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureNotificationRepository is an autogenerated mock type for the FeatureNotificationRepository type
type MockFeatureNotificationRepository struct {
	mock.Mock
}

type MockFeatureNotificationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureNotificationRepository) EXPECT() *MockFeatureNotificationRepository_Expecter {
	return &MockFeatureNotificationRepository_Expecter{mock: &_m.Mock}
}

// AddNotification provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) AddNotification(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, featureID domain.FeatureID, payload domain.FeatureNotificationPayload) error {
	ret := _mock.Called(ctx, projectID, envID, featureID, payload)

	if len(ret) == 0 {
		panic("no return value specified for AddNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID, domain.FeatureID, domain.FeatureNotificationPayload) error); ok {
		r0 = returnFunc(ctx, projectID, envID, featureID, payload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationRepository_AddNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNotification'
type MockFeatureNotificationRepository_AddNotification_Call struct {
	*mock.Call
}

// AddNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - envID domain.EnvironmentID
//   - featureID domain.FeatureID
//   - payload domain.FeatureNotificationPayload
func (_e *MockFeatureNotificationRepository_Expecter) AddNotification(ctx interface{}, projectID interface{}, envID interface{}, featureID interface{}, payload interface{}) *MockFeatureNotificationRepository_AddNotification_Call {
	return &MockFeatureNotificationRepository_AddNotification_Call{Call: _e.mock.On("AddNotification", ctx, projectID, envID, featureID, payload)}
}

func (_c *MockFeatureNotificationRepository_AddNotification_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, featureID domain.FeatureID, payload domain.FeatureNotificationPayload)) *MockFeatureNotificationRepository_AddNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		var arg3 domain.FeatureID
		if args[3] != nil {
			arg3 = args[3].(domain.FeatureID)
		}
		var arg4 domain.FeatureNotificationPayload
		if args[4] != nil {
			arg4 = args[4].(domain.FeatureNotificationPayload)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_AddNotification_Call) Return(err error) *MockFeatureNotificationRepository_AddNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationRepository_AddNotification_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, featureID domain.FeatureID, payload domain.FeatureNotificationPayload) error) *MockFeatureNotificationRepository_AddNotification_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOld provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) DeleteOld(ctx context.Context, maxAge time.Duration, limit uint) (uint, error) {
	ret := _mock.Called(ctx, maxAge, limit)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOld")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration, uint) (uint, error)); ok {
		return returnFunc(ctx, maxAge, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration, uint) uint); ok {
		r0 = returnFunc(ctx, maxAge, limit)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Duration, uint) error); ok {
		r1 = returnFunc(ctx, maxAge, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationRepository_DeleteOld_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOld'
type MockFeatureNotificationRepository_DeleteOld_Call struct {
	*mock.Call
}

// DeleteOld is a helper method to define mock.On call
//   - ctx context.Context
//   - maxAge time.Duration
//   - limit uint
func (_e *MockFeatureNotificationRepository_Expecter) DeleteOld(ctx interface{}, maxAge interface{}, limit interface{}) *MockFeatureNotificationRepository_DeleteOld_Call {
	return &MockFeatureNotificationRepository_DeleteOld_Call{Call: _e.mock.On("DeleteOld", ctx, maxAge, limit)}
}

func (_c *MockFeatureNotificationRepository_DeleteOld_Call) Run(run func(ctx context.Context, maxAge time.Duration, limit uint)) *MockFeatureNotificationRepository_DeleteOld_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		var arg2 uint
		if args[2] != nil {
			arg2 = args[2].(uint)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_DeleteOld_Call) Return(v uint, err error) *MockFeatureNotificationRepository_DeleteOld_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockFeatureNotificationRepository_DeleteOld_Call) RunAndReturn(run func(ctx context.Context, maxAge time.Duration, limit uint) (uint, error)) *MockFeatureNotificationRepository_DeleteOld_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) GetByID(ctx context.Context, id domain.FeatureNotificationID) (domain.FeatureNotification, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.FeatureNotification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID) (domain.FeatureNotification, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID) domain.FeatureNotification); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.FeatureNotification)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureNotificationID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockFeatureNotificationRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureNotificationID
func (_e *MockFeatureNotificationRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockFeatureNotificationRepository_GetByID_Call {
	return &MockFeatureNotificationRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockFeatureNotificationRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.FeatureNotificationID)) *MockFeatureNotificationRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureNotificationID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_GetByID_Call) Return(featureNotification domain.FeatureNotification, err error) *MockFeatureNotificationRepository_GetByID_Call {
	_c.Call.Return(featureNotification, err)
	return _c
}

func (_c *MockFeatureNotificationRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureNotificationID) (domain.FeatureNotification, error)) *MockFeatureNotificationRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsFailed provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) MarkAsFailed(ctx context.Context, id domain.FeatureNotificationID, reason string) error {
	ret := _mock.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsFailed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID, string) error); ok {
		r0 = returnFunc(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationRepository_MarkAsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsFailed'
type MockFeatureNotificationRepository_MarkAsFailed_Call struct {
	*mock.Call
}

// MarkAsFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureNotificationID
//   - reason string
func (_e *MockFeatureNotificationRepository_Expecter) MarkAsFailed(ctx interface{}, id interface{}, reason interface{}) *MockFeatureNotificationRepository_MarkAsFailed_Call {
	return &MockFeatureNotificationRepository_MarkAsFailed_Call{Call: _e.mock.On("MarkAsFailed", ctx, id, reason)}
}

func (_c *MockFeatureNotificationRepository_MarkAsFailed_Call) Run(run func(ctx context.Context, id domain.FeatureNotificationID, reason string)) *MockFeatureNotificationRepository_MarkAsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureNotificationID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_MarkAsFailed_Call) Return(err error) *MockFeatureNotificationRepository_MarkAsFailed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationRepository_MarkAsFailed_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureNotificationID, reason string) error) *MockFeatureNotificationRepository_MarkAsFailed_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsSent provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) MarkAsSent(ctx context.Context, id domain.FeatureNotificationID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsSent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationRepository_MarkAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsSent'
type MockFeatureNotificationRepository_MarkAsSent_Call struct {
	*mock.Call
}

// MarkAsSent is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureNotificationID
func (_e *MockFeatureNotificationRepository_Expecter) MarkAsSent(ctx interface{}, id interface{}) *MockFeatureNotificationRepository_MarkAsSent_Call {
	return &MockFeatureNotificationRepository_MarkAsSent_Call{Call: _e.mock.On("MarkAsSent", ctx, id)}
}

func (_c *MockFeatureNotificationRepository_MarkAsSent_Call) Run(run func(ctx context.Context, id domain.FeatureNotificationID)) *MockFeatureNotificationRepository_MarkAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureNotificationID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_MarkAsSent_Call) Return(err error) *MockFeatureNotificationRepository_MarkAsSent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationRepository_MarkAsSent_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureNotificationID) error) *MockFeatureNotificationRepository_MarkAsSent_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsSkipped provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) MarkAsSkipped(ctx context.Context, id domain.FeatureNotificationID, reason string) error {
	ret := _mock.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsSkipped")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID, string) error); ok {
		r0 = returnFunc(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationRepository_MarkAsSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsSkipped'
type MockFeatureNotificationRepository_MarkAsSkipped_Call struct {
	*mock.Call
}

// MarkAsSkipped is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureNotificationID
//   - reason string
func (_e *MockFeatureNotificationRepository_Expecter) MarkAsSkipped(ctx interface{}, id interface{}, reason interface{}) *MockFeatureNotificationRepository_MarkAsSkipped_Call {
	return &MockFeatureNotificationRepository_MarkAsSkipped_Call{Call: _e.mock.On("MarkAsSkipped", ctx, id, reason)}
}

func (_c *MockFeatureNotificationRepository_MarkAsSkipped_Call) Run(run func(ctx context.Context, id domain.FeatureNotificationID, reason string)) *MockFeatureNotificationRepository_MarkAsSkipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureNotificationID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_MarkAsSkipped_Call) Return(err error) *MockFeatureNotificationRepository_MarkAsSkipped_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationRepository_MarkAsSkipped_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureNotificationID, reason string) error) *MockFeatureNotificationRepository_MarkAsSkipped_Call {
	_c.Call.Return(run)
	return _c
}

// TakePending provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) TakePending(ctx context.Context, limit uint) ([]domain.FeatureNotification, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for TakePending")
	}

	var r0 []domain.FeatureNotification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) ([]domain.FeatureNotification, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) []domain.FeatureNotification); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureNotification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationRepository_TakePending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakePending'
type MockFeatureNotificationRepository_TakePending_Call struct {
	*mock.Call
}

// TakePending is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint
func (_e *MockFeatureNotificationRepository_Expecter) TakePending(ctx interface{}, limit interface{}) *MockFeatureNotificationRepository_TakePending_Call {
	return &MockFeatureNotificationRepository_TakePending_Call{Call: _e.mock.On("TakePending", ctx, limit)}
}

func (_c *MockFeatureNotificationRepository_TakePending_Call) Run(run func(ctx context.Context, limit uint)) *MockFeatureNotificationRepository_TakePending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_TakePending_Call) Return(featureNotifications []domain.FeatureNotification, err error) *MockFeatureNotificationRepository_TakePending_Call {
	_c.Call.Return(featureNotifications, err)
	return _c
}

func (_c *MockFeatureNotificationRepository_TakePending_Call) RunAndReturn(run func(ctx context.Context, limit uint) ([]domain.FeatureNotification, error)) *MockFeatureNotificationRepository_TakePending_Call {
	_c.Call.Return(run)
	return _c
}

// TakePendingForUpdate provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) TakePendingForUpdate(ctx context.Context, limit uint) ([]domain.FeatureNotification, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for TakePendingForUpdate")
	}

	var r0 []domain.FeatureNotification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) ([]domain.FeatureNotification, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) []domain.FeatureNotification); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureNotification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationRepository_TakePendingForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakePendingForUpdate'
type MockFeatureNotificationRepository_TakePendingForUpdate_Call struct {
	*mock.Call
}

// TakePendingForUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint
func (_e *MockFeatureNotificationRepository_Expecter) TakePendingForUpdate(ctx interface{}, limit interface{}) *MockFeatureNotificationRepository_TakePendingForUpdate_Call {
	return &MockFeatureNotificationRepository_TakePendingForUpdate_Call{Call: _e.mock.On("TakePendingForUpdate", ctx, limit)}
}

func (_c *MockFeatureNotificationRepository_TakePendingForUpdate_Call) Run(run func(ctx context.Context, limit uint)) *MockFeatureNotificationRepository_TakePendingForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_TakePendingForUpdate_Call) Return(featureNotifications []domain.FeatureNotification, err error) *MockFeatureNotificationRepository_TakePendingForUpdate_Call {
	_c.Call.Return(featureNotifications, err)
	return _c
}

func (_c *MockFeatureNotificationRepository_TakePendingForUpdate_Call) RunAndReturn(run func(ctx context.Context, limit uint) ([]domain.FeatureNotification, error)) *MockFeatureNotificationRepository_TakePendingForUpdate_Call {
	_c.Call.Return(run)
	return _c
}
