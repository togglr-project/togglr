// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"encoding/json"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureNotificationRepository creates a new instance of MockFeatureNotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureNotificationRepository {
	mock := &MockFeatureNotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureNotificationRepository is an autogenerated mock type for the FeatureNotificationRepository type
type MockFeatureNotificationRepository struct {
	mock.Mock
}

type MockFeatureNotificationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureNotificationRepository) EXPECT() *MockFeatureNotificationRepository_Expecter {
	return &MockFeatureNotificationRepository_Expecter{mock: &_m.Mock}
}

// AddNotification provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) AddNotification(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, featureID domain.FeatureID, payload json.RawMessage) error {
	ret := _mock.Called(ctx, projectID, envID, featureID, payload)

	if len(ret) == 0 {
		panic("no return value specified for AddNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID, domain.FeatureID, json.RawMessage) error); ok {
		r0 = returnFunc(ctx, projectID, envID, featureID, payload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationRepository_AddNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNotification'
type MockFeatureNotificationRepository_AddNotification_Call struct {
	*mock.Call
}

// AddNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - envID domain.EnvironmentID
//   - featureID domain.FeatureID
//   - payload json.RawMessage
func (_e *MockFeatureNotificationRepository_Expecter) AddNotification(ctx interface{}, projectID interface{}, envID interface{}, featureID interface{}, payload interface{}) *MockFeatureNotificationRepository_AddNotification_Call {
	return &MockFeatureNotificationRepository_AddNotification_Call{Call: _e.mock.On("AddNotification", ctx, projectID, envID, featureID, payload)}
}

func (_c *MockFeatureNotificationRepository_AddNotification_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, featureID domain.FeatureID, payload json.RawMessage)) *MockFeatureNotificationRepository_AddNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		var arg3 domain.FeatureID
		if args[3] != nil {
			arg3 = args[3].(domain.FeatureID)
		}
		var arg4 json.RawMessage
		if args[4] != nil {
			arg4 = args[4].(json.RawMessage)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_AddNotification_Call) Return(err error) *MockFeatureNotificationRepository_AddNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationRepository_AddNotification_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, featureID domain.FeatureID, payload json.RawMessage) error) *MockFeatureNotificationRepository_AddNotification_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockFeatureNotificationRepository
func (_mock *MockFeatureNotificationRepository) GetByID(ctx context.Context, id domain.FeatureNotificationID) (domain.FeatureNotification, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.FeatureNotification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID) (domain.FeatureNotification, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID) domain.FeatureNotification); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.FeatureNotification)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureNotificationID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockFeatureNotificationRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureNotificationID
func (_e *MockFeatureNotificationRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockFeatureNotificationRepository_GetByID_Call {
	return &MockFeatureNotificationRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockFeatureNotificationRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.FeatureNotificationID)) *MockFeatureNotificationRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureNotificationID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationRepository_GetByID_Call) Return(featureNotification domain.FeatureNotification, err error) *MockFeatureNotificationRepository_GetByID_Call {
	_c.Call.Return(featureNotification, err)
	return _c
}

func (_c *MockFeatureNotificationRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureNotificationID) (domain.FeatureNotification, error)) *MockFeatureNotificationRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}
