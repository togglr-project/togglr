// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureNotificationsUseCase creates a new instance of MockFeatureNotificationsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureNotificationsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureNotificationsUseCase {
	mock := &MockFeatureNotificationsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureNotificationsUseCase is an autogenerated mock type for the FeatureNotificationsUseCase type
type MockFeatureNotificationsUseCase struct {
	mock.Mock
}

type MockFeatureNotificationsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureNotificationsUseCase) EXPECT() *MockFeatureNotificationsUseCase_Expecter {
	return &MockFeatureNotificationsUseCase_Expecter{mock: &_m.Mock}
}

// CreateNotificationSetting provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) CreateNotificationSetting(ctx context.Context, settingDTO domain.NotificationSettingDTO) (domain.NotificationSetting, error) {
	ret := _mock.Called(ctx, settingDTO)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationSetting")
	}

	var r0 domain.NotificationSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingDTO) (domain.NotificationSetting, error)); ok {
		return returnFunc(ctx, settingDTO)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingDTO) domain.NotificationSetting); ok {
		r0 = returnFunc(ctx, settingDTO)
	} else {
		r0 = ret.Get(0).(domain.NotificationSetting)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingDTO) error); ok {
		r1 = returnFunc(ctx, settingDTO)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationsUseCase_CreateNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationSetting'
type MockFeatureNotificationsUseCase_CreateNotificationSetting_Call struct {
	*mock.Call
}

// CreateNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - settingDTO domain.NotificationSettingDTO
func (_e *MockFeatureNotificationsUseCase_Expecter) CreateNotificationSetting(ctx interface{}, settingDTO interface{}) *MockFeatureNotificationsUseCase_CreateNotificationSetting_Call {
	return &MockFeatureNotificationsUseCase_CreateNotificationSetting_Call{Call: _e.mock.On("CreateNotificationSetting", ctx, settingDTO)}
}

func (_c *MockFeatureNotificationsUseCase_CreateNotificationSetting_Call) Run(run func(ctx context.Context, settingDTO domain.NotificationSettingDTO)) *MockFeatureNotificationsUseCase_CreateNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.NotificationSettingDTO
		if args[1] != nil {
			arg1 = args[1].(domain.NotificationSettingDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_CreateNotificationSetting_Call) Return(notificationSetting domain.NotificationSetting, err error) *MockFeatureNotificationsUseCase_CreateNotificationSetting_Call {
	_c.Call.Return(notificationSetting, err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_CreateNotificationSetting_Call) RunAndReturn(run func(ctx context.Context, settingDTO domain.NotificationSettingDTO) (domain.NotificationSetting, error)) *MockFeatureNotificationsUseCase_CreateNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationSetting provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) DeleteNotificationSetting(ctx context.Context, id domain.NotificationSettingID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationSetting'
type MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call struct {
	*mock.Call
}

// DeleteNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationSettingID
func (_e *MockFeatureNotificationsUseCase_Expecter) DeleteNotificationSetting(ctx interface{}, id interface{}) *MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call {
	return &MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call{Call: _e.mock.On("DeleteNotificationSetting", ctx, id)}
}

func (_c *MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call) Run(run func(ctx context.Context, id domain.NotificationSettingID)) *MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.NotificationSettingID
		if args[1] != nil {
			arg1 = args[1].(domain.NotificationSettingID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call) Return(err error) *MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call) RunAndReturn(run func(ctx context.Context, id domain.NotificationSettingID) error) *MockFeatureNotificationsUseCase_DeleteNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationSetting provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) GetNotificationSetting(ctx context.Context, id domain.NotificationSettingID) (domain.NotificationSetting, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSetting")
	}

	var r0 domain.NotificationSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) (domain.NotificationSetting, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) domain.NotificationSetting); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.NotificationSetting)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationsUseCase_GetNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSetting'
type MockFeatureNotificationsUseCase_GetNotificationSetting_Call struct {
	*mock.Call
}

// GetNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationSettingID
func (_e *MockFeatureNotificationsUseCase_Expecter) GetNotificationSetting(ctx interface{}, id interface{}) *MockFeatureNotificationsUseCase_GetNotificationSetting_Call {
	return &MockFeatureNotificationsUseCase_GetNotificationSetting_Call{Call: _e.mock.On("GetNotificationSetting", ctx, id)}
}

func (_c *MockFeatureNotificationsUseCase_GetNotificationSetting_Call) Run(run func(ctx context.Context, id domain.NotificationSettingID)) *MockFeatureNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.NotificationSettingID
		if args[1] != nil {
			arg1 = args[1].(domain.NotificationSettingID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_GetNotificationSetting_Call) Return(notificationSetting domain.NotificationSetting, err error) *MockFeatureNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Return(notificationSetting, err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_GetNotificationSetting_Call) RunAndReturn(run func(ctx context.Context, id domain.NotificationSettingID) (domain.NotificationSetting, error)) *MockFeatureNotificationsUseCase_GetNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotificationSettings provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) ListNotificationSettings(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) ([]domain.NotificationSetting, error) {
	ret := _mock.Called(ctx, projectID, envID)

	if len(ret) == 0 {
		panic("no return value specified for ListNotificationSettings")
	}

	var r0 []domain.NotificationSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) ([]domain.NotificationSetting, error)); ok {
		return returnFunc(ctx, projectID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) []domain.NotificationSetting); ok {
		r0 = returnFunc(ctx, projectID, envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, projectID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationsUseCase_ListNotificationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotificationSettings'
type MockFeatureNotificationsUseCase_ListNotificationSettings_Call struct {
	*mock.Call
}

// ListNotificationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - envID domain.EnvironmentID
func (_e *MockFeatureNotificationsUseCase_Expecter) ListNotificationSettings(ctx interface{}, projectID interface{}, envID interface{}) *MockFeatureNotificationsUseCase_ListNotificationSettings_Call {
	return &MockFeatureNotificationsUseCase_ListNotificationSettings_Call{Call: _e.mock.On("ListNotificationSettings", ctx, projectID, envID)}
}

func (_c *MockFeatureNotificationsUseCase_ListNotificationSettings_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID)) *MockFeatureNotificationsUseCase_ListNotificationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_ListNotificationSettings_Call) Return(notificationSettings []domain.NotificationSetting, err error) *MockFeatureNotificationsUseCase_ListNotificationSettings_Call {
	_c.Call.Return(notificationSettings, err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_ListNotificationSettings_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) ([]domain.NotificationSetting, error)) *MockFeatureNotificationsUseCase_ListNotificationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// MarkNotificationAsFailed provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) MarkNotificationAsFailed(ctx context.Context, id domain.FeatureNotificationID, reason string) error {
	ret := _mock.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkNotificationAsFailed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID, string) error); ok {
		r0 = returnFunc(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkNotificationAsFailed'
type MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call struct {
	*mock.Call
}

// MarkNotificationAsFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureNotificationID
//   - reason string
func (_e *MockFeatureNotificationsUseCase_Expecter) MarkNotificationAsFailed(ctx interface{}, id interface{}, reason interface{}) *MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call {
	return &MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call{Call: _e.mock.On("MarkNotificationAsFailed", ctx, id, reason)}
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call) Run(run func(ctx context.Context, id domain.FeatureNotificationID, reason string)) *MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureNotificationID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call) Return(err error) *MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureNotificationID, reason string) error) *MockFeatureNotificationsUseCase_MarkNotificationAsFailed_Call {
	_c.Call.Return(run)
	return _c
}

// MarkNotificationAsSent provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) MarkNotificationAsSent(ctx context.Context, id domain.FeatureNotificationID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkNotificationAsSent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkNotificationAsSent'
type MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call struct {
	*mock.Call
}

// MarkNotificationAsSent is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureNotificationID
func (_e *MockFeatureNotificationsUseCase_Expecter) MarkNotificationAsSent(ctx interface{}, id interface{}) *MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call {
	return &MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call{Call: _e.mock.On("MarkNotificationAsSent", ctx, id)}
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call) Run(run func(ctx context.Context, id domain.FeatureNotificationID)) *MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureNotificationID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call) Return(err error) *MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureNotificationID) error) *MockFeatureNotificationsUseCase_MarkNotificationAsSent_Call {
	_c.Call.Return(run)
	return _c
}

// MarkNotificationAsSkipped provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) MarkNotificationAsSkipped(ctx context.Context, id domain.FeatureNotificationID, reason string) error {
	ret := _mock.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkNotificationAsSkipped")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureNotificationID, string) error); ok {
		r0 = returnFunc(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkNotificationAsSkipped'
type MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call struct {
	*mock.Call
}

// MarkNotificationAsSkipped is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureNotificationID
//   - reason string
func (_e *MockFeatureNotificationsUseCase_Expecter) MarkNotificationAsSkipped(ctx interface{}, id interface{}, reason interface{}) *MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call {
	return &MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call{Call: _e.mock.On("MarkNotificationAsSkipped", ctx, id, reason)}
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call) Run(run func(ctx context.Context, id domain.FeatureNotificationID, reason string)) *MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureNotificationID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call) Return(err error) *MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureNotificationID, reason string) error) *MockFeatureNotificationsUseCase_MarkNotificationAsSkipped_Call {
	_c.Call.Return(run)
	return _c
}

// SendTestNotification provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) SendTestNotification(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, notificationSettingID domain.NotificationSettingID) error {
	ret := _mock.Called(ctx, projectID, envID, notificationSettingID)

	if len(ret) == 0 {
		panic("no return value specified for SendTestNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID, domain.NotificationSettingID) error); ok {
		r0 = returnFunc(ctx, projectID, envID, notificationSettingID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationsUseCase_SendTestNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTestNotification'
type MockFeatureNotificationsUseCase_SendTestNotification_Call struct {
	*mock.Call
}

// SendTestNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - envID domain.EnvironmentID
//   - notificationSettingID domain.NotificationSettingID
func (_e *MockFeatureNotificationsUseCase_Expecter) SendTestNotification(ctx interface{}, projectID interface{}, envID interface{}, notificationSettingID interface{}) *MockFeatureNotificationsUseCase_SendTestNotification_Call {
	return &MockFeatureNotificationsUseCase_SendTestNotification_Call{Call: _e.mock.On("SendTestNotification", ctx, projectID, envID, notificationSettingID)}
}

func (_c *MockFeatureNotificationsUseCase_SendTestNotification_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, notificationSettingID domain.NotificationSettingID)) *MockFeatureNotificationsUseCase_SendTestNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		var arg3 domain.NotificationSettingID
		if args[3] != nil {
			arg3 = args[3].(domain.NotificationSettingID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_SendTestNotification_Call) Return(err error) *MockFeatureNotificationsUseCase_SendTestNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_SendTestNotification_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID, notificationSettingID domain.NotificationSettingID) error) *MockFeatureNotificationsUseCase_SendTestNotification_Call {
	_c.Call.Return(run)
	return _c
}

// TakePendingNotificationsWithSettings provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) TakePendingNotificationsWithSettings(ctx context.Context, envID domain.EnvironmentID, limit uint) ([]domain.FeatureNotificationWithSettings, error) {
	ret := _mock.Called(ctx, envID, limit)

	if len(ret) == 0 {
		panic("no return value specified for TakePendingNotificationsWithSettings")
	}

	var r0 []domain.FeatureNotificationWithSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.EnvironmentID, uint) ([]domain.FeatureNotificationWithSettings, error)); ok {
		return returnFunc(ctx, envID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.EnvironmentID, uint) []domain.FeatureNotificationWithSettings); ok {
		r0 = returnFunc(ctx, envID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureNotificationWithSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.EnvironmentID, uint) error); ok {
		r1 = returnFunc(ctx, envID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakePendingNotificationsWithSettings'
type MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call struct {
	*mock.Call
}

// TakePendingNotificationsWithSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - envID domain.EnvironmentID
//   - limit uint
func (_e *MockFeatureNotificationsUseCase_Expecter) TakePendingNotificationsWithSettings(ctx interface{}, envID interface{}, limit interface{}) *MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call {
	return &MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call{Call: _e.mock.On("TakePendingNotificationsWithSettings", ctx, envID, limit)}
}

func (_c *MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call) Run(run func(ctx context.Context, envID domain.EnvironmentID, limit uint)) *MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.EnvironmentID
		if args[1] != nil {
			arg1 = args[1].(domain.EnvironmentID)
		}
		var arg2 uint
		if args[2] != nil {
			arg2 = args[2].(uint)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call) Return(featureNotificationWithSettingss []domain.FeatureNotificationWithSettings, err error) *MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call {
	_c.Call.Return(featureNotificationWithSettingss, err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call) RunAndReturn(run func(ctx context.Context, envID domain.EnvironmentID, limit uint) ([]domain.FeatureNotificationWithSettings, error)) *MockFeatureNotificationsUseCase_TakePendingNotificationsWithSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationSetting provides a mock function for the type MockFeatureNotificationsUseCase
func (_mock *MockFeatureNotificationsUseCase) UpdateNotificationSetting(ctx context.Context, setting domain.NotificationSetting) error {
	ret := _mock.Called(ctx, setting)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSetting) error); ok {
		r0 = returnFunc(ctx, setting)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationSetting'
type MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call struct {
	*mock.Call
}

// UpdateNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - setting domain.NotificationSetting
func (_e *MockFeatureNotificationsUseCase_Expecter) UpdateNotificationSetting(ctx interface{}, setting interface{}) *MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call {
	return &MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call{Call: _e.mock.On("UpdateNotificationSetting", ctx, setting)}
}

func (_c *MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call) Run(run func(ctx context.Context, setting domain.NotificationSetting)) *MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.NotificationSetting
		if args[1] != nil {
			arg1 = args[1].(domain.NotificationSetting)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call) Return(err error) *MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call) RunAndReturn(run func(ctx context.Context, setting domain.NotificationSetting) error) *MockFeatureNotificationsUseCase_UpdateNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}
