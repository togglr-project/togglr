// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockMembershipsRepository creates a new instance of MockMembershipsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMembershipsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMembershipsRepository {
	mock := &MockMembershipsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMembershipsRepository is an autogenerated mock type for the MembershipsRepository type
type MockMembershipsRepository struct {
	mock.Mock
}

type MockMembershipsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMembershipsRepository) EXPECT() *MockMembershipsRepository_Expecter {
	return &MockMembershipsRepository_Expecter{mock: &_m.Mock}
}

// GetForUserProject provides a mock function for the type MockMembershipsRepository
func (_mock *MockMembershipsRepository) GetForUserProject(ctx context.Context, userID int, projectID domain.ProjectID) (string, error) {
	ret := _mock.Called(ctx, userID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetForUserProject")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, domain.ProjectID) (string, error)); ok {
		return returnFunc(ctx, userID, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, domain.ProjectID) string); ok {
		r0 = returnFunc(ctx, userID, projectID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, userID, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsRepository_GetForUserProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForUserProject'
type MockMembershipsRepository_GetForUserProject_Call struct {
	*mock.Call
}

// GetForUserProject is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - projectID domain.ProjectID
func (_e *MockMembershipsRepository_Expecter) GetForUserProject(ctx interface{}, userID interface{}, projectID interface{}) *MockMembershipsRepository_GetForUserProject_Call {
	return &MockMembershipsRepository_GetForUserProject_Call{Call: _e.mock.On("GetForUserProject", ctx, userID, projectID)}
}

func (_c *MockMembershipsRepository_GetForUserProject_Call) Run(run func(ctx context.Context, userID int, projectID domain.ProjectID)) *MockMembershipsRepository_GetForUserProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 domain.ProjectID
		if args[2] != nil {
			arg2 = args[2].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMembershipsRepository_GetForUserProject_Call) Return(roleID string, err error) *MockMembershipsRepository_GetForUserProject_Call {
	_c.Call.Return(roleID, err)
	return _c
}

func (_c *MockMembershipsRepository_GetForUserProject_Call) RunAndReturn(run func(ctx context.Context, userID int, projectID domain.ProjectID) (string, error)) *MockMembershipsRepository_GetForUserProject_Call {
	_c.Call.Return(run)
	return _c
}
