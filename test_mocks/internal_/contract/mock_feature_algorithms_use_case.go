// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureAlgorithmsUseCase creates a new instance of MockFeatureAlgorithmsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureAlgorithmsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureAlgorithmsUseCase {
	mock := &MockFeatureAlgorithmsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureAlgorithmsUseCase is an autogenerated mock type for the FeatureAlgorithmsUseCase type
type MockFeatureAlgorithmsUseCase struct {
	mock.Mock
}

type MockFeatureAlgorithmsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureAlgorithmsUseCase) EXPECT() *MockFeatureAlgorithmsUseCase_Expecter {
	return &MockFeatureAlgorithmsUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFeatureAlgorithmsUseCase
func (_mock *MockFeatureAlgorithmsUseCase) Create(ctx context.Context, featureAlgorithm domain.FeatureAlgorithmDTO) error {
	ret := _mock.Called(ctx, featureAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureAlgorithmDTO) error); ok {
		r0 = returnFunc(ctx, featureAlgorithm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureAlgorithmsUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFeatureAlgorithmsUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - featureAlgorithm domain.FeatureAlgorithmDTO
func (_e *MockFeatureAlgorithmsUseCase_Expecter) Create(ctx interface{}, featureAlgorithm interface{}) *MockFeatureAlgorithmsUseCase_Create_Call {
	return &MockFeatureAlgorithmsUseCase_Create_Call{Call: _e.mock.On("Create", ctx, featureAlgorithm)}
}

func (_c *MockFeatureAlgorithmsUseCase_Create_Call) Run(run func(ctx context.Context, featureAlgorithm domain.FeatureAlgorithmDTO)) *MockFeatureAlgorithmsUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureAlgorithmDTO
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureAlgorithmDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_Create_Call) Return(err error) *MockFeatureAlgorithmsUseCase_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_Create_Call) RunAndReturn(run func(ctx context.Context, featureAlgorithm domain.FeatureAlgorithmDTO) error) *MockFeatureAlgorithmsUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByFeatureIDWithEnvID provides a mock function for the type MockFeatureAlgorithmsUseCase
func (_mock *MockFeatureAlgorithmsUseCase) DeleteByFeatureIDWithEnvID(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) error {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFeatureIDWithEnvID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByFeatureIDWithEnvID'
type MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call struct {
	*mock.Call
}

// DeleteByFeatureIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureAlgorithmsUseCase_Expecter) DeleteByFeatureIDWithEnvID(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call {
	return &MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call{Call: _e.mock.On("DeleteByFeatureIDWithEnvID", ctx, featureID, envID)}
}

func (_c *MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call) Return(err error) *MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) error) *MockFeatureAlgorithmsUseCase_DeleteByFeatureIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFeatureIDWithEnvID provides a mock function for the type MockFeatureAlgorithmsUseCase
func (_mock *MockFeatureAlgorithmsUseCase) GetByFeatureIDWithEnvID(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for GetByFeatureIDWithEnvID")
	}

	var r0 domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) (domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx, featureID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		r0 = ret.Get(0).(domain.FeatureAlgorithm)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, featureID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFeatureIDWithEnvID'
type MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call struct {
	*mock.Call
}

// GetByFeatureIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureAlgorithmsUseCase_Expecter) GetByFeatureIDWithEnvID(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call {
	return &MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call{Call: _e.mock.On("GetByFeatureIDWithEnvID", ctx, featureID, envID)}
}

func (_c *MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call) Return(featureAlgorithm domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call {
	_c.Call.Return(featureAlgorithm, err)
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsUseCase_GetByFeatureIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectIDWithEnvID provides a mock function for the type MockFeatureAlgorithmsUseCase
func (_mock *MockFeatureAlgorithmsUseCase) ListByProjectIDWithEnvID(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) ([]domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx, projectID, envID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectIDWithEnvID")
	}

	var r0 []domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) ([]domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx, projectID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) []domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx, projectID, envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, projectID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectIDWithEnvID'
type MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call struct {
	*mock.Call
}

// ListByProjectIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - envID domain.EnvironmentID
func (_e *MockFeatureAlgorithmsUseCase_Expecter) ListByProjectIDWithEnvID(ctx interface{}, projectID interface{}, envID interface{}) *MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call {
	return &MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call{Call: _e.mock.On("ListByProjectIDWithEnvID", ctx, projectID, envID)}
}

func (_c *MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID)) *MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call) Return(featureAlgorithms []domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call {
	_c.Call.Return(featureAlgorithms, err)
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) ([]domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsUseCase_ListByProjectIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFeatureAlgorithmsUseCase
func (_mock *MockFeatureAlgorithmsUseCase) Update(ctx context.Context, featureAlgorithm domain.FeatureAlgorithm) error {
	ret := _mock.Called(ctx, featureAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureAlgorithm) error); ok {
		r0 = returnFunc(ctx, featureAlgorithm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureAlgorithmsUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFeatureAlgorithmsUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - featureAlgorithm domain.FeatureAlgorithm
func (_e *MockFeatureAlgorithmsUseCase_Expecter) Update(ctx interface{}, featureAlgorithm interface{}) *MockFeatureAlgorithmsUseCase_Update_Call {
	return &MockFeatureAlgorithmsUseCase_Update_Call{Call: _e.mock.On("Update", ctx, featureAlgorithm)}
}

func (_c *MockFeatureAlgorithmsUseCase_Update_Call) Run(run func(ctx context.Context, featureAlgorithm domain.FeatureAlgorithm)) *MockFeatureAlgorithmsUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureAlgorithm
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureAlgorithm)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_Update_Call) Return(err error) *MockFeatureAlgorithmsUseCase_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureAlgorithmsUseCase_Update_Call) RunAndReturn(run func(ctx context.Context, featureAlgorithm domain.FeatureAlgorithm) error) *MockFeatureAlgorithmsUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}
