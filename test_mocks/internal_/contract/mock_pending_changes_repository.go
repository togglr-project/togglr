// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockPendingChangesRepository creates a new instance of MockPendingChangesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPendingChangesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPendingChangesRepository {
	mock := &MockPendingChangesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPendingChangesRepository is an autogenerated mock type for the PendingChangesRepository type
type MockPendingChangesRepository struct {
	mock.Mock
}

type MockPendingChangesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPendingChangesRepository) EXPECT() *MockPendingChangesRepository_Expecter {
	return &MockPendingChangesRepository_Expecter{mock: &_m.Mock}
}

// CheckEntityConflict provides a mock function for the type MockPendingChangesRepository
func (_mock *MockPendingChangesRepository) CheckEntityConflict(ctx context.Context, entities []domain.EntityChange) error {
	ret := _mock.Called(ctx, entities)

	if len(ret) == 0 {
		panic("no return value specified for CheckEntityConflict")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.EntityChange) error); ok {
		r0 = returnFunc(ctx, entities)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPendingChangesRepository_CheckEntityConflict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEntityConflict'
type MockPendingChangesRepository_CheckEntityConflict_Call struct {
	*mock.Call
}

// CheckEntityConflict is a helper method to define mock.On call
//   - ctx context.Context
//   - entities []domain.EntityChange
func (_e *MockPendingChangesRepository_Expecter) CheckEntityConflict(ctx interface{}, entities interface{}) *MockPendingChangesRepository_CheckEntityConflict_Call {
	return &MockPendingChangesRepository_CheckEntityConflict_Call{Call: _e.mock.On("CheckEntityConflict", ctx, entities)}
}

func (_c *MockPendingChangesRepository_CheckEntityConflict_Call) Run(run func(ctx context.Context, entities []domain.EntityChange)) *MockPendingChangesRepository_CheckEntityConflict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.EntityChange
		if args[1] != nil {
			arg1 = args[1].([]domain.EntityChange)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesRepository_CheckEntityConflict_Call) Return(err error) *MockPendingChangesRepository_CheckEntityConflict_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPendingChangesRepository_CheckEntityConflict_Call) RunAndReturn(run func(ctx context.Context, entities []domain.EntityChange) error) *MockPendingChangesRepository_CheckEntityConflict_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockPendingChangesRepository
func (_mock *MockPendingChangesRepository) Create(ctx context.Context, projectID domain.ProjectID, requestedBy string, requestUserID *int, change domain.PendingChangePayload) (domain.PendingChange, error) {
	ret := _mock.Called(ctx, projectID, requestedBy, requestUserID, change)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.PendingChange
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, *int, domain.PendingChangePayload) (domain.PendingChange, error)); ok {
		return returnFunc(ctx, projectID, requestedBy, requestUserID, change)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, *int, domain.PendingChangePayload) domain.PendingChange); ok {
		r0 = returnFunc(ctx, projectID, requestedBy, requestUserID, change)
	} else {
		r0 = ret.Get(0).(domain.PendingChange)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, *int, domain.PendingChangePayload) error); ok {
		r1 = returnFunc(ctx, projectID, requestedBy, requestUserID, change)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPendingChangesRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - requestedBy string
//   - requestUserID *int
//   - change domain.PendingChangePayload
func (_e *MockPendingChangesRepository_Expecter) Create(ctx interface{}, projectID interface{}, requestedBy interface{}, requestUserID interface{}, change interface{}) *MockPendingChangesRepository_Create_Call {
	return &MockPendingChangesRepository_Create_Call{Call: _e.mock.On("Create", ctx, projectID, requestedBy, requestUserID, change)}
}

func (_c *MockPendingChangesRepository_Create_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, requestedBy string, requestUserID *int, change domain.PendingChangePayload)) *MockPendingChangesRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *int
		if args[3] != nil {
			arg3 = args[3].(*int)
		}
		var arg4 domain.PendingChangePayload
		if args[4] != nil {
			arg4 = args[4].(domain.PendingChangePayload)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockPendingChangesRepository_Create_Call) Return(pendingChange domain.PendingChange, err error) *MockPendingChangesRepository_Create_Call {
	_c.Call.Return(pendingChange, err)
	return _c
}

func (_c *MockPendingChangesRepository_Create_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, requestedBy string, requestUserID *int, change domain.PendingChangePayload) (domain.PendingChange, error)) *MockPendingChangesRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockPendingChangesRepository
func (_mock *MockPendingChangesRepository) GetByID(ctx context.Context, id domain.PendingChangeID) (domain.PendingChange, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.PendingChange
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID) (domain.PendingChange, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID) domain.PendingChange); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.PendingChange)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.PendingChangeID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockPendingChangesRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.PendingChangeID
func (_e *MockPendingChangesRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockPendingChangesRepository_GetByID_Call {
	return &MockPendingChangesRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockPendingChangesRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.PendingChangeID)) *MockPendingChangesRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PendingChangeID
		if args[1] != nil {
			arg1 = args[1].(domain.PendingChangeID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesRepository_GetByID_Call) Return(pendingChange domain.PendingChange, err error) *MockPendingChangesRepository_GetByID_Call {
	_c.Call.Return(pendingChange, err)
	return _c
}

func (_c *MockPendingChangesRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.PendingChangeID) (domain.PendingChange, error)) *MockPendingChangesRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntitiesByPendingChangeID provides a mock function for the type MockPendingChangesRepository
func (_mock *MockPendingChangesRepository) GetEntitiesByPendingChangeID(ctx context.Context, pendingChangeID domain.PendingChangeID) ([]domain.PendingChangeEntity, error) {
	ret := _mock.Called(ctx, pendingChangeID)

	if len(ret) == 0 {
		panic("no return value specified for GetEntitiesByPendingChangeID")
	}

	var r0 []domain.PendingChangeEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID) ([]domain.PendingChangeEntity, error)); ok {
		return returnFunc(ctx, pendingChangeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID) []domain.PendingChangeEntity); ok {
		r0 = returnFunc(ctx, pendingChangeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PendingChangeEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.PendingChangeID) error); ok {
		r1 = returnFunc(ctx, pendingChangeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntitiesByPendingChangeID'
type MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call struct {
	*mock.Call
}

// GetEntitiesByPendingChangeID is a helper method to define mock.On call
//   - ctx context.Context
//   - pendingChangeID domain.PendingChangeID
func (_e *MockPendingChangesRepository_Expecter) GetEntitiesByPendingChangeID(ctx interface{}, pendingChangeID interface{}) *MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call {
	return &MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call{Call: _e.mock.On("GetEntitiesByPendingChangeID", ctx, pendingChangeID)}
}

func (_c *MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call) Run(run func(ctx context.Context, pendingChangeID domain.PendingChangeID)) *MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PendingChangeID
		if args[1] != nil {
			arg1 = args[1].(domain.PendingChangeID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call) Return(pendingChangeEntitys []domain.PendingChangeEntity, err error) *MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call {
	_c.Call.Return(pendingChangeEntitys, err)
	return _c
}

func (_c *MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call) RunAndReturn(run func(ctx context.Context, pendingChangeID domain.PendingChangeID) ([]domain.PendingChangeEntity, error)) *MockPendingChangesRepository_GetEntitiesByPendingChangeID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockPendingChangesRepository
func (_mock *MockPendingChangesRepository) List(ctx context.Context, filter contract.PendingChangesListFilter) ([]domain.PendingChange, int, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.PendingChange
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, contract.PendingChangesListFilter) ([]domain.PendingChange, int, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, contract.PendingChangesListFilter) []domain.PendingChange); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PendingChange)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, contract.PendingChangesListFilter) int); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, contract.PendingChangesListFilter) error); ok {
		r2 = returnFunc(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPendingChangesRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPendingChangesRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter contract.PendingChangesListFilter
func (_e *MockPendingChangesRepository_Expecter) List(ctx interface{}, filter interface{}) *MockPendingChangesRepository_List_Call {
	return &MockPendingChangesRepository_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *MockPendingChangesRepository_List_Call) Run(run func(ctx context.Context, filter contract.PendingChangesListFilter)) *MockPendingChangesRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 contract.PendingChangesListFilter
		if args[1] != nil {
			arg1 = args[1].(contract.PendingChangesListFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesRepository_List_Call) Return(pendingChanges []domain.PendingChange, n int, err error) *MockPendingChangesRepository_List_Call {
	_c.Call.Return(pendingChanges, n, err)
	return _c
}

func (_c *MockPendingChangesRepository_List_Call) RunAndReturn(run func(ctx context.Context, filter contract.PendingChangesListFilter) ([]domain.PendingChange, int, error)) *MockPendingChangesRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockPendingChangesRepository
func (_mock *MockPendingChangesRepository) UpdateStatus(ctx context.Context, id domain.PendingChangeID, status domain.PendingChangeStatus, approvedBy *string, approvedUserID *int, approvedAt *string, rejectedBy *string, rejectedAt *string, rejectionReason *string) error {
	ret := _mock.Called(ctx, id, status, approvedBy, approvedUserID, approvedAt, rejectedBy, rejectedAt, rejectionReason)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID, domain.PendingChangeStatus, *string, *int, *string, *string, *string, *string) error); ok {
		r0 = returnFunc(ctx, id, status, approvedBy, approvedUserID, approvedAt, rejectedBy, rejectedAt, rejectionReason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPendingChangesRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockPendingChangesRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.PendingChangeID
//   - status domain.PendingChangeStatus
//   - approvedBy *string
//   - approvedUserID *int
//   - approvedAt *string
//   - rejectedBy *string
//   - rejectedAt *string
//   - rejectionReason *string
func (_e *MockPendingChangesRepository_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}, approvedBy interface{}, approvedUserID interface{}, approvedAt interface{}, rejectedBy interface{}, rejectedAt interface{}, rejectionReason interface{}) *MockPendingChangesRepository_UpdateStatus_Call {
	return &MockPendingChangesRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status, approvedBy, approvedUserID, approvedAt, rejectedBy, rejectedAt, rejectionReason)}
}

func (_c *MockPendingChangesRepository_UpdateStatus_Call) Run(run func(ctx context.Context, id domain.PendingChangeID, status domain.PendingChangeStatus, approvedBy *string, approvedUserID *int, approvedAt *string, rejectedBy *string, rejectedAt *string, rejectionReason *string)) *MockPendingChangesRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PendingChangeID
		if args[1] != nil {
			arg1 = args[1].(domain.PendingChangeID)
		}
		var arg2 domain.PendingChangeStatus
		if args[2] != nil {
			arg2 = args[2].(domain.PendingChangeStatus)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *int
		if args[4] != nil {
			arg4 = args[4].(*int)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		var arg6 *string
		if args[6] != nil {
			arg6 = args[6].(*string)
		}
		var arg7 *string
		if args[7] != nil {
			arg7 = args[7].(*string)
		}
		var arg8 *string
		if args[8] != nil {
			arg8 = args[8].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
		)
	})
	return _c
}

func (_c *MockPendingChangesRepository_UpdateStatus_Call) Return(err error) *MockPendingChangesRepository_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPendingChangesRepository_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id domain.PendingChangeID, status domain.PendingChangeStatus, approvedBy *string, approvedUserID *int, approvedAt *string, rejectedBy *string, rejectedAt *string, rejectionReason *string) error) *MockPendingChangesRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}
