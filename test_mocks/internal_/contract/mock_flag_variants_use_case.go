// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFlagVariantsUseCase creates a new instance of MockFlagVariantsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFlagVariantsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFlagVariantsUseCase {
	mock := &MockFlagVariantsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFlagVariantsUseCase is an autogenerated mock type for the FlagVariantsUseCase type
type MockFlagVariantsUseCase struct {
	mock.Mock
}

type MockFlagVariantsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFlagVariantsUseCase) EXPECT() *MockFlagVariantsUseCase_Expecter {
	return &MockFlagVariantsUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFlagVariantsUseCase
func (_mock *MockFlagVariantsUseCase) Create(ctx context.Context, variant domain.FlagVariant) (domain.FlagVariant, error) {
	ret := _mock.Called(ctx, variant)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.FlagVariant
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FlagVariant) (domain.FlagVariant, error)); ok {
		return returnFunc(ctx, variant)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FlagVariant) domain.FlagVariant); ok {
		r0 = returnFunc(ctx, variant)
	} else {
		r0 = ret.Get(0).(domain.FlagVariant)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FlagVariant) error); ok {
		r1 = returnFunc(ctx, variant)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFlagVariantsUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFlagVariantsUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - variant domain.FlagVariant
func (_e *MockFlagVariantsUseCase_Expecter) Create(ctx interface{}, variant interface{}) *MockFlagVariantsUseCase_Create_Call {
	return &MockFlagVariantsUseCase_Create_Call{Call: _e.mock.On("Create", ctx, variant)}
}

func (_c *MockFlagVariantsUseCase_Create_Call) Run(run func(ctx context.Context, variant domain.FlagVariant)) *MockFlagVariantsUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FlagVariant
		if args[1] != nil {
			arg1 = args[1].(domain.FlagVariant)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFlagVariantsUseCase_Create_Call) Return(flagVariant domain.FlagVariant, err error) *MockFlagVariantsUseCase_Create_Call {
	_c.Call.Return(flagVariant, err)
	return _c
}

func (_c *MockFlagVariantsUseCase_Create_Call) RunAndReturn(run func(ctx context.Context, variant domain.FlagVariant) (domain.FlagVariant, error)) *MockFlagVariantsUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockFlagVariantsUseCase
func (_mock *MockFlagVariantsUseCase) Delete(ctx context.Context, id domain.FlagVariantID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FlagVariantID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFlagVariantsUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFlagVariantsUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FlagVariantID
func (_e *MockFlagVariantsUseCase_Expecter) Delete(ctx interface{}, id interface{}) *MockFlagVariantsUseCase_Delete_Call {
	return &MockFlagVariantsUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockFlagVariantsUseCase_Delete_Call) Run(run func(ctx context.Context, id domain.FlagVariantID)) *MockFlagVariantsUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FlagVariantID
		if args[1] != nil {
			arg1 = args[1].(domain.FlagVariantID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFlagVariantsUseCase_Delete_Call) Return(err error) *MockFlagVariantsUseCase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFlagVariantsUseCase_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.FlagVariantID) error) *MockFlagVariantsUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockFlagVariantsUseCase
func (_mock *MockFlagVariantsUseCase) GetByID(ctx context.Context, id domain.FlagVariantID) (domain.FlagVariant, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.FlagVariant
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FlagVariantID) (domain.FlagVariant, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FlagVariantID) domain.FlagVariant); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.FlagVariant)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FlagVariantID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFlagVariantsUseCase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockFlagVariantsUseCase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FlagVariantID
func (_e *MockFlagVariantsUseCase_Expecter) GetByID(ctx interface{}, id interface{}) *MockFlagVariantsUseCase_GetByID_Call {
	return &MockFlagVariantsUseCase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockFlagVariantsUseCase_GetByID_Call) Run(run func(ctx context.Context, id domain.FlagVariantID)) *MockFlagVariantsUseCase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FlagVariantID
		if args[1] != nil {
			arg1 = args[1].(domain.FlagVariantID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFlagVariantsUseCase_GetByID_Call) Return(flagVariant domain.FlagVariant, err error) *MockFlagVariantsUseCase_GetByID_Call {
	_c.Call.Return(flagVariant, err)
	return _c
}

func (_c *MockFlagVariantsUseCase_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.FlagVariantID) (domain.FlagVariant, error)) *MockFlagVariantsUseCase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockFlagVariantsUseCase
func (_mock *MockFlagVariantsUseCase) List(ctx context.Context) ([]domain.FlagVariant, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.FlagVariant
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.FlagVariant, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.FlagVariant); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FlagVariant)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFlagVariantsUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFlagVariantsUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFlagVariantsUseCase_Expecter) List(ctx interface{}) *MockFlagVariantsUseCase_List_Call {
	return &MockFlagVariantsUseCase_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockFlagVariantsUseCase_List_Call) Run(run func(ctx context.Context)) *MockFlagVariantsUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFlagVariantsUseCase_List_Call) Return(flagVariants []domain.FlagVariant, err error) *MockFlagVariantsUseCase_List_Call {
	_c.Call.Return(flagVariants, err)
	return _c
}

func (_c *MockFlagVariantsUseCase_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.FlagVariant, error)) *MockFlagVariantsUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFeatureID provides a mock function for the type MockFlagVariantsUseCase
func (_mock *MockFlagVariantsUseCase) ListByFeatureID(ctx context.Context, featureID domain.FeatureID) ([]domain.FlagVariant, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFeatureID")
	}

	var r0 []domain.FlagVariant
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) ([]domain.FlagVariant, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) []domain.FlagVariant); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FlagVariant)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFlagVariantsUseCase_ListByFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFeatureID'
type MockFlagVariantsUseCase_ListByFeatureID_Call struct {
	*mock.Call
}

// ListByFeatureID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockFlagVariantsUseCase_Expecter) ListByFeatureID(ctx interface{}, featureID interface{}) *MockFlagVariantsUseCase_ListByFeatureID_Call {
	return &MockFlagVariantsUseCase_ListByFeatureID_Call{Call: _e.mock.On("ListByFeatureID", ctx, featureID)}
}

func (_c *MockFlagVariantsUseCase_ListByFeatureID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockFlagVariantsUseCase_ListByFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFlagVariantsUseCase_ListByFeatureID_Call) Return(flagVariants []domain.FlagVariant, err error) *MockFlagVariantsUseCase_ListByFeatureID_Call {
	_c.Call.Return(flagVariants, err)
	return _c
}

func (_c *MockFlagVariantsUseCase_ListByFeatureID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) ([]domain.FlagVariant, error)) *MockFlagVariantsUseCase_ListByFeatureID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFlagVariantsUseCase
func (_mock *MockFlagVariantsUseCase) Update(ctx context.Context, variant domain.FlagVariant) (domain.FlagVariant, error) {
	ret := _mock.Called(ctx, variant)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.FlagVariant
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FlagVariant) (domain.FlagVariant, error)); ok {
		return returnFunc(ctx, variant)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FlagVariant) domain.FlagVariant); ok {
		r0 = returnFunc(ctx, variant)
	} else {
		r0 = ret.Get(0).(domain.FlagVariant)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FlagVariant) error); ok {
		r1 = returnFunc(ctx, variant)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFlagVariantsUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFlagVariantsUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - variant domain.FlagVariant
func (_e *MockFlagVariantsUseCase_Expecter) Update(ctx interface{}, variant interface{}) *MockFlagVariantsUseCase_Update_Call {
	return &MockFlagVariantsUseCase_Update_Call{Call: _e.mock.On("Update", ctx, variant)}
}

func (_c *MockFlagVariantsUseCase_Update_Call) Run(run func(ctx context.Context, variant domain.FlagVariant)) *MockFlagVariantsUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FlagVariant
		if args[1] != nil {
			arg1 = args[1].(domain.FlagVariant)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFlagVariantsUseCase_Update_Call) Return(flagVariant domain.FlagVariant, err error) *MockFlagVariantsUseCase_Update_Call {
	_c.Call.Return(flagVariant, err)
	return _c
}

func (_c *MockFlagVariantsUseCase_Update_Call) RunAndReturn(run func(ctx context.Context, variant domain.FlagVariant) (domain.FlagVariant, error)) *MockFlagVariantsUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}
