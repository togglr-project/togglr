// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockAlgorithmsProcessor creates a new instance of MockAlgorithmsProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAlgorithmsProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAlgorithmsProcessor {
	mock := &MockAlgorithmsProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAlgorithmsProcessor is an autogenerated mock type for the AlgorithmsProcessor type
type MockAlgorithmsProcessor struct {
	mock.Mock
}

type MockAlgorithmsProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAlgorithmsProcessor) EXPECT() *MockAlgorithmsProcessor_Expecter {
	return &MockAlgorithmsProcessor_Expecter{mock: &_m.Mock}
}

// EvaluateFeature provides a mock function for the type MockAlgorithmsProcessor
func (_mock *MockAlgorithmsProcessor) EvaluateFeature(featureKy string, envKey string) (string, bool) {
	ret := _mock.Called(featureKy, envKey)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateFeature")
	}

	var r0 string
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, bool)); ok {
		return returnFunc(featureKy, envKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(featureKy, envKey)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = returnFunc(featureKy, envKey)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockAlgorithmsProcessor_EvaluateFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluateFeature'
type MockAlgorithmsProcessor_EvaluateFeature_Call struct {
	*mock.Call
}

// EvaluateFeature is a helper method to define mock.On call
//   - featureKy string
//   - envKey string
func (_e *MockAlgorithmsProcessor_Expecter) EvaluateFeature(featureKy interface{}, envKey interface{}) *MockAlgorithmsProcessor_EvaluateFeature_Call {
	return &MockAlgorithmsProcessor_EvaluateFeature_Call{Call: _e.mock.On("EvaluateFeature", featureKy, envKey)}
}

func (_c *MockAlgorithmsProcessor_EvaluateFeature_Call) Run(run func(featureKy string, envKey string)) *MockAlgorithmsProcessor_EvaluateFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAlgorithmsProcessor_EvaluateFeature_Call) Return(s string, b bool) *MockAlgorithmsProcessor_EvaluateFeature_Call {
	_c.Call.Return(s, b)
	return _c
}

func (_c *MockAlgorithmsProcessor_EvaluateFeature_Call) RunAndReturn(run func(featureKy string, envKey string) (string, bool)) *MockAlgorithmsProcessor_EvaluateFeature_Call {
	_c.Call.Return(run)
	return _c
}

// HandleTrackEvent provides a mock function for the type MockAlgorithmsProcessor
func (_mock *MockAlgorithmsProcessor) HandleTrackEvent(featureKey string, envKey string, variantKey string, eventType domain.FeedbackEventType, metric decimal.Decimal) {
	_mock.Called(featureKey, envKey, variantKey, eventType, metric)
	return
}

// MockAlgorithmsProcessor_HandleTrackEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleTrackEvent'
type MockAlgorithmsProcessor_HandleTrackEvent_Call struct {
	*mock.Call
}

// HandleTrackEvent is a helper method to define mock.On call
//   - featureKey string
//   - envKey string
//   - variantKey string
//   - eventType domain.FeedbackEventType
//   - metric decimal.Decimal
func (_e *MockAlgorithmsProcessor_Expecter) HandleTrackEvent(featureKey interface{}, envKey interface{}, variantKey interface{}, eventType interface{}, metric interface{}) *MockAlgorithmsProcessor_HandleTrackEvent_Call {
	return &MockAlgorithmsProcessor_HandleTrackEvent_Call{Call: _e.mock.On("HandleTrackEvent", featureKey, envKey, variantKey, eventType, metric)}
}

func (_c *MockAlgorithmsProcessor_HandleTrackEvent_Call) Run(run func(featureKey string, envKey string, variantKey string, eventType domain.FeedbackEventType, metric decimal.Decimal)) *MockAlgorithmsProcessor_HandleTrackEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 domain.FeedbackEventType
		if args[3] != nil {
			arg3 = args[3].(domain.FeedbackEventType)
		}
		var arg4 decimal.Decimal
		if args[4] != nil {
			arg4 = args[4].(decimal.Decimal)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockAlgorithmsProcessor_HandleTrackEvent_Call) Return() *MockAlgorithmsProcessor_HandleTrackEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAlgorithmsProcessor_HandleTrackEvent_Call) RunAndReturn(run func(featureKey string, envKey string, variantKey string, eventType domain.FeedbackEventType, metric decimal.Decimal)) *MockAlgorithmsProcessor_HandleTrackEvent_Call {
	_c.Run(run)
	return _c
}

// HasAlgorithm provides a mock function for the type MockAlgorithmsProcessor
func (_mock *MockAlgorithmsProcessor) HasAlgorithm(featureKey string, envKey string) bool {
	ret := _mock.Called(featureKey, envKey)

	if len(ret) == 0 {
		panic("no return value specified for HasAlgorithm")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(featureKey, envKey)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockAlgorithmsProcessor_HasAlgorithm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasAlgorithm'
type MockAlgorithmsProcessor_HasAlgorithm_Call struct {
	*mock.Call
}

// HasAlgorithm is a helper method to define mock.On call
//   - featureKey string
//   - envKey string
func (_e *MockAlgorithmsProcessor_Expecter) HasAlgorithm(featureKey interface{}, envKey interface{}) *MockAlgorithmsProcessor_HasAlgorithm_Call {
	return &MockAlgorithmsProcessor_HasAlgorithm_Call{Call: _e.mock.On("HasAlgorithm", featureKey, envKey)}
}

func (_c *MockAlgorithmsProcessor_HasAlgorithm_Call) Run(run func(featureKey string, envKey string)) *MockAlgorithmsProcessor_HasAlgorithm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAlgorithmsProcessor_HasAlgorithm_Call) Return(b bool) *MockAlgorithmsProcessor_HasAlgorithm_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockAlgorithmsProcessor_HasAlgorithm_Call) RunAndReturn(run func(featureKey string, envKey string) bool) *MockAlgorithmsProcessor_HasAlgorithm_Call {
	_c.Call.Return(run)
	return _c
}
