// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockProjectApproversRepository creates a new instance of MockProjectApproversRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectApproversRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectApproversRepository {
	mock := &MockProjectApproversRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectApproversRepository is an autogenerated mock type for the ProjectApproversRepository type
type MockProjectApproversRepository struct {
	mock.Mock
}

type MockProjectApproversRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectApproversRepository) EXPECT() *MockProjectApproversRepository_Expecter {
	return &MockProjectApproversRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProjectApproversRepository
func (_mock *MockProjectApproversRepository) Create(ctx context.Context, approver domain.ProjectApprover) error {
	ret := _mock.Called(ctx, approver)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectApprover) error); ok {
		r0 = returnFunc(ctx, approver)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectApproversRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectApproversRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - approver domain.ProjectApprover
func (_e *MockProjectApproversRepository_Expecter) Create(ctx interface{}, approver interface{}) *MockProjectApproversRepository_Create_Call {
	return &MockProjectApproversRepository_Create_Call{Call: _e.mock.On("Create", ctx, approver)}
}

func (_c *MockProjectApproversRepository_Create_Call) Run(run func(ctx context.Context, approver domain.ProjectApprover)) *MockProjectApproversRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectApprover
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectApprover)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectApproversRepository_Create_Call) Return(err error) *MockProjectApproversRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectApproversRepository_Create_Call) RunAndReturn(run func(ctx context.Context, approver domain.ProjectApprover) error) *MockProjectApproversRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectApproversRepository
func (_mock *MockProjectApproversRepository) Delete(ctx context.Context, projectID domain.ProjectID, userID int) error {
	ret := _mock.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, int) error); ok {
		r0 = returnFunc(ctx, projectID, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectApproversRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectApproversRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - userID int
func (_e *MockProjectApproversRepository_Expecter) Delete(ctx interface{}, projectID interface{}, userID interface{}) *MockProjectApproversRepository_Delete_Call {
	return &MockProjectApproversRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, userID)}
}

func (_c *MockProjectApproversRepository_Delete_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, userID int)) *MockProjectApproversRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProjectApproversRepository_Delete_Call) Return(err error) *MockProjectApproversRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectApproversRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, userID int) error) *MockProjectApproversRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function for the type MockProjectApproversRepository
func (_mock *MockProjectApproversRepository) GetByProjectID(ctx context.Context, projectID domain.ProjectID) ([]domain.ProjectApprover, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []domain.ProjectApprover
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.ProjectApprover, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.ProjectApprover); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectApprover)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectApproversRepository_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type MockProjectApproversRepository_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockProjectApproversRepository_Expecter) GetByProjectID(ctx interface{}, projectID interface{}) *MockProjectApproversRepository_GetByProjectID_Call {
	return &MockProjectApproversRepository_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", ctx, projectID)}
}

func (_c *MockProjectApproversRepository_GetByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockProjectApproversRepository_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectApproversRepository_GetByProjectID_Call) Return(projectApprovers []domain.ProjectApprover, err error) *MockProjectApproversRepository_GetByProjectID_Call {
	_c.Call.Return(projectApprovers, err)
	return _c
}

func (_c *MockProjectApproversRepository_GetByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.ProjectApprover, error)) *MockProjectApproversRepository_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserApprover provides a mock function for the type MockProjectApproversRepository
func (_mock *MockProjectApproversRepository) IsUserApprover(ctx context.Context, projectID domain.ProjectID, userID int) (bool, error) {
	ret := _mock.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserApprover")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, int) (bool, error)); ok {
		return returnFunc(ctx, projectID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, int) bool); ok {
		r0 = returnFunc(ctx, projectID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, int) error); ok {
		r1 = returnFunc(ctx, projectID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectApproversRepository_IsUserApprover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserApprover'
type MockProjectApproversRepository_IsUserApprover_Call struct {
	*mock.Call
}

// IsUserApprover is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - userID int
func (_e *MockProjectApproversRepository_Expecter) IsUserApprover(ctx interface{}, projectID interface{}, userID interface{}) *MockProjectApproversRepository_IsUserApprover_Call {
	return &MockProjectApproversRepository_IsUserApprover_Call{Call: _e.mock.On("IsUserApprover", ctx, projectID, userID)}
}

func (_c *MockProjectApproversRepository_IsUserApprover_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, userID int)) *MockProjectApproversRepository_IsUserApprover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProjectApproversRepository_IsUserApprover_Call) Return(b bool, err error) *MockProjectApproversRepository_IsUserApprover_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProjectApproversRepository_IsUserApprover_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, userID int) (bool, error)) *MockProjectApproversRepository_IsUserApprover_Call {
	_c.Call.Return(run)
	return _c
}
