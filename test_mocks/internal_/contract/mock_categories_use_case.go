// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCategoriesUseCase creates a new instance of MockCategoriesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoriesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoriesUseCase {
	mock := &MockCategoriesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoriesUseCase is an autogenerated mock type for the CategoriesUseCase type
type MockCategoriesUseCase struct {
	mock.Mock
}

type MockCategoriesUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoriesUseCase) EXPECT() *MockCategoriesUseCase_Expecter {
	return &MockCategoriesUseCase_Expecter{mock: &_m.Mock}
}

// CreateCategory provides a mock function for the type MockCategoriesUseCase
func (_mock *MockCategoriesUseCase) CreateCategory(ctx context.Context, name string, slug string, description *string, color *string) (domain.Category, error) {
	ret := _mock.Called(ctx, name, slug, description, color)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *string, *string) (domain.Category, error)); ok {
		return returnFunc(ctx, name, slug, description, color)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *string, *string) domain.Category); ok {
		r0 = returnFunc(ctx, name, slug, description, color)
	} else {
		r0 = ret.Get(0).(domain.Category)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *string, *string) error); ok {
		r1 = returnFunc(ctx, name, slug, description, color)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoriesUseCase_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type MockCategoriesUseCase_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - slug string
//   - description *string
//   - color *string
func (_e *MockCategoriesUseCase_Expecter) CreateCategory(ctx interface{}, name interface{}, slug interface{}, description interface{}, color interface{}) *MockCategoriesUseCase_CreateCategory_Call {
	return &MockCategoriesUseCase_CreateCategory_Call{Call: _e.mock.On("CreateCategory", ctx, name, slug, description, color)}
}

func (_c *MockCategoriesUseCase_CreateCategory_Call) Run(run func(ctx context.Context, name string, slug string, description *string, color *string)) *MockCategoriesUseCase_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockCategoriesUseCase_CreateCategory_Call) Return(category domain.Category, err error) *MockCategoriesUseCase_CreateCategory_Call {
	_c.Call.Return(category, err)
	return _c
}

func (_c *MockCategoriesUseCase_CreateCategory_Call) RunAndReturn(run func(ctx context.Context, name string, slug string, description *string, color *string) (domain.Category, error)) *MockCategoriesUseCase_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function for the type MockCategoriesUseCase
func (_mock *MockCategoriesUseCase) DeleteCategory(ctx context.Context, id domain.CategoryID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoriesUseCase_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type MockCategoriesUseCase_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.CategoryID
func (_e *MockCategoriesUseCase_Expecter) DeleteCategory(ctx interface{}, id interface{}) *MockCategoriesUseCase_DeleteCategory_Call {
	return &MockCategoriesUseCase_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory", ctx, id)}
}

func (_c *MockCategoriesUseCase_DeleteCategory_Call) Run(run func(ctx context.Context, id domain.CategoryID)) *MockCategoriesUseCase_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CategoryID
		if args[1] != nil {
			arg1 = args[1].(domain.CategoryID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoriesUseCase_DeleteCategory_Call) Return(err error) *MockCategoriesUseCase_DeleteCategory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoriesUseCase_DeleteCategory_Call) RunAndReturn(run func(ctx context.Context, id domain.CategoryID) error) *MockCategoriesUseCase_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategory provides a mock function for the type MockCategoriesUseCase
func (_mock *MockCategoriesUseCase) GetCategory(ctx context.Context, id domain.CategoryID) (domain.Category, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID) (domain.Category, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID) domain.Category); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Category)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CategoryID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoriesUseCase_GetCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategory'
type MockCategoriesUseCase_GetCategory_Call struct {
	*mock.Call
}

// GetCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.CategoryID
func (_e *MockCategoriesUseCase_Expecter) GetCategory(ctx interface{}, id interface{}) *MockCategoriesUseCase_GetCategory_Call {
	return &MockCategoriesUseCase_GetCategory_Call{Call: _e.mock.On("GetCategory", ctx, id)}
}

func (_c *MockCategoriesUseCase_GetCategory_Call) Run(run func(ctx context.Context, id domain.CategoryID)) *MockCategoriesUseCase_GetCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CategoryID
		if args[1] != nil {
			arg1 = args[1].(domain.CategoryID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoriesUseCase_GetCategory_Call) Return(category domain.Category, err error) *MockCategoriesUseCase_GetCategory_Call {
	_c.Call.Return(category, err)
	return _c
}

func (_c *MockCategoriesUseCase_GetCategory_Call) RunAndReturn(run func(ctx context.Context, id domain.CategoryID) (domain.Category, error)) *MockCategoriesUseCase_GetCategory_Call {
	_c.Call.Return(run)
	return _c
}

// ListCategories provides a mock function for the type MockCategoriesUseCase
func (_mock *MockCategoriesUseCase) ListCategories(ctx context.Context) ([]domain.Category, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCategories")
	}

	var r0 []domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Category, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Category); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoriesUseCase_ListCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCategories'
type MockCategoriesUseCase_ListCategories_Call struct {
	*mock.Call
}

// ListCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCategoriesUseCase_Expecter) ListCategories(ctx interface{}) *MockCategoriesUseCase_ListCategories_Call {
	return &MockCategoriesUseCase_ListCategories_Call{Call: _e.mock.On("ListCategories", ctx)}
}

func (_c *MockCategoriesUseCase_ListCategories_Call) Run(run func(ctx context.Context)) *MockCategoriesUseCase_ListCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoriesUseCase_ListCategories_Call) Return(categorys []domain.Category, err error) *MockCategoriesUseCase_ListCategories_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *MockCategoriesUseCase_ListCategories_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Category, error)) *MockCategoriesUseCase_ListCategories_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function for the type MockCategoriesUseCase
func (_mock *MockCategoriesUseCase) UpdateCategory(ctx context.Context, id domain.CategoryID, name string, slug string, description *string, color *string) (domain.Category, error) {
	ret := _mock.Called(ctx, id, name, slug, description, color)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID, string, string, *string, *string) (domain.Category, error)); ok {
		return returnFunc(ctx, id, name, slug, description, color)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID, string, string, *string, *string) domain.Category); ok {
		r0 = returnFunc(ctx, id, name, slug, description, color)
	} else {
		r0 = ret.Get(0).(domain.Category)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CategoryID, string, string, *string, *string) error); ok {
		r1 = returnFunc(ctx, id, name, slug, description, color)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoriesUseCase_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type MockCategoriesUseCase_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.CategoryID
//   - name string
//   - slug string
//   - description *string
//   - color *string
func (_e *MockCategoriesUseCase_Expecter) UpdateCategory(ctx interface{}, id interface{}, name interface{}, slug interface{}, description interface{}, color interface{}) *MockCategoriesUseCase_UpdateCategory_Call {
	return &MockCategoriesUseCase_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", ctx, id, name, slug, description, color)}
}

func (_c *MockCategoriesUseCase_UpdateCategory_Call) Run(run func(ctx context.Context, id domain.CategoryID, name string, slug string, description *string, color *string)) *MockCategoriesUseCase_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CategoryID
		if args[1] != nil {
			arg1 = args[1].(domain.CategoryID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockCategoriesUseCase_UpdateCategory_Call) Return(category domain.Category, err error) *MockCategoriesUseCase_UpdateCategory_Call {
	_c.Call.Return(category, err)
	return _c
}

func (_c *MockCategoriesUseCase_UpdateCategory_Call) RunAndReturn(run func(ctx context.Context, id domain.CategoryID, name string, slug string, description *string, color *string) (domain.Category, error)) *MockCategoriesUseCase_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}
