// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockDashboardUseCase creates a new instance of MockDashboardUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDashboardUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDashboardUseCase {
	mock := &MockDashboardUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDashboardUseCase is an autogenerated mock type for the DashboardUseCase type
type MockDashboardUseCase struct {
	mock.Mock
}

type MockDashboardUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDashboardUseCase) EXPECT() *MockDashboardUseCase_Expecter {
	return &MockDashboardUseCase_Expecter{mock: &_m.Mock}
}

// Overview provides a mock function for the type MockDashboardUseCase
func (_mock *MockDashboardUseCase) Overview(ctx context.Context, envKey string, projectID *string, limit uint) (domain.DashboardOverview, error) {
	ret := _mock.Called(ctx, envKey, projectID, limit)

	if len(ret) == 0 {
		panic("no return value specified for Overview")
	}

	var r0 domain.DashboardOverview
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, uint) (domain.DashboardOverview, error)); ok {
		return returnFunc(ctx, envKey, projectID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, uint) domain.DashboardOverview); ok {
		r0 = returnFunc(ctx, envKey, projectID, limit)
	} else {
		r0 = ret.Get(0).(domain.DashboardOverview)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string, uint) error); ok {
		r1 = returnFunc(ctx, envKey, projectID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDashboardUseCase_Overview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Overview'
type MockDashboardUseCase_Overview_Call struct {
	*mock.Call
}

// Overview is a helper method to define mock.On call
//   - ctx context.Context
//   - envKey string
//   - projectID *string
//   - limit uint
func (_e *MockDashboardUseCase_Expecter) Overview(ctx interface{}, envKey interface{}, projectID interface{}, limit interface{}) *MockDashboardUseCase_Overview_Call {
	return &MockDashboardUseCase_Overview_Call{Call: _e.mock.On("Overview", ctx, envKey, projectID, limit)}
}

func (_c *MockDashboardUseCase_Overview_Call) Run(run func(ctx context.Context, envKey string, projectID *string, limit uint)) *MockDashboardUseCase_Overview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 uint
		if args[3] != nil {
			arg3 = args[3].(uint)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDashboardUseCase_Overview_Call) Return(dashboardOverview domain.DashboardOverview, err error) *MockDashboardUseCase_Overview_Call {
	_c.Call.Return(dashboardOverview, err)
	return _c
}

func (_c *MockDashboardUseCase_Overview_Call) RunAndReturn(run func(ctx context.Context, envKey string, projectID *string, limit uint) (domain.DashboardOverview, error)) *MockDashboardUseCase_Overview_Call {
	_c.Call.Return(run)
	return _c
}
