// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockGuardEngine creates a new instance of MockGuardEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGuardEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGuardEngine {
	mock := &MockGuardEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGuardEngine is an autogenerated mock type for the GuardEngine type
type MockGuardEngine struct {
	mock.Mock
}

type MockGuardEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGuardEngine) EXPECT() *MockGuardEngine_Expecter {
	return &MockGuardEngine_Expecter{mock: &_m.Mock}
}

// BuildChangeDiff provides a mock function for the type MockGuardEngine
func (_mock *MockGuardEngine) BuildChangeDiff(oldEntity any, newEntity any) map[string]domain.ChangeValue {
	ret := _mock.Called(oldEntity, newEntity)

	if len(ret) == 0 {
		panic("no return value specified for BuildChangeDiff")
	}

	var r0 map[string]domain.ChangeValue
	if returnFunc, ok := ret.Get(0).(func(any, any) map[string]domain.ChangeValue); ok {
		r0 = returnFunc(oldEntity, newEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]domain.ChangeValue)
		}
	}
	return r0
}

// MockGuardEngine_BuildChangeDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildChangeDiff'
type MockGuardEngine_BuildChangeDiff_Call struct {
	*mock.Call
}

// BuildChangeDiff is a helper method to define mock.On call
//   - oldEntity any
//   - newEntity any
func (_e *MockGuardEngine_Expecter) BuildChangeDiff(oldEntity interface{}, newEntity interface{}) *MockGuardEngine_BuildChangeDiff_Call {
	return &MockGuardEngine_BuildChangeDiff_Call{Call: _e.mock.On("BuildChangeDiff", oldEntity, newEntity)}
}

func (_c *MockGuardEngine_BuildChangeDiff_Call) Run(run func(oldEntity any, newEntity any)) *MockGuardEngine_BuildChangeDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGuardEngine_BuildChangeDiff_Call) Return(stringToChangeValue map[string]domain.ChangeValue) *MockGuardEngine_BuildChangeDiff_Call {
	_c.Call.Return(stringToChangeValue)
	return _c
}

func (_c *MockGuardEngine_BuildChangeDiff_Call) RunAndReturn(run func(oldEntity any, newEntity any) map[string]domain.ChangeValue) *MockGuardEngine_BuildChangeDiff_Call {
	_c.Call.Return(run)
	return _c
}

// BuildInsertChanges provides a mock function for the type MockGuardEngine
func (_mock *MockGuardEngine) BuildInsertChanges(entity any) map[string]domain.ChangeValue {
	ret := _mock.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for BuildInsertChanges")
	}

	var r0 map[string]domain.ChangeValue
	if returnFunc, ok := ret.Get(0).(func(any) map[string]domain.ChangeValue); ok {
		r0 = returnFunc(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]domain.ChangeValue)
		}
	}
	return r0
}

// MockGuardEngine_BuildInsertChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildInsertChanges'
type MockGuardEngine_BuildInsertChanges_Call struct {
	*mock.Call
}

// BuildInsertChanges is a helper method to define mock.On call
//   - entity any
func (_e *MockGuardEngine_Expecter) BuildInsertChanges(entity interface{}) *MockGuardEngine_BuildInsertChanges_Call {
	return &MockGuardEngine_BuildInsertChanges_Call{Call: _e.mock.On("BuildInsertChanges", entity)}
}

func (_c *MockGuardEngine_BuildInsertChanges_Call) Run(run func(entity any)) *MockGuardEngine_BuildInsertChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGuardEngine_BuildInsertChanges_Call) Return(stringToChangeValue map[string]domain.ChangeValue) *MockGuardEngine_BuildInsertChanges_Call {
	_c.Call.Return(stringToChangeValue)
	return _c
}

func (_c *MockGuardEngine_BuildInsertChanges_Call) RunAndReturn(run func(entity any) map[string]domain.ChangeValue) *MockGuardEngine_BuildInsertChanges_Call {
	_c.Call.Return(run)
	return _c
}

// CheckGuardedOperation provides a mock function for the type MockGuardEngine
func (_mock *MockGuardEngine) CheckGuardedOperation(ctx context.Context, req contract.GuardRequest) (*domain.PendingChange, bool, bool, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CheckGuardedOperation")
	}

	var r0 *domain.PendingChange
	var r1 bool
	var r2 bool
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, contract.GuardRequest) (*domain.PendingChange, bool, bool, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, contract.GuardRequest) *domain.PendingChange); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PendingChange)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, contract.GuardRequest) bool); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, contract.GuardRequest) bool); ok {
		r2 = returnFunc(ctx, req)
	} else {
		r2 = ret.Get(2).(bool)
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, contract.GuardRequest) error); ok {
		r3 = returnFunc(ctx, req)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockGuardEngine_CheckGuardedOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckGuardedOperation'
type MockGuardEngine_CheckGuardedOperation_Call struct {
	*mock.Call
}

// CheckGuardedOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - req contract.GuardRequest
func (_e *MockGuardEngine_Expecter) CheckGuardedOperation(ctx interface{}, req interface{}) *MockGuardEngine_CheckGuardedOperation_Call {
	return &MockGuardEngine_CheckGuardedOperation_Call{Call: _e.mock.On("CheckGuardedOperation", ctx, req)}
}

func (_c *MockGuardEngine_CheckGuardedOperation_Call) Run(run func(ctx context.Context, req contract.GuardRequest)) *MockGuardEngine_CheckGuardedOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 contract.GuardRequest
		if args[1] != nil {
			arg1 = args[1].(contract.GuardRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGuardEngine_CheckGuardedOperation_Call) Return(pendingChange *domain.PendingChange, conflict bool, proceed bool, err error) *MockGuardEngine_CheckGuardedOperation_Call {
	_c.Call.Return(pendingChange, conflict, proceed, err)
	return _c
}

func (_c *MockGuardEngine_CheckGuardedOperation_Call) RunAndReturn(run func(ctx context.Context, req contract.GuardRequest) (*domain.PendingChange, bool, bool, error)) *MockGuardEngine_CheckGuardedOperation_Call {
	_c.Call.Return(run)
	return _c
}
