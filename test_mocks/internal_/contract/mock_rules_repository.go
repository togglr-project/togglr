// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockRulesRepository creates a new instance of MockRulesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRulesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRulesRepository {
	mock := &MockRulesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRulesRepository is an autogenerated mock type for the RulesRepository type
type MockRulesRepository struct {
	mock.Mock
}

type MockRulesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRulesRepository) EXPECT() *MockRulesRepository_Expecter {
	return &MockRulesRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) Create(ctx context.Context, rule domain.Rule) (domain.Rule, error) {
	ret := _mock.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Rule) (domain.Rule, error)); ok {
		return returnFunc(ctx, rule)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Rule) domain.Rule); ok {
		r0 = returnFunc(ctx, rule)
	} else {
		r0 = ret.Get(0).(domain.Rule)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Rule) error); ok {
		r1 = returnFunc(ctx, rule)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRulesRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - rule domain.Rule
func (_e *MockRulesRepository_Expecter) Create(ctx interface{}, rule interface{}) *MockRulesRepository_Create_Call {
	return &MockRulesRepository_Create_Call{Call: _e.mock.On("Create", ctx, rule)}
}

func (_c *MockRulesRepository_Create_Call) Run(run func(ctx context.Context, rule domain.Rule)) *MockRulesRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Rule
		if args[1] != nil {
			arg1 = args[1].(domain.Rule)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesRepository_Create_Call) Return(rule1 domain.Rule, err error) *MockRulesRepository_Create_Call {
	_c.Call.Return(rule1, err)
	return _c
}

func (_c *MockRulesRepository_Create_Call) RunAndReturn(run func(ctx context.Context, rule domain.Rule) (domain.Rule, error)) *MockRulesRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) Delete(ctx context.Context, id domain.RuleID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRulesRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRulesRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.RuleID
func (_e *MockRulesRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockRulesRepository_Delete_Call {
	return &MockRulesRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockRulesRepository_Delete_Call) Run(run func(ctx context.Context, id domain.RuleID)) *MockRulesRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RuleID
		if args[1] != nil {
			arg1 = args[1].(domain.RuleID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesRepository_Delete_Call) Return(err error) *MockRulesRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRulesRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.RuleID) error) *MockRulesRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) GetByID(ctx context.Context, id domain.RuleID) (domain.Rule, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleID) (domain.Rule, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleID) domain.Rule); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Rule)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.RuleID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRulesRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.RuleID
func (_e *MockRulesRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockRulesRepository_GetByID_Call {
	return &MockRulesRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockRulesRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.RuleID)) *MockRulesRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RuleID
		if args[1] != nil {
			arg1 = args[1].(domain.RuleID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesRepository_GetByID_Call) Return(rule domain.Rule, err error) *MockRulesRepository_GetByID_Call {
	_c.Call.Return(rule, err)
	return _c
}

func (_c *MockRulesRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.RuleID) (domain.Rule, error)) *MockRulesRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) List(ctx context.Context) ([]domain.Rule, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Rule, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Rule); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRulesRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRulesRepository_Expecter) List(ctx interface{}) *MockRulesRepository_List_Call {
	return &MockRulesRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockRulesRepository_List_Call) Run(run func(ctx context.Context)) *MockRulesRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRulesRepository_List_Call) Return(rules []domain.Rule, err error) *MockRulesRepository_List_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *MockRulesRepository_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Rule, error)) *MockRulesRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFeatureID provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) ListByFeatureID(ctx context.Context, featureID domain.FeatureID) ([]domain.Rule, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFeatureID")
	}

	var r0 []domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) ([]domain.Rule, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) []domain.Rule); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesRepository_ListByFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFeatureID'
type MockRulesRepository_ListByFeatureID_Call struct {
	*mock.Call
}

// ListByFeatureID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockRulesRepository_Expecter) ListByFeatureID(ctx interface{}, featureID interface{}) *MockRulesRepository_ListByFeatureID_Call {
	return &MockRulesRepository_ListByFeatureID_Call{Call: _e.mock.On("ListByFeatureID", ctx, featureID)}
}

func (_c *MockRulesRepository_ListByFeatureID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockRulesRepository_ListByFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesRepository_ListByFeatureID_Call) Return(rules []domain.Rule, err error) *MockRulesRepository_ListByFeatureID_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *MockRulesRepository_ListByFeatureID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) ([]domain.Rule, error)) *MockRulesRepository_ListByFeatureID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFeatureIDWithEnvID provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) ListByFeatureIDWithEnvID(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) ([]domain.Rule, error) {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFeatureIDWithEnvID")
	}

	var r0 []domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) ([]domain.Rule, error)); ok {
		return returnFunc(ctx, featureID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) []domain.Rule); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, featureID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesRepository_ListByFeatureIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFeatureIDWithEnvID'
type MockRulesRepository_ListByFeatureIDWithEnvID_Call struct {
	*mock.Call
}

// ListByFeatureIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockRulesRepository_Expecter) ListByFeatureIDWithEnvID(ctx interface{}, featureID interface{}, envID interface{}) *MockRulesRepository_ListByFeatureIDWithEnvID_Call {
	return &MockRulesRepository_ListByFeatureIDWithEnvID_Call{Call: _e.mock.On("ListByFeatureIDWithEnvID", ctx, featureID, envID)}
}

func (_c *MockRulesRepository_ListByFeatureIDWithEnvID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockRulesRepository_ListByFeatureIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRulesRepository_ListByFeatureIDWithEnvID_Call) Return(rules []domain.Rule, err error) *MockRulesRepository_ListByFeatureIDWithEnvID_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *MockRulesRepository_ListByFeatureIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) ([]domain.Rule, error)) *MockRulesRepository_ListByFeatureIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomizedFeatureIDsBySegment provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) ListCustomizedFeatureIDsBySegment(ctx context.Context, segmentID domain.SegmentID) ([]domain.FeatureID, error) {
	ret := _mock.Called(ctx, segmentID)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomizedFeatureIDsBySegment")
	}

	var r0 []domain.FeatureID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SegmentID) ([]domain.FeatureID, error)); ok {
		return returnFunc(ctx, segmentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SegmentID) []domain.FeatureID); ok {
		r0 = returnFunc(ctx, segmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.SegmentID) error); ok {
		r1 = returnFunc(ctx, segmentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomizedFeatureIDsBySegment'
type MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call struct {
	*mock.Call
}

// ListCustomizedFeatureIDsBySegment is a helper method to define mock.On call
//   - ctx context.Context
//   - segmentID domain.SegmentID
func (_e *MockRulesRepository_Expecter) ListCustomizedFeatureIDsBySegment(ctx interface{}, segmentID interface{}) *MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call {
	return &MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call{Call: _e.mock.On("ListCustomizedFeatureIDsBySegment", ctx, segmentID)}
}

func (_c *MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call) Run(run func(ctx context.Context, segmentID domain.SegmentID)) *MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SegmentID
		if args[1] != nil {
			arg1 = args[1].(domain.SegmentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call) Return(featureIDs []domain.FeatureID, err error) *MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call {
	_c.Call.Return(featureIDs, err)
	return _c
}

func (_c *MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call) RunAndReturn(run func(ctx context.Context, segmentID domain.SegmentID) ([]domain.FeatureID, error)) *MockRulesRepository_ListCustomizedFeatureIDsBySegment_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotCustomizedRulesBySegment provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) ListNotCustomizedRulesBySegment(ctx context.Context, segmentID domain.SegmentID) ([]domain.Rule, error) {
	ret := _mock.Called(ctx, segmentID)

	if len(ret) == 0 {
		panic("no return value specified for ListNotCustomizedRulesBySegment")
	}

	var r0 []domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SegmentID) ([]domain.Rule, error)); ok {
		return returnFunc(ctx, segmentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SegmentID) []domain.Rule); ok {
		r0 = returnFunc(ctx, segmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.SegmentID) error); ok {
		r1 = returnFunc(ctx, segmentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesRepository_ListNotCustomizedRulesBySegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotCustomizedRulesBySegment'
type MockRulesRepository_ListNotCustomizedRulesBySegment_Call struct {
	*mock.Call
}

// ListNotCustomizedRulesBySegment is a helper method to define mock.On call
//   - ctx context.Context
//   - segmentID domain.SegmentID
func (_e *MockRulesRepository_Expecter) ListNotCustomizedRulesBySegment(ctx interface{}, segmentID interface{}) *MockRulesRepository_ListNotCustomizedRulesBySegment_Call {
	return &MockRulesRepository_ListNotCustomizedRulesBySegment_Call{Call: _e.mock.On("ListNotCustomizedRulesBySegment", ctx, segmentID)}
}

func (_c *MockRulesRepository_ListNotCustomizedRulesBySegment_Call) Run(run func(ctx context.Context, segmentID domain.SegmentID)) *MockRulesRepository_ListNotCustomizedRulesBySegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SegmentID
		if args[1] != nil {
			arg1 = args[1].(domain.SegmentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesRepository_ListNotCustomizedRulesBySegment_Call) Return(rules []domain.Rule, err error) *MockRulesRepository_ListNotCustomizedRulesBySegment_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *MockRulesRepository_ListNotCustomizedRulesBySegment_Call) RunAndReturn(run func(ctx context.Context, segmentID domain.SegmentID) ([]domain.Rule, error)) *MockRulesRepository_ListNotCustomizedRulesBySegment_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRulesRepository
func (_mock *MockRulesRepository) Update(ctx context.Context, rule domain.Rule) (domain.Rule, error) {
	ret := _mock.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Rule) (domain.Rule, error)); ok {
		return returnFunc(ctx, rule)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Rule) domain.Rule); ok {
		r0 = returnFunc(ctx, rule)
	} else {
		r0 = ret.Get(0).(domain.Rule)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Rule) error); ok {
		r1 = returnFunc(ctx, rule)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRulesRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - rule domain.Rule
func (_e *MockRulesRepository_Expecter) Update(ctx interface{}, rule interface{}) *MockRulesRepository_Update_Call {
	return &MockRulesRepository_Update_Call{Call: _e.mock.On("Update", ctx, rule)}
}

func (_c *MockRulesRepository_Update_Call) Run(run func(ctx context.Context, rule domain.Rule)) *MockRulesRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Rule
		if args[1] != nil {
			arg1 = args[1].(domain.Rule)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesRepository_Update_Call) Return(rule1 domain.Rule, err error) *MockRulesRepository_Update_Call {
	_c.Call.Return(rule1, err)
	return _c
}

func (_c *MockRulesRepository_Update_Call) RunAndReturn(run func(ctx context.Context, rule domain.Rule) (domain.Rule, error)) *MockRulesRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
