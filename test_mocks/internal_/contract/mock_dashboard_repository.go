// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockDashboardRepository creates a new instance of MockDashboardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDashboardRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDashboardRepository {
	mock := &MockDashboardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDashboardRepository is an autogenerated mock type for the DashboardRepository type
type MockDashboardRepository struct {
	mock.Mock
}

type MockDashboardRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDashboardRepository) EXPECT() *MockDashboardRepository_Expecter {
	return &MockDashboardRepository_Expecter{mock: &_m.Mock}
}

// CategoryHealth provides a mock function for the type MockDashboardRepository
func (_mock *MockDashboardRepository) CategoryHealth(ctx context.Context, envKey string, projectID *string) ([]domain.CategoryHealth, error) {
	ret := _mock.Called(ctx, envKey, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CategoryHealth")
	}

	var r0 []domain.CategoryHealth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) ([]domain.CategoryHealth, error)); ok {
		return returnFunc(ctx, envKey, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) []domain.CategoryHealth); ok {
		r0 = returnFunc(ctx, envKey, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CategoryHealth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string) error); ok {
		r1 = returnFunc(ctx, envKey, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDashboardRepository_CategoryHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CategoryHealth'
type MockDashboardRepository_CategoryHealth_Call struct {
	*mock.Call
}

// CategoryHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - envKey string
//   - projectID *string
func (_e *MockDashboardRepository_Expecter) CategoryHealth(ctx interface{}, envKey interface{}, projectID interface{}) *MockDashboardRepository_CategoryHealth_Call {
	return &MockDashboardRepository_CategoryHealth_Call{Call: _e.mock.On("CategoryHealth", ctx, envKey, projectID)}
}

func (_c *MockDashboardRepository_CategoryHealth_Call) Run(run func(ctx context.Context, envKey string, projectID *string)) *MockDashboardRepository_CategoryHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDashboardRepository_CategoryHealth_Call) Return(categoryHealths []domain.CategoryHealth, err error) *MockDashboardRepository_CategoryHealth_Call {
	_c.Call.Return(categoryHealths, err)
	return _c
}

func (_c *MockDashboardRepository_CategoryHealth_Call) RunAndReturn(run func(ctx context.Context, envKey string, projectID *string) ([]domain.CategoryHealth, error)) *MockDashboardRepository_CategoryHealth_Call {
	_c.Call.Return(run)
	return _c
}

// PendingSummary provides a mock function for the type MockDashboardRepository
func (_mock *MockDashboardRepository) PendingSummary(ctx context.Context, envKey string, projectID *string) ([]domain.PendingSummary, error) {
	ret := _mock.Called(ctx, envKey, projectID)

	if len(ret) == 0 {
		panic("no return value specified for PendingSummary")
	}

	var r0 []domain.PendingSummary
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) ([]domain.PendingSummary, error)); ok {
		return returnFunc(ctx, envKey, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) []domain.PendingSummary); ok {
		r0 = returnFunc(ctx, envKey, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PendingSummary)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string) error); ok {
		r1 = returnFunc(ctx, envKey, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDashboardRepository_PendingSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingSummary'
type MockDashboardRepository_PendingSummary_Call struct {
	*mock.Call
}

// PendingSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - envKey string
//   - projectID *string
func (_e *MockDashboardRepository_Expecter) PendingSummary(ctx interface{}, envKey interface{}, projectID interface{}) *MockDashboardRepository_PendingSummary_Call {
	return &MockDashboardRepository_PendingSummary_Call{Call: _e.mock.On("PendingSummary", ctx, envKey, projectID)}
}

func (_c *MockDashboardRepository_PendingSummary_Call) Run(run func(ctx context.Context, envKey string, projectID *string)) *MockDashboardRepository_PendingSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDashboardRepository_PendingSummary_Call) Return(pendingSummarys []domain.PendingSummary, err error) *MockDashboardRepository_PendingSummary_Call {
	_c.Call.Return(pendingSummarys, err)
	return _c
}

func (_c *MockDashboardRepository_PendingSummary_Call) RunAndReturn(run func(ctx context.Context, envKey string, projectID *string) ([]domain.PendingSummary, error)) *MockDashboardRepository_PendingSummary_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectHealth provides a mock function for the type MockDashboardRepository
func (_mock *MockDashboardRepository) ProjectHealth(ctx context.Context, envKey string, projectID *string) ([]domain.ProjectHealth, error) {
	ret := _mock.Called(ctx, envKey, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ProjectHealth")
	}

	var r0 []domain.ProjectHealth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) ([]domain.ProjectHealth, error)); ok {
		return returnFunc(ctx, envKey, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) []domain.ProjectHealth); ok {
		r0 = returnFunc(ctx, envKey, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectHealth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string) error); ok {
		r1 = returnFunc(ctx, envKey, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDashboardRepository_ProjectHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectHealth'
type MockDashboardRepository_ProjectHealth_Call struct {
	*mock.Call
}

// ProjectHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - envKey string
//   - projectID *string
func (_e *MockDashboardRepository_Expecter) ProjectHealth(ctx interface{}, envKey interface{}, projectID interface{}) *MockDashboardRepository_ProjectHealth_Call {
	return &MockDashboardRepository_ProjectHealth_Call{Call: _e.mock.On("ProjectHealth", ctx, envKey, projectID)}
}

func (_c *MockDashboardRepository_ProjectHealth_Call) Run(run func(ctx context.Context, envKey string, projectID *string)) *MockDashboardRepository_ProjectHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDashboardRepository_ProjectHealth_Call) Return(projectHealths []domain.ProjectHealth, err error) *MockDashboardRepository_ProjectHealth_Call {
	_c.Call.Return(projectHealths, err)
	return _c
}

func (_c *MockDashboardRepository_ProjectHealth_Call) RunAndReturn(run func(ctx context.Context, envKey string, projectID *string) ([]domain.ProjectHealth, error)) *MockDashboardRepository_ProjectHealth_Call {
	_c.Call.Return(run)
	return _c
}

// RecentActivity provides a mock function for the type MockDashboardRepository
func (_mock *MockDashboardRepository) RecentActivity(ctx context.Context, envKey string, projectID *string, limit uint) ([]domain.RecentActivity, error) {
	ret := _mock.Called(ctx, envKey, projectID, limit)

	if len(ret) == 0 {
		panic("no return value specified for RecentActivity")
	}

	var r0 []domain.RecentActivity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, uint) ([]domain.RecentActivity, error)); ok {
		return returnFunc(ctx, envKey, projectID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, uint) []domain.RecentActivity); ok {
		r0 = returnFunc(ctx, envKey, projectID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RecentActivity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string, uint) error); ok {
		r1 = returnFunc(ctx, envKey, projectID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDashboardRepository_RecentActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecentActivity'
type MockDashboardRepository_RecentActivity_Call struct {
	*mock.Call
}

// RecentActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - envKey string
//   - projectID *string
//   - limit uint
func (_e *MockDashboardRepository_Expecter) RecentActivity(ctx interface{}, envKey interface{}, projectID interface{}, limit interface{}) *MockDashboardRepository_RecentActivity_Call {
	return &MockDashboardRepository_RecentActivity_Call{Call: _e.mock.On("RecentActivity", ctx, envKey, projectID, limit)}
}

func (_c *MockDashboardRepository_RecentActivity_Call) Run(run func(ctx context.Context, envKey string, projectID *string, limit uint)) *MockDashboardRepository_RecentActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 uint
		if args[3] != nil {
			arg3 = args[3].(uint)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDashboardRepository_RecentActivity_Call) Return(recentActivitys []domain.RecentActivity, err error) *MockDashboardRepository_RecentActivity_Call {
	_c.Call.Return(recentActivitys, err)
	return _c
}

func (_c *MockDashboardRepository_RecentActivity_Call) RunAndReturn(run func(ctx context.Context, envKey string, projectID *string, limit uint) ([]domain.RecentActivity, error)) *MockDashboardRepository_RecentActivity_Call {
	_c.Call.Return(run)
	return _c
}

// RiskyFeatures provides a mock function for the type MockDashboardRepository
func (_mock *MockDashboardRepository) RiskyFeatures(ctx context.Context, envKey string, projectID *string, limit uint) ([]domain.RiskyFeature, error) {
	ret := _mock.Called(ctx, envKey, projectID, limit)

	if len(ret) == 0 {
		panic("no return value specified for RiskyFeatures")
	}

	var r0 []domain.RiskyFeature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, uint) ([]domain.RiskyFeature, error)); ok {
		return returnFunc(ctx, envKey, projectID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, uint) []domain.RiskyFeature); ok {
		r0 = returnFunc(ctx, envKey, projectID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RiskyFeature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string, uint) error); ok {
		r1 = returnFunc(ctx, envKey, projectID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDashboardRepository_RiskyFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RiskyFeatures'
type MockDashboardRepository_RiskyFeatures_Call struct {
	*mock.Call
}

// RiskyFeatures is a helper method to define mock.On call
//   - ctx context.Context
//   - envKey string
//   - projectID *string
//   - limit uint
func (_e *MockDashboardRepository_Expecter) RiskyFeatures(ctx interface{}, envKey interface{}, projectID interface{}, limit interface{}) *MockDashboardRepository_RiskyFeatures_Call {
	return &MockDashboardRepository_RiskyFeatures_Call{Call: _e.mock.On("RiskyFeatures", ctx, envKey, projectID, limit)}
}

func (_c *MockDashboardRepository_RiskyFeatures_Call) Run(run func(ctx context.Context, envKey string, projectID *string, limit uint)) *MockDashboardRepository_RiskyFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 uint
		if args[3] != nil {
			arg3 = args[3].(uint)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDashboardRepository_RiskyFeatures_Call) Return(riskyFeatures []domain.RiskyFeature, err error) *MockDashboardRepository_RiskyFeatures_Call {
	_c.Call.Return(riskyFeatures, err)
	return _c
}

func (_c *MockDashboardRepository_RiskyFeatures_Call) RunAndReturn(run func(ctx context.Context, envKey string, projectID *string, limit uint) ([]domain.RiskyFeature, error)) *MockDashboardRepository_RiskyFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// TopActiveFeatureIDs provides a mock function for the type MockDashboardRepository
func (_mock *MockDashboardRepository) TopActiveFeatureIDs(ctx context.Context, envKey string, projectID *string, limit uint) ([]string, error) {
	ret := _mock.Called(ctx, envKey, projectID, limit)

	if len(ret) == 0 {
		panic("no return value specified for TopActiveFeatureIDs")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, uint) ([]string, error)); ok {
		return returnFunc(ctx, envKey, projectID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, uint) []string); ok {
		r0 = returnFunc(ctx, envKey, projectID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string, uint) error); ok {
		r1 = returnFunc(ctx, envKey, projectID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDashboardRepository_TopActiveFeatureIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopActiveFeatureIDs'
type MockDashboardRepository_TopActiveFeatureIDs_Call struct {
	*mock.Call
}

// TopActiveFeatureIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - envKey string
//   - projectID *string
//   - limit uint
func (_e *MockDashboardRepository_Expecter) TopActiveFeatureIDs(ctx interface{}, envKey interface{}, projectID interface{}, limit interface{}) *MockDashboardRepository_TopActiveFeatureIDs_Call {
	return &MockDashboardRepository_TopActiveFeatureIDs_Call{Call: _e.mock.On("TopActiveFeatureIDs", ctx, envKey, projectID, limit)}
}

func (_c *MockDashboardRepository_TopActiveFeatureIDs_Call) Run(run func(ctx context.Context, envKey string, projectID *string, limit uint)) *MockDashboardRepository_TopActiveFeatureIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 uint
		if args[3] != nil {
			arg3 = args[3].(uint)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDashboardRepository_TopActiveFeatureIDs_Call) Return(strings []string, err error) *MockDashboardRepository_TopActiveFeatureIDs_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockDashboardRepository_TopActiveFeatureIDs_Call) RunAndReturn(run func(ctx context.Context, envKey string, projectID *string, limit uint) ([]string, error)) *MockDashboardRepository_TopActiveFeatureIDs_Call {
	_c.Call.Return(run)
	return _c
}
