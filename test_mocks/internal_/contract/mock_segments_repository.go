// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockSegmentsRepository creates a new instance of MockSegmentsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSegmentsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSegmentsRepository {
	mock := &MockSegmentsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSegmentsRepository is an autogenerated mock type for the SegmentsRepository type
type MockSegmentsRepository struct {
	mock.Mock
}

type MockSegmentsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSegmentsRepository) EXPECT() *MockSegmentsRepository_Expecter {
	return &MockSegmentsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockSegmentsRepository
func (_mock *MockSegmentsRepository) Create(ctx context.Context, segment domain.Segment) (domain.Segment, error) {
	ret := _mock.Called(ctx, segment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Segment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Segment) (domain.Segment, error)); ok {
		return returnFunc(ctx, segment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Segment) domain.Segment); ok {
		r0 = returnFunc(ctx, segment)
	} else {
		r0 = ret.Get(0).(domain.Segment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Segment) error); ok {
		r1 = returnFunc(ctx, segment)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSegmentsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSegmentsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - segment domain.Segment
func (_e *MockSegmentsRepository_Expecter) Create(ctx interface{}, segment interface{}) *MockSegmentsRepository_Create_Call {
	return &MockSegmentsRepository_Create_Call{Call: _e.mock.On("Create", ctx, segment)}
}

func (_c *MockSegmentsRepository_Create_Call) Run(run func(ctx context.Context, segment domain.Segment)) *MockSegmentsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Segment
		if args[1] != nil {
			arg1 = args[1].(domain.Segment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSegmentsRepository_Create_Call) Return(segment1 domain.Segment, err error) *MockSegmentsRepository_Create_Call {
	_c.Call.Return(segment1, err)
	return _c
}

func (_c *MockSegmentsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, segment domain.Segment) (domain.Segment, error)) *MockSegmentsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSegmentsRepository
func (_mock *MockSegmentsRepository) Delete(ctx context.Context, id domain.SegmentID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SegmentID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSegmentsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSegmentsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SegmentID
func (_e *MockSegmentsRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockSegmentsRepository_Delete_Call {
	return &MockSegmentsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSegmentsRepository_Delete_Call) Run(run func(ctx context.Context, id domain.SegmentID)) *MockSegmentsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SegmentID
		if args[1] != nil {
			arg1 = args[1].(domain.SegmentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSegmentsRepository_Delete_Call) Return(err error) *MockSegmentsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSegmentsRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.SegmentID) error) *MockSegmentsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockSegmentsRepository
func (_mock *MockSegmentsRepository) GetByID(ctx context.Context, id domain.SegmentID) (domain.Segment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Segment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SegmentID) (domain.Segment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SegmentID) domain.Segment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Segment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.SegmentID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSegmentsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockSegmentsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SegmentID
func (_e *MockSegmentsRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockSegmentsRepository_GetByID_Call {
	return &MockSegmentsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockSegmentsRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.SegmentID)) *MockSegmentsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SegmentID
		if args[1] != nil {
			arg1 = args[1].(domain.SegmentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSegmentsRepository_GetByID_Call) Return(segment domain.Segment, err error) *MockSegmentsRepository_GetByID_Call {
	_c.Call.Return(segment, err)
	return _c
}

func (_c *MockSegmentsRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.SegmentID) (domain.Segment, error)) *MockSegmentsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectID provides a mock function for the type MockSegmentsRepository
func (_mock *MockSegmentsRepository) ListByProjectID(ctx context.Context, projectID domain.ProjectID) ([]domain.Segment, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectID")
	}

	var r0 []domain.Segment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.Segment, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.Segment); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Segment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSegmentsRepository_ListByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectID'
type MockSegmentsRepository_ListByProjectID_Call struct {
	*mock.Call
}

// ListByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockSegmentsRepository_Expecter) ListByProjectID(ctx interface{}, projectID interface{}) *MockSegmentsRepository_ListByProjectID_Call {
	return &MockSegmentsRepository_ListByProjectID_Call{Call: _e.mock.On("ListByProjectID", ctx, projectID)}
}

func (_c *MockSegmentsRepository_ListByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockSegmentsRepository_ListByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSegmentsRepository_ListByProjectID_Call) Return(segments []domain.Segment, err error) *MockSegmentsRepository_ListByProjectID_Call {
	_c.Call.Return(segments, err)
	return _c
}

func (_c *MockSegmentsRepository_ListByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.Segment, error)) *MockSegmentsRepository_ListByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectIDFiltered provides a mock function for the type MockSegmentsRepository
func (_mock *MockSegmentsRepository) ListByProjectIDFiltered(ctx context.Context, projectID domain.ProjectID, filter contract.SegmentsListFilter) ([]domain.Segment, int, error) {
	ret := _mock.Called(ctx, projectID, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectIDFiltered")
	}

	var r0 []domain.Segment
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, contract.SegmentsListFilter) ([]domain.Segment, int, error)); ok {
		return returnFunc(ctx, projectID, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, contract.SegmentsListFilter) []domain.Segment); ok {
		r0 = returnFunc(ctx, projectID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Segment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, contract.SegmentsListFilter) int); ok {
		r1 = returnFunc(ctx, projectID, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.ProjectID, contract.SegmentsListFilter) error); ok {
		r2 = returnFunc(ctx, projectID, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSegmentsRepository_ListByProjectIDFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectIDFiltered'
type MockSegmentsRepository_ListByProjectIDFiltered_Call struct {
	*mock.Call
}

// ListByProjectIDFiltered is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - filter contract.SegmentsListFilter
func (_e *MockSegmentsRepository_Expecter) ListByProjectIDFiltered(ctx interface{}, projectID interface{}, filter interface{}) *MockSegmentsRepository_ListByProjectIDFiltered_Call {
	return &MockSegmentsRepository_ListByProjectIDFiltered_Call{Call: _e.mock.On("ListByProjectIDFiltered", ctx, projectID, filter)}
}

func (_c *MockSegmentsRepository_ListByProjectIDFiltered_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, filter contract.SegmentsListFilter)) *MockSegmentsRepository_ListByProjectIDFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 contract.SegmentsListFilter
		if args[2] != nil {
			arg2 = args[2].(contract.SegmentsListFilter)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSegmentsRepository_ListByProjectIDFiltered_Call) Return(segments []domain.Segment, n int, err error) *MockSegmentsRepository_ListByProjectIDFiltered_Call {
	_c.Call.Return(segments, n, err)
	return _c
}

func (_c *MockSegmentsRepository_ListByProjectIDFiltered_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, filter contract.SegmentsListFilter) ([]domain.Segment, int, error)) *MockSegmentsRepository_ListByProjectIDFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSegmentsRepository
func (_mock *MockSegmentsRepository) Update(ctx context.Context, segment domain.Segment) (domain.Segment, error) {
	ret := _mock.Called(ctx, segment)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Segment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Segment) (domain.Segment, error)); ok {
		return returnFunc(ctx, segment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Segment) domain.Segment); ok {
		r0 = returnFunc(ctx, segment)
	} else {
		r0 = ret.Get(0).(domain.Segment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Segment) error); ok {
		r1 = returnFunc(ctx, segment)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSegmentsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSegmentsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - segment domain.Segment
func (_e *MockSegmentsRepository_Expecter) Update(ctx interface{}, segment interface{}) *MockSegmentsRepository_Update_Call {
	return &MockSegmentsRepository_Update_Call{Call: _e.mock.On("Update", ctx, segment)}
}

func (_c *MockSegmentsRepository_Update_Call) Run(run func(ctx context.Context, segment domain.Segment)) *MockSegmentsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Segment
		if args[1] != nil {
			arg1 = args[1].(domain.Segment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSegmentsRepository_Update_Call) Return(segment1 domain.Segment, err error) *MockSegmentsRepository_Update_Call {
	_c.Call.Return(segment1, err)
	return _c
}

func (_c *MockSegmentsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, segment domain.Segment) (domain.Segment, error)) *MockSegmentsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
