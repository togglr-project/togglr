// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockUserNotificationsUseCase creates a new instance of MockUserNotificationsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserNotificationsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserNotificationsUseCase {
	mock := &MockUserNotificationsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserNotificationsUseCase is an autogenerated mock type for the UserNotificationsUseCase type
type MockUserNotificationsUseCase struct {
	mock.Mock
}

type MockUserNotificationsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserNotificationsUseCase) EXPECT() *MockUserNotificationsUseCase_Expecter {
	return &MockUserNotificationsUseCase_Expecter{mock: &_m.Mock}
}

// CreateNotification provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) CreateNotification(ctx context.Context, userID domain.UserID, notificationType domain.UserNotificationType, content domain.UserNotificationContent) error {
	ret := _mock.Called(ctx, userID, notificationType, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.UserNotificationType, domain.UserNotificationContent) error); ok {
		r0 = returnFunc(ctx, userID, notificationType, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserNotificationsUseCase_CreateNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotification'
type MockUserNotificationsUseCase_CreateNotification_Call struct {
	*mock.Call
}

// CreateNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - notificationType domain.UserNotificationType
//   - content domain.UserNotificationContent
func (_e *MockUserNotificationsUseCase_Expecter) CreateNotification(ctx interface{}, userID interface{}, notificationType interface{}, content interface{}) *MockUserNotificationsUseCase_CreateNotification_Call {
	return &MockUserNotificationsUseCase_CreateNotification_Call{Call: _e.mock.On("CreateNotification", ctx, userID, notificationType, content)}
}

func (_c *MockUserNotificationsUseCase_CreateNotification_Call) Run(run func(ctx context.Context, userID domain.UserID, notificationType domain.UserNotificationType, content domain.UserNotificationContent)) *MockUserNotificationsUseCase_CreateNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserID
		if args[1] != nil {
			arg1 = args[1].(domain.UserID)
		}
		var arg2 domain.UserNotificationType
		if args[2] != nil {
			arg2 = args[2].(domain.UserNotificationType)
		}
		var arg3 domain.UserNotificationContent
		if args[3] != nil {
			arg3 = args[3].(domain.UserNotificationContent)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_CreateNotification_Call) Return(err error) *MockUserNotificationsUseCase_CreateNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserNotificationsUseCase_CreateNotification_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, notificationType domain.UserNotificationType, content domain.UserNotificationContent) error) *MockUserNotificationsUseCase_CreateNotification_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOldNotifications provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) DeleteOldNotifications(ctx context.Context, maxAge time.Duration, limit uint) (uint, error) {
	ret := _mock.Called(ctx, maxAge, limit)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOldNotifications")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration, uint) (uint, error)); ok {
		return returnFunc(ctx, maxAge, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration, uint) uint); ok {
		r0 = returnFunc(ctx, maxAge, limit)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Duration, uint) error); ok {
		r1 = returnFunc(ctx, maxAge, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserNotificationsUseCase_DeleteOldNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOldNotifications'
type MockUserNotificationsUseCase_DeleteOldNotifications_Call struct {
	*mock.Call
}

// DeleteOldNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - maxAge time.Duration
//   - limit uint
func (_e *MockUserNotificationsUseCase_Expecter) DeleteOldNotifications(ctx interface{}, maxAge interface{}, limit interface{}) *MockUserNotificationsUseCase_DeleteOldNotifications_Call {
	return &MockUserNotificationsUseCase_DeleteOldNotifications_Call{Call: _e.mock.On("DeleteOldNotifications", ctx, maxAge, limit)}
}

func (_c *MockUserNotificationsUseCase_DeleteOldNotifications_Call) Run(run func(ctx context.Context, maxAge time.Duration, limit uint)) *MockUserNotificationsUseCase_DeleteOldNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		var arg2 uint
		if args[2] != nil {
			arg2 = args[2].(uint)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_DeleteOldNotifications_Call) Return(v uint, err error) *MockUserNotificationsUseCase_DeleteOldNotifications_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserNotificationsUseCase_DeleteOldNotifications_Call) RunAndReturn(run func(ctx context.Context, maxAge time.Duration, limit uint) (uint, error)) *MockUserNotificationsUseCase_DeleteOldNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnreadCount provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) GetUnreadCount(ctx context.Context, userID domain.UserID) (uint, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUnreadCount")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) (uint, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) uint); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserNotificationsUseCase_GetUnreadCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnreadCount'
type MockUserNotificationsUseCase_GetUnreadCount_Call struct {
	*mock.Call
}

// GetUnreadCount is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
func (_e *MockUserNotificationsUseCase_Expecter) GetUnreadCount(ctx interface{}, userID interface{}) *MockUserNotificationsUseCase_GetUnreadCount_Call {
	return &MockUserNotificationsUseCase_GetUnreadCount_Call{Call: _e.mock.On("GetUnreadCount", ctx, userID)}
}

func (_c *MockUserNotificationsUseCase_GetUnreadCount_Call) Run(run func(ctx context.Context, userID domain.UserID)) *MockUserNotificationsUseCase_GetUnreadCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserID
		if args[1] != nil {
			arg1 = args[1].(domain.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_GetUnreadCount_Call) Return(v uint, err error) *MockUserNotificationsUseCase_GetUnreadCount_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserNotificationsUseCase_GetUnreadCount_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID) (uint, error)) *MockUserNotificationsUseCase_GetUnreadCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserNotifications provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) GetUserNotifications(ctx context.Context, userID domain.UserID, limit uint, offset uint) ([]domain.UserNotification, error) {
	ret := _mock.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNotifications")
	}

	var r0 []domain.UserNotification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, uint, uint) ([]domain.UserNotification, error)); ok {
		return returnFunc(ctx, userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, uint, uint) []domain.UserNotification); ok {
		r0 = returnFunc(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserNotification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, uint, uint) error); ok {
		r1 = returnFunc(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserNotificationsUseCase_GetUserNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserNotifications'
type MockUserNotificationsUseCase_GetUserNotifications_Call struct {
	*mock.Call
}

// GetUserNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - limit uint
//   - offset uint
func (_e *MockUserNotificationsUseCase_Expecter) GetUserNotifications(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *MockUserNotificationsUseCase_GetUserNotifications_Call {
	return &MockUserNotificationsUseCase_GetUserNotifications_Call{Call: _e.mock.On("GetUserNotifications", ctx, userID, limit, offset)}
}

func (_c *MockUserNotificationsUseCase_GetUserNotifications_Call) Run(run func(ctx context.Context, userID domain.UserID, limit uint, offset uint)) *MockUserNotificationsUseCase_GetUserNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserID
		if args[1] != nil {
			arg1 = args[1].(domain.UserID)
		}
		var arg2 uint
		if args[2] != nil {
			arg2 = args[2].(uint)
		}
		var arg3 uint
		if args[3] != nil {
			arg3 = args[3].(uint)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_GetUserNotifications_Call) Return(userNotifications []domain.UserNotification, err error) *MockUserNotificationsUseCase_GetUserNotifications_Call {
	_c.Call.Return(userNotifications, err)
	return _c
}

func (_c *MockUserNotificationsUseCase_GetUserNotifications_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, limit uint, offset uint) ([]domain.UserNotification, error)) *MockUserNotificationsUseCase_GetUserNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAllAsRead provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) MarkAllAsRead(ctx context.Context, userID domain.UserID) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAllAsRead")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserNotificationsUseCase_MarkAllAsRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAllAsRead'
type MockUserNotificationsUseCase_MarkAllAsRead_Call struct {
	*mock.Call
}

// MarkAllAsRead is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
func (_e *MockUserNotificationsUseCase_Expecter) MarkAllAsRead(ctx interface{}, userID interface{}) *MockUserNotificationsUseCase_MarkAllAsRead_Call {
	return &MockUserNotificationsUseCase_MarkAllAsRead_Call{Call: _e.mock.On("MarkAllAsRead", ctx, userID)}
}

func (_c *MockUserNotificationsUseCase_MarkAllAsRead_Call) Run(run func(ctx context.Context, userID domain.UserID)) *MockUserNotificationsUseCase_MarkAllAsRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserID
		if args[1] != nil {
			arg1 = args[1].(domain.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_MarkAllAsRead_Call) Return(err error) *MockUserNotificationsUseCase_MarkAllAsRead_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserNotificationsUseCase_MarkAllAsRead_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID) error) *MockUserNotificationsUseCase_MarkAllAsRead_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsRead provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) MarkAsRead(ctx context.Context, notificationID domain.UserNotificationID) error {
	ret := _mock.Called(ctx, notificationID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsRead")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserNotificationID) error); ok {
		r0 = returnFunc(ctx, notificationID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserNotificationsUseCase_MarkAsRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsRead'
type MockUserNotificationsUseCase_MarkAsRead_Call struct {
	*mock.Call
}

// MarkAsRead is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationID domain.UserNotificationID
func (_e *MockUserNotificationsUseCase_Expecter) MarkAsRead(ctx interface{}, notificationID interface{}) *MockUserNotificationsUseCase_MarkAsRead_Call {
	return &MockUserNotificationsUseCase_MarkAsRead_Call{Call: _e.mock.On("MarkAsRead", ctx, notificationID)}
}

func (_c *MockUserNotificationsUseCase_MarkAsRead_Call) Run(run func(ctx context.Context, notificationID domain.UserNotificationID)) *MockUserNotificationsUseCase_MarkAsRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.UserNotificationID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_MarkAsRead_Call) Return(err error) *MockUserNotificationsUseCase_MarkAsRead_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserNotificationsUseCase_MarkAsRead_Call) RunAndReturn(run func(ctx context.Context, notificationID domain.UserNotificationID) error) *MockUserNotificationsUseCase_MarkAsRead_Call {
	_c.Call.Return(run)
	return _c
}

// MarkEmailAsFailed provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) MarkEmailAsFailed(ctx context.Context, id domain.UserNotificationID, reason string) error {
	ret := _mock.Called(ctx, id, reason)

	if len(ret) == 0 {
		panic("no return value specified for MarkEmailAsFailed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserNotificationID, string) error); ok {
		r0 = returnFunc(ctx, id, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserNotificationsUseCase_MarkEmailAsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkEmailAsFailed'
type MockUserNotificationsUseCase_MarkEmailAsFailed_Call struct {
	*mock.Call
}

// MarkEmailAsFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserNotificationID
//   - reason string
func (_e *MockUserNotificationsUseCase_Expecter) MarkEmailAsFailed(ctx interface{}, id interface{}, reason interface{}) *MockUserNotificationsUseCase_MarkEmailAsFailed_Call {
	return &MockUserNotificationsUseCase_MarkEmailAsFailed_Call{Call: _e.mock.On("MarkEmailAsFailed", ctx, id, reason)}
}

func (_c *MockUserNotificationsUseCase_MarkEmailAsFailed_Call) Run(run func(ctx context.Context, id domain.UserNotificationID, reason string)) *MockUserNotificationsUseCase_MarkEmailAsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.UserNotificationID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_MarkEmailAsFailed_Call) Return(err error) *MockUserNotificationsUseCase_MarkEmailAsFailed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserNotificationsUseCase_MarkEmailAsFailed_Call) RunAndReturn(run func(ctx context.Context, id domain.UserNotificationID, reason string) error) *MockUserNotificationsUseCase_MarkEmailAsFailed_Call {
	_c.Call.Return(run)
	return _c
}

// MarkEmailAsSent provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) MarkEmailAsSent(ctx context.Context, id domain.UserNotificationID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkEmailAsSent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserNotificationID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserNotificationsUseCase_MarkEmailAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkEmailAsSent'
type MockUserNotificationsUseCase_MarkEmailAsSent_Call struct {
	*mock.Call
}

// MarkEmailAsSent is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.UserNotificationID
func (_e *MockUserNotificationsUseCase_Expecter) MarkEmailAsSent(ctx interface{}, id interface{}) *MockUserNotificationsUseCase_MarkEmailAsSent_Call {
	return &MockUserNotificationsUseCase_MarkEmailAsSent_Call{Call: _e.mock.On("MarkEmailAsSent", ctx, id)}
}

func (_c *MockUserNotificationsUseCase_MarkEmailAsSent_Call) Run(run func(ctx context.Context, id domain.UserNotificationID)) *MockUserNotificationsUseCase_MarkEmailAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserNotificationID
		if args[1] != nil {
			arg1 = args[1].(domain.UserNotificationID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_MarkEmailAsSent_Call) Return(err error) *MockUserNotificationsUseCase_MarkEmailAsSent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserNotificationsUseCase_MarkEmailAsSent_Call) RunAndReturn(run func(ctx context.Context, id domain.UserNotificationID) error) *MockUserNotificationsUseCase_MarkEmailAsSent_Call {
	_c.Call.Return(run)
	return _c
}

// TakePendingEmailNotifications provides a mock function for the type MockUserNotificationsUseCase
func (_mock *MockUserNotificationsUseCase) TakePendingEmailNotifications(ctx context.Context, limit uint) ([]domain.UserNotification, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for TakePendingEmailNotifications")
	}

	var r0 []domain.UserNotification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) ([]domain.UserNotification, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) []domain.UserNotification); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserNotification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserNotificationsUseCase_TakePendingEmailNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakePendingEmailNotifications'
type MockUserNotificationsUseCase_TakePendingEmailNotifications_Call struct {
	*mock.Call
}

// TakePendingEmailNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint
func (_e *MockUserNotificationsUseCase_Expecter) TakePendingEmailNotifications(ctx interface{}, limit interface{}) *MockUserNotificationsUseCase_TakePendingEmailNotifications_Call {
	return &MockUserNotificationsUseCase_TakePendingEmailNotifications_Call{Call: _e.mock.On("TakePendingEmailNotifications", ctx, limit)}
}

func (_c *MockUserNotificationsUseCase_TakePendingEmailNotifications_Call) Run(run func(ctx context.Context, limit uint)) *MockUserNotificationsUseCase_TakePendingEmailNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserNotificationsUseCase_TakePendingEmailNotifications_Call) Return(userNotifications []domain.UserNotification, err error) *MockUserNotificationsUseCase_TakePendingEmailNotifications_Call {
	_c.Call.Return(userNotifications, err)
	return _c
}

func (_c *MockUserNotificationsUseCase_TakePendingEmailNotifications_Call) RunAndReturn(run func(ctx context.Context, limit uint) ([]domain.UserNotification, error)) *MockUserNotificationsUseCase_TakePendingEmailNotifications_Call {
	_c.Call.Return(run)
	return _c
}
