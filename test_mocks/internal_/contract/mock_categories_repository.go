// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockCategoriesRepository creates a new instance of MockCategoriesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoriesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoriesRepository {
	mock := &MockCategoriesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoriesRepository is an autogenerated mock type for the CategoriesRepository type
type MockCategoriesRepository struct {
	mock.Mock
}

type MockCategoriesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoriesRepository) EXPECT() *MockCategoriesRepository_Expecter {
	return &MockCategoriesRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockCategoriesRepository
func (_mock *MockCategoriesRepository) Create(ctx context.Context, category *domain.CategoryDTO) (domain.CategoryID, error) {
	ret := _mock.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.CategoryID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CategoryDTO) (domain.CategoryID, error)); ok {
		return returnFunc(ctx, category)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CategoryDTO) domain.CategoryID); ok {
		r0 = returnFunc(ctx, category)
	} else {
		r0 = ret.Get(0).(domain.CategoryID)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.CategoryDTO) error); ok {
		r1 = returnFunc(ctx, category)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoriesRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCategoriesRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - category *domain.CategoryDTO
func (_e *MockCategoriesRepository_Expecter) Create(ctx interface{}, category interface{}) *MockCategoriesRepository_Create_Call {
	return &MockCategoriesRepository_Create_Call{Call: _e.mock.On("Create", ctx, category)}
}

func (_c *MockCategoriesRepository_Create_Call) Run(run func(ctx context.Context, category *domain.CategoryDTO)) *MockCategoriesRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.CategoryDTO
		if args[1] != nil {
			arg1 = args[1].(*domain.CategoryDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoriesRepository_Create_Call) Return(categoryID domain.CategoryID, err error) *MockCategoriesRepository_Create_Call {
	_c.Call.Return(categoryID, err)
	return _c
}

func (_c *MockCategoriesRepository_Create_Call) RunAndReturn(run func(ctx context.Context, category *domain.CategoryDTO) (domain.CategoryID, error)) *MockCategoriesRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCategoriesRepository
func (_mock *MockCategoriesRepository) Delete(ctx context.Context, id domain.CategoryID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoriesRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCategoriesRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.CategoryID
func (_e *MockCategoriesRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockCategoriesRepository_Delete_Call {
	return &MockCategoriesRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockCategoriesRepository_Delete_Call) Run(run func(ctx context.Context, id domain.CategoryID)) *MockCategoriesRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CategoryID
		if args[1] != nil {
			arg1 = args[1].(domain.CategoryID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoriesRepository_Delete_Call) Return(err error) *MockCategoriesRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoriesRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.CategoryID) error) *MockCategoriesRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockCategoriesRepository
func (_mock *MockCategoriesRepository) GetByID(ctx context.Context, id domain.CategoryID) (domain.Category, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID) (domain.Category, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID) domain.Category); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Category)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CategoryID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoriesRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockCategoriesRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.CategoryID
func (_e *MockCategoriesRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockCategoriesRepository_GetByID_Call {
	return &MockCategoriesRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockCategoriesRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.CategoryID)) *MockCategoriesRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CategoryID
		if args[1] != nil {
			arg1 = args[1].(domain.CategoryID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoriesRepository_GetByID_Call) Return(category domain.Category, err error) *MockCategoriesRepository_GetByID_Call {
	_c.Call.Return(category, err)
	return _c
}

func (_c *MockCategoriesRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.CategoryID) (domain.Category, error)) *MockCategoriesRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySlug provides a mock function for the type MockCategoriesRepository
func (_mock *MockCategoriesRepository) GetBySlug(ctx context.Context, slug string) (domain.Category, error) {
	ret := _mock.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetBySlug")
	}

	var r0 domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Category, error)); ok {
		return returnFunc(ctx, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Category); ok {
		r0 = returnFunc(ctx, slug)
	} else {
		r0 = ret.Get(0).(domain.Category)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoriesRepository_GetBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySlug'
type MockCategoriesRepository_GetBySlug_Call struct {
	*mock.Call
}

// GetBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockCategoriesRepository_Expecter) GetBySlug(ctx interface{}, slug interface{}) *MockCategoriesRepository_GetBySlug_Call {
	return &MockCategoriesRepository_GetBySlug_Call{Call: _e.mock.On("GetBySlug", ctx, slug)}
}

func (_c *MockCategoriesRepository_GetBySlug_Call) Run(run func(ctx context.Context, slug string)) *MockCategoriesRepository_GetBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoriesRepository_GetBySlug_Call) Return(category domain.Category, err error) *MockCategoriesRepository_GetBySlug_Call {
	_c.Call.Return(category, err)
	return _c
}

func (_c *MockCategoriesRepository_GetBySlug_Call) RunAndReturn(run func(ctx context.Context, slug string) (domain.Category, error)) *MockCategoriesRepository_GetBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockCategoriesRepository
func (_mock *MockCategoriesRepository) List(ctx context.Context) ([]domain.Category, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Category, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Category); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoriesRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCategoriesRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCategoriesRepository_Expecter) List(ctx interface{}) *MockCategoriesRepository_List_Call {
	return &MockCategoriesRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockCategoriesRepository_List_Call) Run(run func(ctx context.Context)) *MockCategoriesRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoriesRepository_List_Call) Return(categorys []domain.Category, err error) *MockCategoriesRepository_List_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *MockCategoriesRepository_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Category, error)) *MockCategoriesRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockCategoriesRepository
func (_mock *MockCategoriesRepository) Update(ctx context.Context, id domain.CategoryID, name string, slug string, description *string, color *string) error {
	ret := _mock.Called(ctx, id, name, slug, description, color)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CategoryID, string, string, *string, *string) error); ok {
		r0 = returnFunc(ctx, id, name, slug, description, color)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoriesRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCategoriesRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.CategoryID
//   - name string
//   - slug string
//   - description *string
//   - color *string
func (_e *MockCategoriesRepository_Expecter) Update(ctx interface{}, id interface{}, name interface{}, slug interface{}, description interface{}, color interface{}) *MockCategoriesRepository_Update_Call {
	return &MockCategoriesRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, name, slug, description, color)}
}

func (_c *MockCategoriesRepository_Update_Call) Run(run func(ctx context.Context, id domain.CategoryID, name string, slug string, description *string, color *string)) *MockCategoriesRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CategoryID
		if args[1] != nil {
			arg1 = args[1].(domain.CategoryID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockCategoriesRepository_Update_Call) Return(err error) *MockCategoriesRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoriesRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id domain.CategoryID, name string, slug string, description *string, color *string) error) *MockCategoriesRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
