// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockEnvironmentsRepository creates a new instance of MockEnvironmentsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnvironmentsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnvironmentsRepository {
	mock := &MockEnvironmentsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnvironmentsRepository is an autogenerated mock type for the EnvironmentsRepository type
type MockEnvironmentsRepository struct {
	mock.Mock
}

type MockEnvironmentsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnvironmentsRepository) EXPECT() *MockEnvironmentsRepository_Expecter {
	return &MockEnvironmentsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockEnvironmentsRepository
func (_mock *MockEnvironmentsRepository) Create(ctx context.Context, env domain.Environment) (domain.Environment, error) {
	ret := _mock.Called(ctx, env)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Environment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Environment) (domain.Environment, error)); ok {
		return returnFunc(ctx, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Environment) domain.Environment); ok {
		r0 = returnFunc(ctx, env)
	} else {
		r0 = ret.Get(0).(domain.Environment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Environment) error); ok {
		r1 = returnFunc(ctx, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironmentsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockEnvironmentsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - env domain.Environment
func (_e *MockEnvironmentsRepository_Expecter) Create(ctx interface{}, env interface{}) *MockEnvironmentsRepository_Create_Call {
	return &MockEnvironmentsRepository_Create_Call{Call: _e.mock.On("Create", ctx, env)}
}

func (_c *MockEnvironmentsRepository_Create_Call) Run(run func(ctx context.Context, env domain.Environment)) *MockEnvironmentsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Environment
		if args[1] != nil {
			arg1 = args[1].(domain.Environment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEnvironmentsRepository_Create_Call) Return(environment domain.Environment, err error) *MockEnvironmentsRepository_Create_Call {
	_c.Call.Return(environment, err)
	return _c
}

func (_c *MockEnvironmentsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, env domain.Environment) (domain.Environment, error)) *MockEnvironmentsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockEnvironmentsRepository
func (_mock *MockEnvironmentsRepository) Delete(ctx context.Context, id domain.EnvironmentID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.EnvironmentID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnvironmentsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockEnvironmentsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.EnvironmentID
func (_e *MockEnvironmentsRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockEnvironmentsRepository_Delete_Call {
	return &MockEnvironmentsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockEnvironmentsRepository_Delete_Call) Run(run func(ctx context.Context, id domain.EnvironmentID)) *MockEnvironmentsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.EnvironmentID
		if args[1] != nil {
			arg1 = args[1].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEnvironmentsRepository_Delete_Call) Return(err error) *MockEnvironmentsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnvironmentsRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.EnvironmentID) error) *MockEnvironmentsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockEnvironmentsRepository
func (_mock *MockEnvironmentsRepository) GetByID(ctx context.Context, id domain.EnvironmentID) (domain.Environment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Environment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.EnvironmentID) (domain.Environment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.EnvironmentID) domain.Environment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Environment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironmentsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockEnvironmentsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.EnvironmentID
func (_e *MockEnvironmentsRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockEnvironmentsRepository_GetByID_Call {
	return &MockEnvironmentsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockEnvironmentsRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.EnvironmentID)) *MockEnvironmentsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.EnvironmentID
		if args[1] != nil {
			arg1 = args[1].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEnvironmentsRepository_GetByID_Call) Return(environment domain.Environment, err error) *MockEnvironmentsRepository_GetByID_Call {
	_c.Call.Return(environment, err)
	return _c
}

func (_c *MockEnvironmentsRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.EnvironmentID) (domain.Environment, error)) *MockEnvironmentsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectIDAndKey provides a mock function for the type MockEnvironmentsRepository
func (_mock *MockEnvironmentsRepository) GetByProjectIDAndKey(ctx context.Context, projectID domain.ProjectID, key string) (domain.Environment, error) {
	ret := _mock.Called(ctx, projectID, key)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectIDAndKey")
	}

	var r0 domain.Environment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) (domain.Environment, error)); ok {
		return returnFunc(ctx, projectID, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) domain.Environment); ok {
		r0 = returnFunc(ctx, projectID, key)
	} else {
		r0 = ret.Get(0).(domain.Environment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = returnFunc(ctx, projectID, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironmentsRepository_GetByProjectIDAndKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectIDAndKey'
type MockEnvironmentsRepository_GetByProjectIDAndKey_Call struct {
	*mock.Call
}

// GetByProjectIDAndKey is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - key string
func (_e *MockEnvironmentsRepository_Expecter) GetByProjectIDAndKey(ctx interface{}, projectID interface{}, key interface{}) *MockEnvironmentsRepository_GetByProjectIDAndKey_Call {
	return &MockEnvironmentsRepository_GetByProjectIDAndKey_Call{Call: _e.mock.On("GetByProjectIDAndKey", ctx, projectID, key)}
}

func (_c *MockEnvironmentsRepository_GetByProjectIDAndKey_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, key string)) *MockEnvironmentsRepository_GetByProjectIDAndKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEnvironmentsRepository_GetByProjectIDAndKey_Call) Return(environment domain.Environment, err error) *MockEnvironmentsRepository_GetByProjectIDAndKey_Call {
	_c.Call.Return(environment, err)
	return _c
}

func (_c *MockEnvironmentsRepository_GetByProjectIDAndKey_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, key string) (domain.Environment, error)) *MockEnvironmentsRepository_GetByProjectIDAndKey_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectID provides a mock function for the type MockEnvironmentsRepository
func (_mock *MockEnvironmentsRepository) ListByProjectID(ctx context.Context, projectID domain.ProjectID) ([]domain.Environment, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectID")
	}

	var r0 []domain.Environment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.Environment, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.Environment); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Environment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironmentsRepository_ListByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectID'
type MockEnvironmentsRepository_ListByProjectID_Call struct {
	*mock.Call
}

// ListByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockEnvironmentsRepository_Expecter) ListByProjectID(ctx interface{}, projectID interface{}) *MockEnvironmentsRepository_ListByProjectID_Call {
	return &MockEnvironmentsRepository_ListByProjectID_Call{Call: _e.mock.On("ListByProjectID", ctx, projectID)}
}

func (_c *MockEnvironmentsRepository_ListByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockEnvironmentsRepository_ListByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEnvironmentsRepository_ListByProjectID_Call) Return(environments []domain.Environment, err error) *MockEnvironmentsRepository_ListByProjectID_Call {
	_c.Call.Return(environments, err)
	return _c
}

func (_c *MockEnvironmentsRepository_ListByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.Environment, error)) *MockEnvironmentsRepository_ListByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockEnvironmentsRepository
func (_mock *MockEnvironmentsRepository) Update(ctx context.Context, env domain.Environment) (domain.Environment, error) {
	ret := _mock.Called(ctx, env)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Environment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Environment) (domain.Environment, error)); ok {
		return returnFunc(ctx, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Environment) domain.Environment); ok {
		r0 = returnFunc(ctx, env)
	} else {
		r0 = ret.Get(0).(domain.Environment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Environment) error); ok {
		r1 = returnFunc(ctx, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironmentsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockEnvironmentsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - env domain.Environment
func (_e *MockEnvironmentsRepository_Expecter) Update(ctx interface{}, env interface{}) *MockEnvironmentsRepository_Update_Call {
	return &MockEnvironmentsRepository_Update_Call{Call: _e.mock.On("Update", ctx, env)}
}

func (_c *MockEnvironmentsRepository_Update_Call) Run(run func(ctx context.Context, env domain.Environment)) *MockEnvironmentsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Environment
		if args[1] != nil {
			arg1 = args[1].(domain.Environment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEnvironmentsRepository_Update_Call) Return(environment domain.Environment, err error) *MockEnvironmentsRepository_Update_Call {
	_c.Call.Return(environment, err)
	return _c
}

func (_c *MockEnvironmentsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, env domain.Environment) (domain.Environment, error)) *MockEnvironmentsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
