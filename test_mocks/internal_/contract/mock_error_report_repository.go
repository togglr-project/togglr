// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockErrorReportRepository creates a new instance of MockErrorReportRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorReportRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorReportRepository {
	mock := &MockErrorReportRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockErrorReportRepository is an autogenerated mock type for the ErrorReportRepository type
type MockErrorReportRepository struct {
	mock.Mock
}

type MockErrorReportRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorReportRepository) EXPECT() *MockErrorReportRepository_Expecter {
	return &MockErrorReportRepository_Expecter{mock: &_m.Mock}
}

// CountRecent provides a mock function for the type MockErrorReportRepository
func (_mock *MockErrorReportRepository) CountRecent(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, window time.Duration) (int, error) {
	ret := _mock.Called(ctx, featureID, envID, window)

	if len(ret) == 0 {
		panic("no return value specified for CountRecent")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID, time.Duration) (int, error)); ok {
		return returnFunc(ctx, featureID, envID, window)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID, time.Duration) int); ok {
		r0 = returnFunc(ctx, featureID, envID, window)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID, time.Duration) error); ok {
		r1 = returnFunc(ctx, featureID, envID, window)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockErrorReportRepository_CountRecent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountRecent'
type MockErrorReportRepository_CountRecent_Call struct {
	*mock.Call
}

// CountRecent is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
//   - window time.Duration
func (_e *MockErrorReportRepository_Expecter) CountRecent(ctx interface{}, featureID interface{}, envID interface{}, window interface{}) *MockErrorReportRepository_CountRecent_Call {
	return &MockErrorReportRepository_CountRecent_Call{Call: _e.mock.On("CountRecent", ctx, featureID, envID, window)}
}

func (_c *MockErrorReportRepository_CountRecent_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, window time.Duration)) *MockErrorReportRepository_CountRecent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockErrorReportRepository_CountRecent_Call) Return(n int, err error) *MockErrorReportRepository_CountRecent_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockErrorReportRepository_CountRecent_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, window time.Duration) (int, error)) *MockErrorReportRepository_CountRecent_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealth provides a mock function for the type MockErrorReportRepository
func (_mock *MockErrorReportRepository) GetHealth(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, window time.Duration) (domain.FeatureHealth, error) {
	ret := _mock.Called(ctx, featureID, envID, window)

	if len(ret) == 0 {
		panic("no return value specified for GetHealth")
	}

	var r0 domain.FeatureHealth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID, time.Duration) (domain.FeatureHealth, error)); ok {
		return returnFunc(ctx, featureID, envID, window)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID, time.Duration) domain.FeatureHealth); ok {
		r0 = returnFunc(ctx, featureID, envID, window)
	} else {
		r0 = ret.Get(0).(domain.FeatureHealth)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID, time.Duration) error); ok {
		r1 = returnFunc(ctx, featureID, envID, window)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockErrorReportRepository_GetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealth'
type MockErrorReportRepository_GetHealth_Call struct {
	*mock.Call
}

// GetHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
//   - window time.Duration
func (_e *MockErrorReportRepository_Expecter) GetHealth(ctx interface{}, featureID interface{}, envID interface{}, window interface{}) *MockErrorReportRepository_GetHealth_Call {
	return &MockErrorReportRepository_GetHealth_Call{Call: _e.mock.On("GetHealth", ctx, featureID, envID, window)}
}

func (_c *MockErrorReportRepository_GetHealth_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, window time.Duration)) *MockErrorReportRepository_GetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockErrorReportRepository_GetHealth_Call) Return(featureHealth domain.FeatureHealth, err error) *MockErrorReportRepository_GetHealth_Call {
	_c.Call.Return(featureHealth, err)
	return _c
}

func (_c *MockErrorReportRepository_GetHealth_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, window time.Duration) (domain.FeatureHealth, error)) *MockErrorReportRepository_GetHealth_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockErrorReportRepository
func (_mock *MockErrorReportRepository) Insert(ctx context.Context, report domain.ErrorReport) error {
	ret := _mock.Called(ctx, report)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ErrorReport) error); ok {
		r0 = returnFunc(ctx, report)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockErrorReportRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockErrorReportRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - report domain.ErrorReport
func (_e *MockErrorReportRepository_Expecter) Insert(ctx interface{}, report interface{}) *MockErrorReportRepository_Insert_Call {
	return &MockErrorReportRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, report)}
}

func (_c *MockErrorReportRepository_Insert_Call) Run(run func(ctx context.Context, report domain.ErrorReport)) *MockErrorReportRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ErrorReport
		if args[1] != nil {
			arg1 = args[1].(domain.ErrorReport)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockErrorReportRepository_Insert_Call) Return(err error) *MockErrorReportRepository_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockErrorReportRepository_Insert_Call) RunAndReturn(run func(ctx context.Context, report domain.ErrorReport) error) *MockErrorReportRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}
