// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeaturesUseCase creates a new instance of MockFeaturesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeaturesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeaturesUseCase {
	mock := &MockFeaturesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeaturesUseCase is an autogenerated mock type for the FeaturesUseCase type
type MockFeaturesUseCase struct {
	mock.Mock
}

type MockFeaturesUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeaturesUseCase) EXPECT() *MockFeaturesUseCase_Expecter {
	return &MockFeaturesUseCase_Expecter{mock: &_m.Mock}
}

// CreateWithChildren provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) CreateWithChildren(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule, tagsIDs []domain.TagID) (domain.FeatureExtended, error) {
	ret := _mock.Called(ctx, feature, variants, rules, tagsIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithChildren")
	}

	var r0 domain.FeatureExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule, []domain.TagID) (domain.FeatureExtended, error)); ok {
		return returnFunc(ctx, feature, variants, rules, tagsIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule, []domain.TagID) domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, feature, variants, rules, tagsIDs)
	} else {
		r0 = ret.Get(0).(domain.FeatureExtended)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule, []domain.TagID) error); ok {
		r1 = returnFunc(ctx, feature, variants, rules, tagsIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_CreateWithChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithChildren'
type MockFeaturesUseCase_CreateWithChildren_Call struct {
	*mock.Call
}

// CreateWithChildren is a helper method to define mock.On call
//   - ctx context.Context
//   - feature domain.Feature
//   - variants []domain.FlagVariant
//   - rules []domain.Rule
//   - tagsIDs []domain.TagID
func (_e *MockFeaturesUseCase_Expecter) CreateWithChildren(ctx interface{}, feature interface{}, variants interface{}, rules interface{}, tagsIDs interface{}) *MockFeaturesUseCase_CreateWithChildren_Call {
	return &MockFeaturesUseCase_CreateWithChildren_Call{Call: _e.mock.On("CreateWithChildren", ctx, feature, variants, rules, tagsIDs)}
}

func (_c *MockFeaturesUseCase_CreateWithChildren_Call) Run(run func(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule, tagsIDs []domain.TagID)) *MockFeaturesUseCase_CreateWithChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Feature
		if args[1] != nil {
			arg1 = args[1].(domain.Feature)
		}
		var arg2 []domain.FlagVariant
		if args[2] != nil {
			arg2 = args[2].([]domain.FlagVariant)
		}
		var arg3 []domain.Rule
		if args[3] != nil {
			arg3 = args[3].([]domain.Rule)
		}
		var arg4 []domain.TagID
		if args[4] != nil {
			arg4 = args[4].([]domain.TagID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_CreateWithChildren_Call) Return(featureExtended domain.FeatureExtended, err error) *MockFeaturesUseCase_CreateWithChildren_Call {
	_c.Call.Return(featureExtended, err)
	return _c
}

func (_c *MockFeaturesUseCase_CreateWithChildren_Call) RunAndReturn(run func(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule, tagsIDs []domain.TagID) (domain.FeatureExtended, error)) *MockFeaturesUseCase_CreateWithChildren_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) Delete(ctx context.Context, id domain.FeatureID, env string) (domain.GuardedResult, error) {
	ret := _mock.Called(ctx, id, env)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 domain.GuardedResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, string) (domain.GuardedResult, error)); ok {
		return returnFunc(ctx, id, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, string) domain.GuardedResult); ok {
		r0 = returnFunc(ctx, id, env)
	} else {
		r0 = ret.Get(0).(domain.GuardedResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, string) error); ok {
		r1 = returnFunc(ctx, id, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFeaturesUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
//   - env string
func (_e *MockFeaturesUseCase_Expecter) Delete(ctx interface{}, id interface{}, env interface{}) *MockFeaturesUseCase_Delete_Call {
	return &MockFeaturesUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, id, env)}
}

func (_c *MockFeaturesUseCase_Delete_Call) Run(run func(ctx context.Context, id domain.FeatureID, env string)) *MockFeaturesUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_Delete_Call) Return(guardedResult domain.GuardedResult, err error) *MockFeaturesUseCase_Delete_Call {
	_c.Call.Return(guardedResult, err)
	return _c
}

func (_c *MockFeaturesUseCase_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID, env string) (domain.GuardedResult, error)) *MockFeaturesUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDWithEnv provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) GetByIDWithEnv(ctx context.Context, id domain.FeatureID, env string) (domain.Feature, error) {
	ret := _mock.Called(ctx, id, env)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDWithEnv")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, string) (domain.Feature, error)); ok {
		return returnFunc(ctx, id, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, string) domain.Feature); ok {
		r0 = returnFunc(ctx, id, env)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, string) error); ok {
		r1 = returnFunc(ctx, id, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_GetByIDWithEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDWithEnv'
type MockFeaturesUseCase_GetByIDWithEnv_Call struct {
	*mock.Call
}

// GetByIDWithEnv is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
//   - env string
func (_e *MockFeaturesUseCase_Expecter) GetByIDWithEnv(ctx interface{}, id interface{}, env interface{}) *MockFeaturesUseCase_GetByIDWithEnv_Call {
	return &MockFeaturesUseCase_GetByIDWithEnv_Call{Call: _e.mock.On("GetByIDWithEnv", ctx, id, env)}
}

func (_c *MockFeaturesUseCase_GetByIDWithEnv_Call) Run(run func(ctx context.Context, id domain.FeatureID, env string)) *MockFeaturesUseCase_GetByIDWithEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_GetByIDWithEnv_Call) Return(feature domain.Feature, err error) *MockFeaturesUseCase_GetByIDWithEnv_Call {
	_c.Call.Return(feature, err)
	return _c
}

func (_c *MockFeaturesUseCase_GetByIDWithEnv_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID, env string) (domain.Feature, error)) *MockFeaturesUseCase_GetByIDWithEnv_Call {
	_c.Call.Return(run)
	return _c
}

// GetByKeyWithEnv provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) GetByKeyWithEnv(ctx context.Context, key string, env string) (domain.Feature, error) {
	ret := _mock.Called(ctx, key, env)

	if len(ret) == 0 {
		panic("no return value specified for GetByKeyWithEnv")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.Feature, error)); ok {
		return returnFunc(ctx, key, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.Feature); ok {
		r0 = returnFunc(ctx, key, env)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_GetByKeyWithEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByKeyWithEnv'
type MockFeaturesUseCase_GetByKeyWithEnv_Call struct {
	*mock.Call
}

// GetByKeyWithEnv is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - env string
func (_e *MockFeaturesUseCase_Expecter) GetByKeyWithEnv(ctx interface{}, key interface{}, env interface{}) *MockFeaturesUseCase_GetByKeyWithEnv_Call {
	return &MockFeaturesUseCase_GetByKeyWithEnv_Call{Call: _e.mock.On("GetByKeyWithEnv", ctx, key, env)}
}

func (_c *MockFeaturesUseCase_GetByKeyWithEnv_Call) Run(run func(ctx context.Context, key string, env string)) *MockFeaturesUseCase_GetByKeyWithEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_GetByKeyWithEnv_Call) Return(feature domain.Feature, err error) *MockFeaturesUseCase_GetByKeyWithEnv_Call {
	_c.Call.Return(feature, err)
	return _c
}

func (_c *MockFeaturesUseCase_GetByKeyWithEnv_Call) RunAndReturn(run func(ctx context.Context, key string, env string) (domain.Feature, error)) *MockFeaturesUseCase_GetByKeyWithEnv_Call {
	_c.Call.Return(run)
	return _c
}

// GetByKeyWithEnvCached provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) GetByKeyWithEnvCached(ctx context.Context, key string, env string) (domain.Feature, error) {
	ret := _mock.Called(ctx, key, env)

	if len(ret) == 0 {
		panic("no return value specified for GetByKeyWithEnvCached")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.Feature, error)); ok {
		return returnFunc(ctx, key, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.Feature); ok {
		r0 = returnFunc(ctx, key, env)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_GetByKeyWithEnvCached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByKeyWithEnvCached'
type MockFeaturesUseCase_GetByKeyWithEnvCached_Call struct {
	*mock.Call
}

// GetByKeyWithEnvCached is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - env string
func (_e *MockFeaturesUseCase_Expecter) GetByKeyWithEnvCached(ctx interface{}, key interface{}, env interface{}) *MockFeaturesUseCase_GetByKeyWithEnvCached_Call {
	return &MockFeaturesUseCase_GetByKeyWithEnvCached_Call{Call: _e.mock.On("GetByKeyWithEnvCached", ctx, key, env)}
}

func (_c *MockFeaturesUseCase_GetByKeyWithEnvCached_Call) Run(run func(ctx context.Context, key string, env string)) *MockFeaturesUseCase_GetByKeyWithEnvCached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_GetByKeyWithEnvCached_Call) Return(feature domain.Feature, err error) *MockFeaturesUseCase_GetByKeyWithEnvCached_Call {
	_c.Call.Return(feature, err)
	return _c
}

func (_c *MockFeaturesUseCase_GetByKeyWithEnvCached_Call) RunAndReturn(run func(ctx context.Context, key string, env string) (domain.Feature, error)) *MockFeaturesUseCase_GetByKeyWithEnvCached_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtendedByID provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) GetExtendedByID(ctx context.Context, id domain.FeatureID, env string) (domain.FeatureExtended, error) {
	ret := _mock.Called(ctx, id, env)

	if len(ret) == 0 {
		panic("no return value specified for GetExtendedByID")
	}

	var r0 domain.FeatureExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, string) (domain.FeatureExtended, error)); ok {
		return returnFunc(ctx, id, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, string) domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, id, env)
	} else {
		r0 = ret.Get(0).(domain.FeatureExtended)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, string) error); ok {
		r1 = returnFunc(ctx, id, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_GetExtendedByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtendedByID'
type MockFeaturesUseCase_GetExtendedByID_Call struct {
	*mock.Call
}

// GetExtendedByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
//   - env string
func (_e *MockFeaturesUseCase_Expecter) GetExtendedByID(ctx interface{}, id interface{}, env interface{}) *MockFeaturesUseCase_GetExtendedByID_Call {
	return &MockFeaturesUseCase_GetExtendedByID_Call{Call: _e.mock.On("GetExtendedByID", ctx, id, env)}
}

func (_c *MockFeaturesUseCase_GetExtendedByID_Call) Run(run func(ctx context.Context, id domain.FeatureID, env string)) *MockFeaturesUseCase_GetExtendedByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_GetExtendedByID_Call) Return(featureExtended domain.FeatureExtended, err error) *MockFeaturesUseCase_GetExtendedByID_Call {
	_c.Call.Return(featureExtended, err)
	return _c
}

func (_c *MockFeaturesUseCase_GetExtendedByID_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID, env string) (domain.FeatureExtended, error)) *MockFeaturesUseCase_GetExtendedByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureParams provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) GetFeatureParams(ctx context.Context, featureID domain.FeatureID) ([]domain.FeatureParams, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureParams")
	}

	var r0 []domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) ([]domain.FeatureParams, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) []domain.FeatureParams); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureParams)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_GetFeatureParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureParams'
type MockFeaturesUseCase_GetFeatureParams_Call struct {
	*mock.Call
}

// GetFeatureParams is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockFeaturesUseCase_Expecter) GetFeatureParams(ctx interface{}, featureID interface{}) *MockFeaturesUseCase_GetFeatureParams_Call {
	return &MockFeaturesUseCase_GetFeatureParams_Call{Call: _e.mock.On("GetFeatureParams", ctx, featureID)}
}

func (_c *MockFeaturesUseCase_GetFeatureParams_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockFeaturesUseCase_GetFeatureParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_GetFeatureParams_Call) Return(featureParamss []domain.FeatureParams, err error) *MockFeaturesUseCase_GetFeatureParams_Call {
	_c.Call.Return(featureParamss, err)
	return _c
}

func (_c *MockFeaturesUseCase_GetFeatureParams_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) ([]domain.FeatureParams, error)) *MockFeaturesUseCase_GetFeatureParams_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) List(ctx context.Context, env string) ([]domain.Feature, error) {
	ret := _mock.Called(ctx, env)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]domain.Feature, error)); ok {
		return returnFunc(ctx, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.Feature); ok {
		r0 = returnFunc(ctx, env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFeaturesUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
func (_e *MockFeaturesUseCase_Expecter) List(ctx interface{}, env interface{}) *MockFeaturesUseCase_List_Call {
	return &MockFeaturesUseCase_List_Call{Call: _e.mock.On("List", ctx, env)}
}

func (_c *MockFeaturesUseCase_List_Call) Run(run func(ctx context.Context, env string)) *MockFeaturesUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_List_Call) Return(features []domain.Feature, err error) *MockFeaturesUseCase_List_Call {
	_c.Call.Return(features, err)
	return _c
}

func (_c *MockFeaturesUseCase_List_Call) RunAndReturn(run func(ctx context.Context, env string) ([]domain.Feature, error)) *MockFeaturesUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectID provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) ListByProjectID(ctx context.Context, projectID domain.ProjectID, env string) ([]domain.Feature, error) {
	ret := _mock.Called(ctx, projectID, env)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectID")
	}

	var r0 []domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) ([]domain.Feature, error)); ok {
		return returnFunc(ctx, projectID, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) []domain.Feature); ok {
		r0 = returnFunc(ctx, projectID, env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = returnFunc(ctx, projectID, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_ListByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectID'
type MockFeaturesUseCase_ListByProjectID_Call struct {
	*mock.Call
}

// ListByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - env string
func (_e *MockFeaturesUseCase_Expecter) ListByProjectID(ctx interface{}, projectID interface{}, env interface{}) *MockFeaturesUseCase_ListByProjectID_Call {
	return &MockFeaturesUseCase_ListByProjectID_Call{Call: _e.mock.On("ListByProjectID", ctx, projectID, env)}
}

func (_c *MockFeaturesUseCase_ListByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, env string)) *MockFeaturesUseCase_ListByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_ListByProjectID_Call) Return(features []domain.Feature, err error) *MockFeaturesUseCase_ListByProjectID_Call {
	_c.Call.Return(features, err)
	return _c
}

func (_c *MockFeaturesUseCase_ListByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, env string) ([]domain.Feature, error)) *MockFeaturesUseCase_ListByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectIDFiltered provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) ListByProjectIDFiltered(ctx context.Context, projectID domain.ProjectID, env string, filter contract.FeaturesListFilter) ([]domain.Feature, int, error) {
	ret := _mock.Called(ctx, projectID, env, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectIDFiltered")
	}

	var r0 []domain.Feature
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, contract.FeaturesListFilter) ([]domain.Feature, int, error)); ok {
		return returnFunc(ctx, projectID, env, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, contract.FeaturesListFilter) []domain.Feature); ok {
		r0 = returnFunc(ctx, projectID, env, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, contract.FeaturesListFilter) int); ok {
		r1 = returnFunc(ctx, projectID, env, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.ProjectID, string, contract.FeaturesListFilter) error); ok {
		r2 = returnFunc(ctx, projectID, env, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeaturesUseCase_ListByProjectIDFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectIDFiltered'
type MockFeaturesUseCase_ListByProjectIDFiltered_Call struct {
	*mock.Call
}

// ListByProjectIDFiltered is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - env string
//   - filter contract.FeaturesListFilter
func (_e *MockFeaturesUseCase_Expecter) ListByProjectIDFiltered(ctx interface{}, projectID interface{}, env interface{}, filter interface{}) *MockFeaturesUseCase_ListByProjectIDFiltered_Call {
	return &MockFeaturesUseCase_ListByProjectIDFiltered_Call{Call: _e.mock.On("ListByProjectIDFiltered", ctx, projectID, env, filter)}
}

func (_c *MockFeaturesUseCase_ListByProjectIDFiltered_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, env string, filter contract.FeaturesListFilter)) *MockFeaturesUseCase_ListByProjectIDFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 contract.FeaturesListFilter
		if args[3] != nil {
			arg3 = args[3].(contract.FeaturesListFilter)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_ListByProjectIDFiltered_Call) Return(features []domain.Feature, n int, err error) *MockFeaturesUseCase_ListByProjectIDFiltered_Call {
	_c.Call.Return(features, n, err)
	return _c
}

func (_c *MockFeaturesUseCase_ListByProjectIDFiltered_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, env string, filter contract.FeaturesListFilter) ([]domain.Feature, int, error)) *MockFeaturesUseCase_ListByProjectIDFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// ListExtendedByProjectID provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) ListExtendedByProjectID(ctx context.Context, projectID domain.ProjectID, env string) ([]domain.FeatureExtended, error) {
	ret := _mock.Called(ctx, projectID, env)

	if len(ret) == 0 {
		panic("no return value specified for ListExtendedByProjectID")
	}

	var r0 []domain.FeatureExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) ([]domain.FeatureExtended, error)); ok {
		return returnFunc(ctx, projectID, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) []domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, projectID, env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureExtended)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = returnFunc(ctx, projectID, env)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_ListExtendedByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExtendedByProjectID'
type MockFeaturesUseCase_ListExtendedByProjectID_Call struct {
	*mock.Call
}

// ListExtendedByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - env string
func (_e *MockFeaturesUseCase_Expecter) ListExtendedByProjectID(ctx interface{}, projectID interface{}, env interface{}) *MockFeaturesUseCase_ListExtendedByProjectID_Call {
	return &MockFeaturesUseCase_ListExtendedByProjectID_Call{Call: _e.mock.On("ListExtendedByProjectID", ctx, projectID, env)}
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, env string)) *MockFeaturesUseCase_ListExtendedByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectID_Call) Return(featureExtendeds []domain.FeatureExtended, err error) *MockFeaturesUseCase_ListExtendedByProjectID_Call {
	_c.Call.Return(featureExtendeds, err)
	return _c
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, env string) ([]domain.FeatureExtended, error)) *MockFeaturesUseCase_ListExtendedByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// ListExtendedByProjectIDFiltered provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) ListExtendedByProjectIDFiltered(ctx context.Context, projectID domain.ProjectID, env string, filter contract.FeaturesListFilter) ([]domain.FeatureExtended, int, error) {
	ret := _mock.Called(ctx, projectID, env, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListExtendedByProjectIDFiltered")
	}

	var r0 []domain.FeatureExtended
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, contract.FeaturesListFilter) ([]domain.FeatureExtended, int, error)); ok {
		return returnFunc(ctx, projectID, env, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, contract.FeaturesListFilter) []domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, projectID, env, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureExtended)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, contract.FeaturesListFilter) int); ok {
		r1 = returnFunc(ctx, projectID, env, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.ProjectID, string, contract.FeaturesListFilter) error); ok {
		r2 = returnFunc(ctx, projectID, env, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExtendedByProjectIDFiltered'
type MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call struct {
	*mock.Call
}

// ListExtendedByProjectIDFiltered is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - env string
//   - filter contract.FeaturesListFilter
func (_e *MockFeaturesUseCase_Expecter) ListExtendedByProjectIDFiltered(ctx interface{}, projectID interface{}, env interface{}, filter interface{}) *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call {
	return &MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call{Call: _e.mock.On("ListExtendedByProjectIDFiltered", ctx, projectID, env, filter)}
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, env string, filter contract.FeaturesListFilter)) *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 contract.FeaturesListFilter
		if args[3] != nil {
			arg3 = args[3].(contract.FeaturesListFilter)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call) Return(featureExtendeds []domain.FeatureExtended, n int, err error) *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call {
	_c.Call.Return(featureExtendeds, n, err)
	return _c
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, env string, filter contract.FeaturesListFilter) ([]domain.FeatureExtended, int, error)) *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// Toggle provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) Toggle(ctx context.Context, id domain.FeatureID, enabled bool, env string) (domain.Feature, domain.GuardedResult, error) {
	ret := _mock.Called(ctx, id, enabled, env)

	if len(ret) == 0 {
		panic("no return value specified for Toggle")
	}

	var r0 domain.Feature
	var r1 domain.GuardedResult
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, bool, string) (domain.Feature, domain.GuardedResult, error)); ok {
		return returnFunc(ctx, id, enabled, env)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, bool, string) domain.Feature); ok {
		r0 = returnFunc(ctx, id, enabled, env)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, bool, string) domain.GuardedResult); ok {
		r1 = returnFunc(ctx, id, enabled, env)
	} else {
		r1 = ret.Get(1).(domain.GuardedResult)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.FeatureID, bool, string) error); ok {
		r2 = returnFunc(ctx, id, enabled, env)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeaturesUseCase_Toggle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Toggle'
type MockFeaturesUseCase_Toggle_Call struct {
	*mock.Call
}

// Toggle is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
//   - enabled bool
//   - env string
func (_e *MockFeaturesUseCase_Expecter) Toggle(ctx interface{}, id interface{}, enabled interface{}, env interface{}) *MockFeaturesUseCase_Toggle_Call {
	return &MockFeaturesUseCase_Toggle_Call{Call: _e.mock.On("Toggle", ctx, id, enabled, env)}
}

func (_c *MockFeaturesUseCase_Toggle_Call) Run(run func(ctx context.Context, id domain.FeatureID, enabled bool, env string)) *MockFeaturesUseCase_Toggle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_Toggle_Call) Return(feature domain.Feature, guardedResult domain.GuardedResult, err error) *MockFeaturesUseCase_Toggle_Call {
	_c.Call.Return(feature, guardedResult, err)
	return _c
}

func (_c *MockFeaturesUseCase_Toggle_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID, enabled bool, env string) (domain.Feature, domain.GuardedResult, error)) *MockFeaturesUseCase_Toggle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithChildren provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) UpdateWithChildren(ctx context.Context, envKey string, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule, tags []domain.FeatureTags) (domain.FeatureExtended, domain.GuardedResult, error) {
	ret := _mock.Called(ctx, envKey, feature, variants, rules, tags)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithChildren")
	}

	var r0 domain.FeatureExtended
	var r1 domain.GuardedResult
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.Feature, []domain.FlagVariant, []domain.Rule, []domain.FeatureTags) (domain.FeatureExtended, domain.GuardedResult, error)); ok {
		return returnFunc(ctx, envKey, feature, variants, rules, tags)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.Feature, []domain.FlagVariant, []domain.Rule, []domain.FeatureTags) domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, envKey, feature, variants, rules, tags)
	} else {
		r0 = ret.Get(0).(domain.FeatureExtended)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, domain.Feature, []domain.FlagVariant, []domain.Rule, []domain.FeatureTags) domain.GuardedResult); ok {
		r1 = returnFunc(ctx, envKey, feature, variants, rules, tags)
	} else {
		r1 = ret.Get(1).(domain.GuardedResult)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, domain.Feature, []domain.FlagVariant, []domain.Rule, []domain.FeatureTags) error); ok {
		r2 = returnFunc(ctx, envKey, feature, variants, rules, tags)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeaturesUseCase_UpdateWithChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithChildren'
type MockFeaturesUseCase_UpdateWithChildren_Call struct {
	*mock.Call
}

// UpdateWithChildren is a helper method to define mock.On call
//   - ctx context.Context
//   - envKey string
//   - feature domain.Feature
//   - variants []domain.FlagVariant
//   - rules []domain.Rule
//   - tags []domain.FeatureTags
func (_e *MockFeaturesUseCase_Expecter) UpdateWithChildren(ctx interface{}, envKey interface{}, feature interface{}, variants interface{}, rules interface{}, tags interface{}) *MockFeaturesUseCase_UpdateWithChildren_Call {
	return &MockFeaturesUseCase_UpdateWithChildren_Call{Call: _e.mock.On("UpdateWithChildren", ctx, envKey, feature, variants, rules, tags)}
}

func (_c *MockFeaturesUseCase_UpdateWithChildren_Call) Run(run func(ctx context.Context, envKey string, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule, tags []domain.FeatureTags)) *MockFeaturesUseCase_UpdateWithChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.Feature
		if args[2] != nil {
			arg2 = args[2].(domain.Feature)
		}
		var arg3 []domain.FlagVariant
		if args[3] != nil {
			arg3 = args[3].([]domain.FlagVariant)
		}
		var arg4 []domain.Rule
		if args[4] != nil {
			arg4 = args[4].([]domain.Rule)
		}
		var arg5 []domain.FeatureTags
		if args[5] != nil {
			arg5 = args[5].([]domain.FeatureTags)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_UpdateWithChildren_Call) Return(featureExtended domain.FeatureExtended, guardedResult domain.GuardedResult, err error) *MockFeaturesUseCase_UpdateWithChildren_Call {
	_c.Call.Return(featureExtended, guardedResult, err)
	return _c
}

func (_c *MockFeaturesUseCase_UpdateWithChildren_Call) RunAndReturn(run func(ctx context.Context, envKey string, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule, tags []domain.FeatureTags) (domain.FeatureExtended, domain.GuardedResult, error)) *MockFeaturesUseCase_UpdateWithChildren_Call {
	_c.Call.Return(run)
	return _c
}
