// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeaturesUseCase creates a new instance of MockFeaturesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeaturesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeaturesUseCase {
	mock := &MockFeaturesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeaturesUseCase is an autogenerated mock type for the FeaturesUseCase type
type MockFeaturesUseCase struct {
	mock.Mock
}

type MockFeaturesUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeaturesUseCase) EXPECT() *MockFeaturesUseCase_Expecter {
	return &MockFeaturesUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) Create(ctx context.Context, feature domain.Feature) (domain.Feature, error) {
	ret := _mock.Called(ctx, feature)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature) (domain.Feature, error)); ok {
		return returnFunc(ctx, feature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature) domain.Feature); ok {
		r0 = returnFunc(ctx, feature)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Feature) error); ok {
		r1 = returnFunc(ctx, feature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFeaturesUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - feature domain.Feature
func (_e *MockFeaturesUseCase_Expecter) Create(ctx interface{}, feature interface{}) *MockFeaturesUseCase_Create_Call {
	return &MockFeaturesUseCase_Create_Call{Call: _e.mock.On("Create", ctx, feature)}
}

func (_c *MockFeaturesUseCase_Create_Call) Run(run func(ctx context.Context, feature domain.Feature)) *MockFeaturesUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Feature
		if args[1] != nil {
			arg1 = args[1].(domain.Feature)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_Create_Call) Return(feature1 domain.Feature, err error) *MockFeaturesUseCase_Create_Call {
	_c.Call.Return(feature1, err)
	return _c
}

func (_c *MockFeaturesUseCase_Create_Call) RunAndReturn(run func(ctx context.Context, feature domain.Feature) (domain.Feature, error)) *MockFeaturesUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithChildren provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) CreateWithChildren(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule) (domain.FeatureExtended, error) {
	ret := _mock.Called(ctx, feature, variants, rules)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithChildren")
	}

	var r0 domain.FeatureExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule) (domain.FeatureExtended, error)); ok {
		return returnFunc(ctx, feature, variants, rules)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule) domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, feature, variants, rules)
	} else {
		r0 = ret.Get(0).(domain.FeatureExtended)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule) error); ok {
		r1 = returnFunc(ctx, feature, variants, rules)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_CreateWithChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithChildren'
type MockFeaturesUseCase_CreateWithChildren_Call struct {
	*mock.Call
}

// CreateWithChildren is a helper method to define mock.On call
//   - ctx context.Context
//   - feature domain.Feature
//   - variants []domain.FlagVariant
//   - rules []domain.Rule
func (_e *MockFeaturesUseCase_Expecter) CreateWithChildren(ctx interface{}, feature interface{}, variants interface{}, rules interface{}) *MockFeaturesUseCase_CreateWithChildren_Call {
	return &MockFeaturesUseCase_CreateWithChildren_Call{Call: _e.mock.On("CreateWithChildren", ctx, feature, variants, rules)}
}

func (_c *MockFeaturesUseCase_CreateWithChildren_Call) Run(run func(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule)) *MockFeaturesUseCase_CreateWithChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Feature
		if args[1] != nil {
			arg1 = args[1].(domain.Feature)
		}
		var arg2 []domain.FlagVariant
		if args[2] != nil {
			arg2 = args[2].([]domain.FlagVariant)
		}
		var arg3 []domain.Rule
		if args[3] != nil {
			arg3 = args[3].([]domain.Rule)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_CreateWithChildren_Call) Return(featureExtended domain.FeatureExtended, err error) *MockFeaturesUseCase_CreateWithChildren_Call {
	_c.Call.Return(featureExtended, err)
	return _c
}

func (_c *MockFeaturesUseCase_CreateWithChildren_Call) RunAndReturn(run func(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule) (domain.FeatureExtended, error)) *MockFeaturesUseCase_CreateWithChildren_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) Delete(ctx context.Context, id domain.FeatureID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeaturesUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFeaturesUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
func (_e *MockFeaturesUseCase_Expecter) Delete(ctx interface{}, id interface{}) *MockFeaturesUseCase_Delete_Call {
	return &MockFeaturesUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockFeaturesUseCase_Delete_Call) Run(run func(ctx context.Context, id domain.FeatureID)) *MockFeaturesUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_Delete_Call) Return(err error) *MockFeaturesUseCase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeaturesUseCase_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID) error) *MockFeaturesUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) GetByID(ctx context.Context, id domain.FeatureID) (domain.Feature, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) (domain.Feature, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) domain.Feature); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockFeaturesUseCase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
func (_e *MockFeaturesUseCase_Expecter) GetByID(ctx interface{}, id interface{}) *MockFeaturesUseCase_GetByID_Call {
	return &MockFeaturesUseCase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockFeaturesUseCase_GetByID_Call) Run(run func(ctx context.Context, id domain.FeatureID)) *MockFeaturesUseCase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_GetByID_Call) Return(feature domain.Feature, err error) *MockFeaturesUseCase_GetByID_Call {
	_c.Call.Return(feature, err)
	return _c
}

func (_c *MockFeaturesUseCase_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID) (domain.Feature, error)) *MockFeaturesUseCase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByKey provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) GetByKey(ctx context.Context, key string) (domain.Feature, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetByKey")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Feature, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Feature); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_GetByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByKey'
type MockFeaturesUseCase_GetByKey_Call struct {
	*mock.Call
}

// GetByKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockFeaturesUseCase_Expecter) GetByKey(ctx interface{}, key interface{}) *MockFeaturesUseCase_GetByKey_Call {
	return &MockFeaturesUseCase_GetByKey_Call{Call: _e.mock.On("GetByKey", ctx, key)}
}

func (_c *MockFeaturesUseCase_GetByKey_Call) Run(run func(ctx context.Context, key string)) *MockFeaturesUseCase_GetByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_GetByKey_Call) Return(feature domain.Feature, err error) *MockFeaturesUseCase_GetByKey_Call {
	_c.Call.Return(feature, err)
	return _c
}

func (_c *MockFeaturesUseCase_GetByKey_Call) RunAndReturn(run func(ctx context.Context, key string) (domain.Feature, error)) *MockFeaturesUseCase_GetByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtendedByID provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) GetExtendedByID(ctx context.Context, id domain.FeatureID) (domain.FeatureExtended, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetExtendedByID")
	}

	var r0 domain.FeatureExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) (domain.FeatureExtended, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.FeatureExtended)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_GetExtendedByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtendedByID'
type MockFeaturesUseCase_GetExtendedByID_Call struct {
	*mock.Call
}

// GetExtendedByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
func (_e *MockFeaturesUseCase_Expecter) GetExtendedByID(ctx interface{}, id interface{}) *MockFeaturesUseCase_GetExtendedByID_Call {
	return &MockFeaturesUseCase_GetExtendedByID_Call{Call: _e.mock.On("GetExtendedByID", ctx, id)}
}

func (_c *MockFeaturesUseCase_GetExtendedByID_Call) Run(run func(ctx context.Context, id domain.FeatureID)) *MockFeaturesUseCase_GetExtendedByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_GetExtendedByID_Call) Return(featureExtended domain.FeatureExtended, err error) *MockFeaturesUseCase_GetExtendedByID_Call {
	_c.Call.Return(featureExtended, err)
	return _c
}

func (_c *MockFeaturesUseCase_GetExtendedByID_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID) (domain.FeatureExtended, error)) *MockFeaturesUseCase_GetExtendedByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) List(ctx context.Context) ([]domain.Feature, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Feature, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Feature); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFeaturesUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeaturesUseCase_Expecter) List(ctx interface{}) *MockFeaturesUseCase_List_Call {
	return &MockFeaturesUseCase_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockFeaturesUseCase_List_Call) Run(run func(ctx context.Context)) *MockFeaturesUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_List_Call) Return(features []domain.Feature, err error) *MockFeaturesUseCase_List_Call {
	_c.Call.Return(features, err)
	return _c
}

func (_c *MockFeaturesUseCase_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Feature, error)) *MockFeaturesUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectID provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) ListByProjectID(ctx context.Context, projectID domain.ProjectID) ([]domain.Feature, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectID")
	}

	var r0 []domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.Feature, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.Feature); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_ListByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectID'
type MockFeaturesUseCase_ListByProjectID_Call struct {
	*mock.Call
}

// ListByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockFeaturesUseCase_Expecter) ListByProjectID(ctx interface{}, projectID interface{}) *MockFeaturesUseCase_ListByProjectID_Call {
	return &MockFeaturesUseCase_ListByProjectID_Call{Call: _e.mock.On("ListByProjectID", ctx, projectID)}
}

func (_c *MockFeaturesUseCase_ListByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockFeaturesUseCase_ListByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_ListByProjectID_Call) Return(features []domain.Feature, err error) *MockFeaturesUseCase_ListByProjectID_Call {
	_c.Call.Return(features, err)
	return _c
}

func (_c *MockFeaturesUseCase_ListByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.Feature, error)) *MockFeaturesUseCase_ListByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectIDFiltered provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) ListByProjectIDFiltered(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter) ([]domain.Feature, int, error) {
	ret := _mock.Called(ctx, projectID, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectIDFiltered")
	}

	var r0 []domain.Feature
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) ([]domain.Feature, int, error)); ok {
		return returnFunc(ctx, projectID, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) []domain.Feature); ok {
		r0 = returnFunc(ctx, projectID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) int); ok {
		r1 = returnFunc(ctx, projectID, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) error); ok {
		r2 = returnFunc(ctx, projectID, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeaturesUseCase_ListByProjectIDFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectIDFiltered'
type MockFeaturesUseCase_ListByProjectIDFiltered_Call struct {
	*mock.Call
}

// ListByProjectIDFiltered is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - filter contract.FeaturesListFilter
func (_e *MockFeaturesUseCase_Expecter) ListByProjectIDFiltered(ctx interface{}, projectID interface{}, filter interface{}) *MockFeaturesUseCase_ListByProjectIDFiltered_Call {
	return &MockFeaturesUseCase_ListByProjectIDFiltered_Call{Call: _e.mock.On("ListByProjectIDFiltered", ctx, projectID, filter)}
}

func (_c *MockFeaturesUseCase_ListByProjectIDFiltered_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter)) *MockFeaturesUseCase_ListByProjectIDFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 contract.FeaturesListFilter
		if args[2] != nil {
			arg2 = args[2].(contract.FeaturesListFilter)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_ListByProjectIDFiltered_Call) Return(features []domain.Feature, n int, err error) *MockFeaturesUseCase_ListByProjectIDFiltered_Call {
	_c.Call.Return(features, n, err)
	return _c
}

func (_c *MockFeaturesUseCase_ListByProjectIDFiltered_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter) ([]domain.Feature, int, error)) *MockFeaturesUseCase_ListByProjectIDFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// ListExtendedByProjectID provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) ListExtendedByProjectID(ctx context.Context, projectID domain.ProjectID) ([]domain.FeatureExtended, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListExtendedByProjectID")
	}

	var r0 []domain.FeatureExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.FeatureExtended, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureExtended)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_ListExtendedByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExtendedByProjectID'
type MockFeaturesUseCase_ListExtendedByProjectID_Call struct {
	*mock.Call
}

// ListExtendedByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockFeaturesUseCase_Expecter) ListExtendedByProjectID(ctx interface{}, projectID interface{}) *MockFeaturesUseCase_ListExtendedByProjectID_Call {
	return &MockFeaturesUseCase_ListExtendedByProjectID_Call{Call: _e.mock.On("ListExtendedByProjectID", ctx, projectID)}
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockFeaturesUseCase_ListExtendedByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectID_Call) Return(featureExtendeds []domain.FeatureExtended, err error) *MockFeaturesUseCase_ListExtendedByProjectID_Call {
	_c.Call.Return(featureExtendeds, err)
	return _c
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.FeatureExtended, error)) *MockFeaturesUseCase_ListExtendedByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// ListExtendedByProjectIDFiltered provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) ListExtendedByProjectIDFiltered(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter) ([]domain.FeatureExtended, int, error) {
	ret := _mock.Called(ctx, projectID, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListExtendedByProjectIDFiltered")
	}

	var r0 []domain.FeatureExtended
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) ([]domain.FeatureExtended, int, error)); ok {
		return returnFunc(ctx, projectID, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) []domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, projectID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureExtended)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) int); ok {
		r1 = returnFunc(ctx, projectID, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) error); ok {
		r2 = returnFunc(ctx, projectID, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExtendedByProjectIDFiltered'
type MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call struct {
	*mock.Call
}

// ListExtendedByProjectIDFiltered is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - filter contract.FeaturesListFilter
func (_e *MockFeaturesUseCase_Expecter) ListExtendedByProjectIDFiltered(ctx interface{}, projectID interface{}, filter interface{}) *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call {
	return &MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call{Call: _e.mock.On("ListExtendedByProjectIDFiltered", ctx, projectID, filter)}
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter)) *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 contract.FeaturesListFilter
		if args[2] != nil {
			arg2 = args[2].(contract.FeaturesListFilter)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call) Return(featureExtendeds []domain.FeatureExtended, n int, err error) *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call {
	_c.Call.Return(featureExtendeds, n, err)
	return _c
}

func (_c *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter) ([]domain.FeatureExtended, int, error)) *MockFeaturesUseCase_ListExtendedByProjectIDFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// Toggle provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) Toggle(ctx context.Context, id domain.FeatureID, enabled bool) (domain.Feature, error) {
	ret := _mock.Called(ctx, id, enabled)

	if len(ret) == 0 {
		panic("no return value specified for Toggle")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, bool) (domain.Feature, error)); ok {
		return returnFunc(ctx, id, enabled)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, bool) domain.Feature); ok {
		r0 = returnFunc(ctx, id, enabled)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, bool) error); ok {
		r1 = returnFunc(ctx, id, enabled)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_Toggle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Toggle'
type MockFeaturesUseCase_Toggle_Call struct {
	*mock.Call
}

// Toggle is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
//   - enabled bool
func (_e *MockFeaturesUseCase_Expecter) Toggle(ctx interface{}, id interface{}, enabled interface{}) *MockFeaturesUseCase_Toggle_Call {
	return &MockFeaturesUseCase_Toggle_Call{Call: _e.mock.On("Toggle", ctx, id, enabled)}
}

func (_c *MockFeaturesUseCase_Toggle_Call) Run(run func(ctx context.Context, id domain.FeatureID, enabled bool)) *MockFeaturesUseCase_Toggle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_Toggle_Call) Return(feature domain.Feature, err error) *MockFeaturesUseCase_Toggle_Call {
	_c.Call.Return(feature, err)
	return _c
}

func (_c *MockFeaturesUseCase_Toggle_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID, enabled bool) (domain.Feature, error)) *MockFeaturesUseCase_Toggle_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) Update(ctx context.Context, feature domain.Feature) (domain.Feature, error) {
	ret := _mock.Called(ctx, feature)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature) (domain.Feature, error)); ok {
		return returnFunc(ctx, feature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature) domain.Feature); ok {
		r0 = returnFunc(ctx, feature)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Feature) error); ok {
		r1 = returnFunc(ctx, feature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFeaturesUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - feature domain.Feature
func (_e *MockFeaturesUseCase_Expecter) Update(ctx interface{}, feature interface{}) *MockFeaturesUseCase_Update_Call {
	return &MockFeaturesUseCase_Update_Call{Call: _e.mock.On("Update", ctx, feature)}
}

func (_c *MockFeaturesUseCase_Update_Call) Run(run func(ctx context.Context, feature domain.Feature)) *MockFeaturesUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Feature
		if args[1] != nil {
			arg1 = args[1].(domain.Feature)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_Update_Call) Return(feature1 domain.Feature, err error) *MockFeaturesUseCase_Update_Call {
	_c.Call.Return(feature1, err)
	return _c
}

func (_c *MockFeaturesUseCase_Update_Call) RunAndReturn(run func(ctx context.Context, feature domain.Feature) (domain.Feature, error)) *MockFeaturesUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithChildren provides a mock function for the type MockFeaturesUseCase
func (_mock *MockFeaturesUseCase) UpdateWithChildren(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule) (domain.FeatureExtended, error) {
	ret := _mock.Called(ctx, feature, variants, rules)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithChildren")
	}

	var r0 domain.FeatureExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule) (domain.FeatureExtended, error)); ok {
		return returnFunc(ctx, feature, variants, rules)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule) domain.FeatureExtended); ok {
		r0 = returnFunc(ctx, feature, variants, rules)
	} else {
		r0 = ret.Get(0).(domain.FeatureExtended)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Feature, []domain.FlagVariant, []domain.Rule) error); ok {
		r1 = returnFunc(ctx, feature, variants, rules)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesUseCase_UpdateWithChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithChildren'
type MockFeaturesUseCase_UpdateWithChildren_Call struct {
	*mock.Call
}

// UpdateWithChildren is a helper method to define mock.On call
//   - ctx context.Context
//   - feature domain.Feature
//   - variants []domain.FlagVariant
//   - rules []domain.Rule
func (_e *MockFeaturesUseCase_Expecter) UpdateWithChildren(ctx interface{}, feature interface{}, variants interface{}, rules interface{}) *MockFeaturesUseCase_UpdateWithChildren_Call {
	return &MockFeaturesUseCase_UpdateWithChildren_Call{Call: _e.mock.On("UpdateWithChildren", ctx, feature, variants, rules)}
}

func (_c *MockFeaturesUseCase_UpdateWithChildren_Call) Run(run func(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule)) *MockFeaturesUseCase_UpdateWithChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Feature
		if args[1] != nil {
			arg1 = args[1].(domain.Feature)
		}
		var arg2 []domain.FlagVariant
		if args[2] != nil {
			arg2 = args[2].([]domain.FlagVariant)
		}
		var arg3 []domain.Rule
		if args[3] != nil {
			arg3 = args[3].([]domain.Rule)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeaturesUseCase_UpdateWithChildren_Call) Return(featureExtended domain.FeatureExtended, err error) *MockFeaturesUseCase_UpdateWithChildren_Call {
	_c.Call.Return(featureExtended, err)
	return _c
}

func (_c *MockFeaturesUseCase_UpdateWithChildren_Call) RunAndReturn(run func(ctx context.Context, feature domain.Feature, variants []domain.FlagVariant, rules []domain.Rule) (domain.FeatureExtended, error)) *MockFeaturesUseCase_UpdateWithChildren_Call {
	_c.Call.Return(run)
	return _c
}
