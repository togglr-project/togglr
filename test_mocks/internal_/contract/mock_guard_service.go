// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockGuardService creates a new instance of MockGuardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGuardService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGuardService {
	mock := &MockGuardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGuardService is an autogenerated mock type for the GuardService type
type MockGuardService struct {
	mock.Mock
}

type MockGuardService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGuardService) EXPECT() *MockGuardService_Expecter {
	return &MockGuardService_Expecter{mock: &_m.Mock}
}

// GetProjectActiveUserCount provides a mock function for the type MockGuardService
func (_mock *MockGuardService) GetProjectActiveUserCount(ctx context.Context, projectID domain.ProjectID) (int, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectActiveUserCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) (int, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) int); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGuardService_GetProjectActiveUserCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectActiveUserCount'
type MockGuardService_GetProjectActiveUserCount_Call struct {
	*mock.Call
}

// GetProjectActiveUserCount is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockGuardService_Expecter) GetProjectActiveUserCount(ctx interface{}, projectID interface{}) *MockGuardService_GetProjectActiveUserCount_Call {
	return &MockGuardService_GetProjectActiveUserCount_Call{Call: _e.mock.On("GetProjectActiveUserCount", ctx, projectID)}
}

func (_c *MockGuardService_GetProjectActiveUserCount_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockGuardService_GetProjectActiveUserCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGuardService_GetProjectActiveUserCount_Call) Return(n int, err error) *MockGuardService_GetProjectActiveUserCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockGuardService_GetProjectActiveUserCount_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) (int, error)) *MockGuardService_GetProjectActiveUserCount_Call {
	_c.Call.Return(run)
	return _c
}

// IsEntityGuarded provides a mock function for the type MockGuardService
func (_mock *MockGuardService) IsEntityGuarded(ctx context.Context, entities []domain.EntityChange) (bool, error) {
	ret := _mock.Called(ctx, entities)

	if len(ret) == 0 {
		panic("no return value specified for IsEntityGuarded")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.EntityChange) (bool, error)); ok {
		return returnFunc(ctx, entities)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.EntityChange) bool); ok {
		r0 = returnFunc(ctx, entities)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []domain.EntityChange) error); ok {
		r1 = returnFunc(ctx, entities)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGuardService_IsEntityGuarded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEntityGuarded'
type MockGuardService_IsEntityGuarded_Call struct {
	*mock.Call
}

// IsEntityGuarded is a helper method to define mock.On call
//   - ctx context.Context
//   - entities []domain.EntityChange
func (_e *MockGuardService_Expecter) IsEntityGuarded(ctx interface{}, entities interface{}) *MockGuardService_IsEntityGuarded_Call {
	return &MockGuardService_IsEntityGuarded_Call{Call: _e.mock.On("IsEntityGuarded", ctx, entities)}
}

func (_c *MockGuardService_IsEntityGuarded_Call) Run(run func(ctx context.Context, entities []domain.EntityChange)) *MockGuardService_IsEntityGuarded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.EntityChange
		if args[1] != nil {
			arg1 = args[1].([]domain.EntityChange)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGuardService_IsEntityGuarded_Call) Return(b bool, err error) *MockGuardService_IsEntityGuarded_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockGuardService_IsEntityGuarded_Call) RunAndReturn(run func(ctx context.Context, entities []domain.EntityChange) (bool, error)) *MockGuardService_IsEntityGuarded_Call {
	_c.Call.Return(run)
	return _c
}

// IsFeatureGuarded provides a mock function for the type MockGuardService
func (_mock *MockGuardService) IsFeatureGuarded(ctx context.Context, featureID domain.FeatureID) (bool, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for IsFeatureGuarded")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) (bool, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) bool); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGuardService_IsFeatureGuarded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFeatureGuarded'
type MockGuardService_IsFeatureGuarded_Call struct {
	*mock.Call
}

// IsFeatureGuarded is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockGuardService_Expecter) IsFeatureGuarded(ctx interface{}, featureID interface{}) *MockGuardService_IsFeatureGuarded_Call {
	return &MockGuardService_IsFeatureGuarded_Call{Call: _e.mock.On("IsFeatureGuarded", ctx, featureID)}
}

func (_c *MockGuardService_IsFeatureGuarded_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockGuardService_IsFeatureGuarded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGuardService_IsFeatureGuarded_Call) Return(b bool, err error) *MockGuardService_IsFeatureGuarded_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockGuardService_IsFeatureGuarded_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) (bool, error)) *MockGuardService_IsFeatureGuarded_Call {
	_c.Call.Return(run)
	return _c
}
