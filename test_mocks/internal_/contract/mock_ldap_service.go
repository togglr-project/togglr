// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggl/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLDAPService creates a new instance of MockLDAPService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLDAPService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLDAPService {
	mock := &MockLDAPService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLDAPService is an autogenerated mock type for the LDAPService type
type MockLDAPService struct {
	mock.Mock
}

type MockLDAPService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLDAPService) EXPECT() *MockLDAPService_Expecter {
	return &MockLDAPService_Expecter{mock: &_m.Mock}
}

// CancelSync provides a mock function for the type MockLDAPService
func (_mock *MockLDAPService) CancelSync(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CancelSync")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPService_CancelSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelSync'
type MockLDAPService_CancelSync_Call struct {
	*mock.Call
}

// CancelSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPService_Expecter) CancelSync(ctx interface{}) *MockLDAPService_CancelSync_Call {
	return &MockLDAPService_CancelSync_Call{Call: _e.mock.On("CancelSync", ctx)}
}

func (_c *MockLDAPService_CancelSync_Call) Run(run func(ctx context.Context)) *MockLDAPService_CancelSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPService_CancelSync_Call) Return(err error) *MockLDAPService_CancelSync_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPService_CancelSync_Call) RunAndReturn(run func(ctx context.Context) error) *MockLDAPService_CancelSync_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncProgress provides a mock function for the type MockLDAPService
func (_mock *MockLDAPService) GetSyncProgress() domain.LDAPSyncProgress {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSyncProgress")
	}

	var r0 domain.LDAPSyncProgress
	if returnFunc, ok := ret.Get(0).(func() domain.LDAPSyncProgress); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncProgress)
	}
	return r0
}

// MockLDAPService_GetSyncProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncProgress'
type MockLDAPService_GetSyncProgress_Call struct {
	*mock.Call
}

// GetSyncProgress is a helper method to define mock.On call
func (_e *MockLDAPService_Expecter) GetSyncProgress() *MockLDAPService_GetSyncProgress_Call {
	return &MockLDAPService_GetSyncProgress_Call{Call: _e.mock.On("GetSyncProgress")}
}

func (_c *MockLDAPService_GetSyncProgress_Call) Run(run func()) *MockLDAPService_GetSyncProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLDAPService_GetSyncProgress_Call) Return(lDAPSyncProgress domain.LDAPSyncProgress) *MockLDAPService_GetSyncProgress_Call {
	_c.Call.Return(lDAPSyncProgress)
	return _c
}

func (_c *MockLDAPService_GetSyncProgress_Call) RunAndReturn(run func() domain.LDAPSyncProgress) *MockLDAPService_GetSyncProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncStatus provides a mock function for the type MockLDAPService
func (_mock *MockLDAPService) GetSyncStatus() domain.LDAPSyncStatus {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSyncStatus")
	}

	var r0 domain.LDAPSyncStatus
	if returnFunc, ok := ret.Get(0).(func() domain.LDAPSyncStatus); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncStatus)
	}
	return r0
}

// MockLDAPService_GetSyncStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncStatus'
type MockLDAPService_GetSyncStatus_Call struct {
	*mock.Call
}

// GetSyncStatus is a helper method to define mock.On call
func (_e *MockLDAPService_Expecter) GetSyncStatus() *MockLDAPService_GetSyncStatus_Call {
	return &MockLDAPService_GetSyncStatus_Call{Call: _e.mock.On("GetSyncStatus")}
}

func (_c *MockLDAPService_GetSyncStatus_Call) Run(run func()) *MockLDAPService_GetSyncStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLDAPService_GetSyncStatus_Call) Return(lDAPSyncStatus domain.LDAPSyncStatus) *MockLDAPService_GetSyncStatus_Call {
	_c.Call.Return(lDAPSyncStatus)
	return _c
}

func (_c *MockLDAPService_GetSyncStatus_Call) RunAndReturn(run func() domain.LDAPSyncStatus) *MockLDAPService_GetSyncStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ReloadConfig provides a mock function for the type MockLDAPService
func (_mock *MockLDAPService) ReloadConfig(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReloadConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPService_ReloadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReloadConfig'
type MockLDAPService_ReloadConfig_Call struct {
	*mock.Call
}

// ReloadConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPService_Expecter) ReloadConfig(ctx interface{}) *MockLDAPService_ReloadConfig_Call {
	return &MockLDAPService_ReloadConfig_Call{Call: _e.mock.On("ReloadConfig", ctx)}
}

func (_c *MockLDAPService_ReloadConfig_Call) Run(run func(ctx context.Context)) *MockLDAPService_ReloadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPService_ReloadConfig_Call) Return(err error) *MockLDAPService_ReloadConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPService_ReloadConfig_Call) RunAndReturn(run func(ctx context.Context) error) *MockLDAPService_ReloadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// StartManualSync provides a mock function for the type MockLDAPService
func (_mock *MockLDAPService) StartManualSync(ctx context.Context, syncID string, stopped chan struct{}) error {
	ret := _mock.Called(ctx, syncID, stopped)

	if len(ret) == 0 {
		panic("no return value specified for StartManualSync")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, chan struct{}) error); ok {
		r0 = returnFunc(ctx, syncID, stopped)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPService_StartManualSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartManualSync'
type MockLDAPService_StartManualSync_Call struct {
	*mock.Call
}

// StartManualSync is a helper method to define mock.On call
//   - ctx context.Context
//   - syncID string
//   - stopped chan struct{}
func (_e *MockLDAPService_Expecter) StartManualSync(ctx interface{}, syncID interface{}, stopped interface{}) *MockLDAPService_StartManualSync_Call {
	return &MockLDAPService_StartManualSync_Call{Call: _e.mock.On("StartManualSync", ctx, syncID, stopped)}
}

func (_c *MockLDAPService_StartManualSync_Call) Run(run func(ctx context.Context, syncID string, stopped chan struct{})) *MockLDAPService_StartManualSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 chan struct{}
		if args[2] != nil {
			arg2 = args[2].(chan struct{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLDAPService_StartManualSync_Call) Return(err error) *MockLDAPService_StartManualSync_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPService_StartManualSync_Call) RunAndReturn(run func(ctx context.Context, syncID string, stopped chan struct{}) error) *MockLDAPService_StartManualSync_Call {
	_c.Call.Return(run)
	return _c
}

// SyncUsers provides a mock function for the type MockLDAPService
func (_mock *MockLDAPService) SyncUsers(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SyncUsers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPService_SyncUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncUsers'
type MockLDAPService_SyncUsers_Call struct {
	*mock.Call
}

// SyncUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPService_Expecter) SyncUsers(ctx interface{}) *MockLDAPService_SyncUsers_Call {
	return &MockLDAPService_SyncUsers_Call{Call: _e.mock.On("SyncUsers", ctx)}
}

func (_c *MockLDAPService_SyncUsers_Call) Run(run func(ctx context.Context)) *MockLDAPService_SyncUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPService_SyncUsers_Call) Return(err error) *MockLDAPService_SyncUsers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPService_SyncUsers_Call) RunAndReturn(run func(ctx context.Context) error) *MockLDAPService_SyncUsers_Call {
	_c.Call.Return(run)
	return _c
}

// TestConnection provides a mock function for the type MockLDAPService
func (_mock *MockLDAPService) TestConnection(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPService_TestConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestConnection'
type MockLDAPService_TestConnection_Call struct {
	*mock.Call
}

// TestConnection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPService_Expecter) TestConnection(ctx interface{}) *MockLDAPService_TestConnection_Call {
	return &MockLDAPService_TestConnection_Call{Call: _e.mock.On("TestConnection", ctx)}
}

func (_c *MockLDAPService_TestConnection_Call) Run(run func(ctx context.Context)) *MockLDAPService_TestConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPService_TestConnection_Call) Return(err error) *MockLDAPService_TestConnection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPService_TestConnection_Call) RunAndReturn(run func(ctx context.Context) error) *MockLDAPService_TestConnection_Call {
	_c.Call.Return(run)
	return _c
}
