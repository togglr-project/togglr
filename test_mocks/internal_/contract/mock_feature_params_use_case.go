// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureParamsUseCase creates a new instance of MockFeatureParamsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureParamsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureParamsUseCase {
	mock := &MockFeatureParamsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureParamsUseCase is an autogenerated mock type for the FeatureParamsUseCase type
type MockFeatureParamsUseCase struct {
	mock.Mock
}

type MockFeatureParamsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureParamsUseCase) EXPECT() *MockFeatureParamsUseCase_Expecter {
	return &MockFeatureParamsUseCase_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockFeatureParamsUseCase
func (_mock *MockFeatureParamsUseCase) Delete(ctx context.Context, projectID domain.ProjectID, featureID domain.FeatureID, envID domain.EnvironmentID) error {
	ret := _mock.Called(ctx, projectID, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.FeatureID, domain.EnvironmentID) error); ok {
		r0 = returnFunc(ctx, projectID, featureID, envID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureParamsUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFeatureParamsUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureParamsUseCase_Expecter) Delete(ctx interface{}, projectID interface{}, featureID interface{}, envID interface{}) *MockFeatureParamsUseCase_Delete_Call {
	return &MockFeatureParamsUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, featureID, envID)}
}

func (_c *MockFeatureParamsUseCase_Delete_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureParamsUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.FeatureID
		if args[2] != nil {
			arg2 = args[2].(domain.FeatureID)
		}
		var arg3 domain.EnvironmentID
		if args[3] != nil {
			arg3 = args[3].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeatureParamsUseCase_Delete_Call) Return(err error) *MockFeatureParamsUseCase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureParamsUseCase_Delete_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, featureID domain.FeatureID, envID domain.EnvironmentID) error) *MockFeatureParamsUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFeatureWithEnv provides a mock function for the type MockFeatureParamsUseCase
func (_mock *MockFeatureParamsUseCase) GetByFeatureWithEnv(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureParams, error) {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for GetByFeatureWithEnv")
	}

	var r0 domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) (domain.FeatureParams, error)); ok {
		return returnFunc(ctx, featureID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) domain.FeatureParams); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		r0 = ret.Get(0).(domain.FeatureParams)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, featureID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureParamsUseCase_GetByFeatureWithEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFeatureWithEnv'
type MockFeatureParamsUseCase_GetByFeatureWithEnv_Call struct {
	*mock.Call
}

// GetByFeatureWithEnv is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureParamsUseCase_Expecter) GetByFeatureWithEnv(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureParamsUseCase_GetByFeatureWithEnv_Call {
	return &MockFeatureParamsUseCase_GetByFeatureWithEnv_Call{Call: _e.mock.On("GetByFeatureWithEnv", ctx, featureID, envID)}
}

func (_c *MockFeatureParamsUseCase_GetByFeatureWithEnv_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureParamsUseCase_GetByFeatureWithEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureParamsUseCase_GetByFeatureWithEnv_Call) Return(featureParams domain.FeatureParams, err error) *MockFeatureParamsUseCase_GetByFeatureWithEnv_Call {
	_c.Call.Return(featureParams, err)
	return _c
}

func (_c *MockFeatureParamsUseCase_GetByFeatureWithEnv_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureParams, error)) *MockFeatureParamsUseCase_GetByFeatureWithEnv_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFeatureID provides a mock function for the type MockFeatureParamsUseCase
func (_mock *MockFeatureParamsUseCase) ListByFeatureID(ctx context.Context, featureID domain.FeatureID) ([]domain.FeatureParams, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFeatureID")
	}

	var r0 []domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) ([]domain.FeatureParams, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) []domain.FeatureParams); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureParams)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureParamsUseCase_ListByFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFeatureID'
type MockFeatureParamsUseCase_ListByFeatureID_Call struct {
	*mock.Call
}

// ListByFeatureID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockFeatureParamsUseCase_Expecter) ListByFeatureID(ctx interface{}, featureID interface{}) *MockFeatureParamsUseCase_ListByFeatureID_Call {
	return &MockFeatureParamsUseCase_ListByFeatureID_Call{Call: _e.mock.On("ListByFeatureID", ctx, featureID)}
}

func (_c *MockFeatureParamsUseCase_ListByFeatureID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockFeatureParamsUseCase_ListByFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureParamsUseCase_ListByFeatureID_Call) Return(featureParamss []domain.FeatureParams, err error) *MockFeatureParamsUseCase_ListByFeatureID_Call {
	_c.Call.Return(featureParamss, err)
	return _c
}

func (_c *MockFeatureParamsUseCase_ListByFeatureID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) ([]domain.FeatureParams, error)) *MockFeatureParamsUseCase_ListByFeatureID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFeatureParamsUseCase
func (_mock *MockFeatureParamsUseCase) Update(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams) (domain.FeatureParams, error) {
	ret := _mock.Called(ctx, projectID, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.FeatureParams) (domain.FeatureParams, error)); ok {
		return returnFunc(ctx, projectID, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.FeatureParams) domain.FeatureParams); ok {
		r0 = returnFunc(ctx, projectID, params)
	} else {
		r0 = ret.Get(0).(domain.FeatureParams)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.FeatureParams) error); ok {
		r1 = returnFunc(ctx, projectID, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureParamsUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFeatureParamsUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - params domain.FeatureParams
func (_e *MockFeatureParamsUseCase_Expecter) Update(ctx interface{}, projectID interface{}, params interface{}) *MockFeatureParamsUseCase_Update_Call {
	return &MockFeatureParamsUseCase_Update_Call{Call: _e.mock.On("Update", ctx, projectID, params)}
}

func (_c *MockFeatureParamsUseCase_Update_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams)) *MockFeatureParamsUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.FeatureParams
		if args[2] != nil {
			arg2 = args[2].(domain.FeatureParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureParamsUseCase_Update_Call) Return(featureParams domain.FeatureParams, err error) *MockFeatureParamsUseCase_Update_Call {
	_c.Call.Return(featureParams, err)
	return _c
}

func (_c *MockFeatureParamsUseCase_Update_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams) (domain.FeatureParams, error)) *MockFeatureParamsUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}
