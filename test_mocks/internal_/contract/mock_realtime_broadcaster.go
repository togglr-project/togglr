// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockRealtimeBroadcaster creates a new instance of MockRealtimeBroadcaster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRealtimeBroadcaster(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRealtimeBroadcaster {
	mock := &MockRealtimeBroadcaster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRealtimeBroadcaster is an autogenerated mock type for the RealtimeBroadcaster type
type MockRealtimeBroadcaster struct {
	mock.Mock
}

type MockRealtimeBroadcaster_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRealtimeBroadcaster) EXPECT() *MockRealtimeBroadcaster_Expecter {
	return &MockRealtimeBroadcaster_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockRealtimeBroadcaster
func (_mock *MockRealtimeBroadcaster) Add(projectID domain.ProjectID, envID int64, c contract.WSConnection) {
	_mock.Called(projectID, envID, c)
	return
}

// MockRealtimeBroadcaster_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockRealtimeBroadcaster_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - projectID domain.ProjectID
//   - envID int64
//   - c contract.WSConnection
func (_e *MockRealtimeBroadcaster_Expecter) Add(projectID interface{}, envID interface{}, c interface{}) *MockRealtimeBroadcaster_Add_Call {
	return &MockRealtimeBroadcaster_Add_Call{Call: _e.mock.On("Add", projectID, envID, c)}
}

func (_c *MockRealtimeBroadcaster_Add_Call) Run(run func(projectID domain.ProjectID, envID int64, c contract.WSConnection)) *MockRealtimeBroadcaster_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ProjectID
		if args[0] != nil {
			arg0 = args[0].(domain.ProjectID)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 contract.WSConnection
		if args[2] != nil {
			arg2 = args[2].(contract.WSConnection)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRealtimeBroadcaster_Add_Call) Return() *MockRealtimeBroadcaster_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRealtimeBroadcaster_Add_Call) RunAndReturn(run func(projectID domain.ProjectID, envID int64, c contract.WSConnection)) *MockRealtimeBroadcaster_Add_Call {
	_c.Run(run)
	return _c
}

// Remove provides a mock function for the type MockRealtimeBroadcaster
func (_mock *MockRealtimeBroadcaster) Remove(projectID domain.ProjectID, envID int64, c contract.WSConnection) {
	_mock.Called(projectID, envID, c)
	return
}

// MockRealtimeBroadcaster_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockRealtimeBroadcaster_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - projectID domain.ProjectID
//   - envID int64
//   - c contract.WSConnection
func (_e *MockRealtimeBroadcaster_Expecter) Remove(projectID interface{}, envID interface{}, c interface{}) *MockRealtimeBroadcaster_Remove_Call {
	return &MockRealtimeBroadcaster_Remove_Call{Call: _e.mock.On("Remove", projectID, envID, c)}
}

func (_c *MockRealtimeBroadcaster_Remove_Call) Run(run func(projectID domain.ProjectID, envID int64, c contract.WSConnection)) *MockRealtimeBroadcaster_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ProjectID
		if args[0] != nil {
			arg0 = args[0].(domain.ProjectID)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 contract.WSConnection
		if args[2] != nil {
			arg2 = args[2].(contract.WSConnection)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRealtimeBroadcaster_Remove_Call) Return() *MockRealtimeBroadcaster_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRealtimeBroadcaster_Remove_Call) RunAndReturn(run func(projectID domain.ProjectID, envID int64, c contract.WSConnection)) *MockRealtimeBroadcaster_Remove_Call {
	_c.Run(run)
	return _c
}
