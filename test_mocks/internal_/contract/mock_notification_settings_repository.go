// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockNotificationSettingsRepository creates a new instance of MockNotificationSettingsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationSettingsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationSettingsRepository {
	mock := &MockNotificationSettingsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationSettingsRepository is an autogenerated mock type for the NotificationSettingsRepository type
type MockNotificationSettingsRepository struct {
	mock.Mock
}

type MockNotificationSettingsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationSettingsRepository) EXPECT() *MockNotificationSettingsRepository_Expecter {
	return &MockNotificationSettingsRepository_Expecter{mock: &_m.Mock}
}

// CountSettings provides a mock function for the type MockNotificationSettingsRepository
func (_mock *MockNotificationSettingsRepository) CountSettings(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) (uint, error) {
	ret := _mock.Called(ctx, projectID, envID)

	if len(ret) == 0 {
		panic("no return value specified for CountSettings")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) (uint, error)); ok {
		return returnFunc(ctx, projectID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) uint); ok {
		r0 = returnFunc(ctx, projectID, envID)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, projectID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationSettingsRepository_CountSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSettings'
type MockNotificationSettingsRepository_CountSettings_Call struct {
	*mock.Call
}

// CountSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - envID domain.EnvironmentID
func (_e *MockNotificationSettingsRepository_Expecter) CountSettings(ctx interface{}, projectID interface{}, envID interface{}) *MockNotificationSettingsRepository_CountSettings_Call {
	return &MockNotificationSettingsRepository_CountSettings_Call{Call: _e.mock.On("CountSettings", ctx, projectID, envID)}
}

func (_c *MockNotificationSettingsRepository_CountSettings_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID)) *MockNotificationSettingsRepository_CountSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_CountSettings_Call) Return(v uint, err error) *MockNotificationSettingsRepository_CountSettings_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockNotificationSettingsRepository_CountSettings_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) (uint, error)) *MockNotificationSettingsRepository_CountSettings_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSetting provides a mock function for the type MockNotificationSettingsRepository
func (_mock *MockNotificationSettingsRepository) CreateSetting(ctx context.Context, settingDTO domain.NotificationSettingDTO) (domain.NotificationSetting, error) {
	ret := _mock.Called(ctx, settingDTO)

	if len(ret) == 0 {
		panic("no return value specified for CreateSetting")
	}

	var r0 domain.NotificationSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingDTO) (domain.NotificationSetting, error)); ok {
		return returnFunc(ctx, settingDTO)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingDTO) domain.NotificationSetting); ok {
		r0 = returnFunc(ctx, settingDTO)
	} else {
		r0 = ret.Get(0).(domain.NotificationSetting)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingDTO) error); ok {
		r1 = returnFunc(ctx, settingDTO)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationSettingsRepository_CreateSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSetting'
type MockNotificationSettingsRepository_CreateSetting_Call struct {
	*mock.Call
}

// CreateSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - settingDTO domain.NotificationSettingDTO
func (_e *MockNotificationSettingsRepository_Expecter) CreateSetting(ctx interface{}, settingDTO interface{}) *MockNotificationSettingsRepository_CreateSetting_Call {
	return &MockNotificationSettingsRepository_CreateSetting_Call{Call: _e.mock.On("CreateSetting", ctx, settingDTO)}
}

func (_c *MockNotificationSettingsRepository_CreateSetting_Call) Run(run func(ctx context.Context, settingDTO domain.NotificationSettingDTO)) *MockNotificationSettingsRepository_CreateSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.NotificationSettingDTO
		if args[1] != nil {
			arg1 = args[1].(domain.NotificationSettingDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_CreateSetting_Call) Return(notificationSetting domain.NotificationSetting, err error) *MockNotificationSettingsRepository_CreateSetting_Call {
	_c.Call.Return(notificationSetting, err)
	return _c
}

func (_c *MockNotificationSettingsRepository_CreateSetting_Call) RunAndReturn(run func(ctx context.Context, settingDTO domain.NotificationSettingDTO) (domain.NotificationSetting, error)) *MockNotificationSettingsRepository_CreateSetting_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSetting provides a mock function for the type MockNotificationSettingsRepository
func (_mock *MockNotificationSettingsRepository) DeleteSetting(ctx context.Context, id domain.NotificationSettingID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationSettingsRepository_DeleteSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSetting'
type MockNotificationSettingsRepository_DeleteSetting_Call struct {
	*mock.Call
}

// DeleteSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationSettingID
func (_e *MockNotificationSettingsRepository_Expecter) DeleteSetting(ctx interface{}, id interface{}) *MockNotificationSettingsRepository_DeleteSetting_Call {
	return &MockNotificationSettingsRepository_DeleteSetting_Call{Call: _e.mock.On("DeleteSetting", ctx, id)}
}

func (_c *MockNotificationSettingsRepository_DeleteSetting_Call) Run(run func(ctx context.Context, id domain.NotificationSettingID)) *MockNotificationSettingsRepository_DeleteSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.NotificationSettingID
		if args[1] != nil {
			arg1 = args[1].(domain.NotificationSettingID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_DeleteSetting_Call) Return(err error) *MockNotificationSettingsRepository_DeleteSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationSettingsRepository_DeleteSetting_Call) RunAndReturn(run func(ctx context.Context, id domain.NotificationSettingID) error) *MockNotificationSettingsRepository_DeleteSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettingByID provides a mock function for the type MockNotificationSettingsRepository
func (_mock *MockNotificationSettingsRepository) GetSettingByID(ctx context.Context, id domain.NotificationSettingID) (domain.NotificationSetting, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSettingByID")
	}

	var r0 domain.NotificationSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) (domain.NotificationSetting, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSettingID) domain.NotificationSetting); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.NotificationSetting)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.NotificationSettingID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationSettingsRepository_GetSettingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettingByID'
type MockNotificationSettingsRepository_GetSettingByID_Call struct {
	*mock.Call
}

// GetSettingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.NotificationSettingID
func (_e *MockNotificationSettingsRepository_Expecter) GetSettingByID(ctx interface{}, id interface{}) *MockNotificationSettingsRepository_GetSettingByID_Call {
	return &MockNotificationSettingsRepository_GetSettingByID_Call{Call: _e.mock.On("GetSettingByID", ctx, id)}
}

func (_c *MockNotificationSettingsRepository_GetSettingByID_Call) Run(run func(ctx context.Context, id domain.NotificationSettingID)) *MockNotificationSettingsRepository_GetSettingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.NotificationSettingID
		if args[1] != nil {
			arg1 = args[1].(domain.NotificationSettingID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_GetSettingByID_Call) Return(notificationSetting domain.NotificationSetting, err error) *MockNotificationSettingsRepository_GetSettingByID_Call {
	_c.Call.Return(notificationSetting, err)
	return _c
}

func (_c *MockNotificationSettingsRepository_GetSettingByID_Call) RunAndReturn(run func(ctx context.Context, id domain.NotificationSettingID) (domain.NotificationSetting, error)) *MockNotificationSettingsRepository_GetSettingByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListSettings provides a mock function for the type MockNotificationSettingsRepository
func (_mock *MockNotificationSettingsRepository) ListSettings(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) ([]domain.NotificationSetting, error) {
	ret := _mock.Called(ctx, projectID, envID)

	if len(ret) == 0 {
		panic("no return value specified for ListSettings")
	}

	var r0 []domain.NotificationSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) ([]domain.NotificationSetting, error)); ok {
		return returnFunc(ctx, projectID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) []domain.NotificationSetting); ok {
		r0 = returnFunc(ctx, projectID, envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, projectID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationSettingsRepository_ListSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSettings'
type MockNotificationSettingsRepository_ListSettings_Call struct {
	*mock.Call
}

// ListSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - envID domain.EnvironmentID
func (_e *MockNotificationSettingsRepository_Expecter) ListSettings(ctx interface{}, projectID interface{}, envID interface{}) *MockNotificationSettingsRepository_ListSettings_Call {
	return &MockNotificationSettingsRepository_ListSettings_Call{Call: _e.mock.On("ListSettings", ctx, projectID, envID)}
}

func (_c *MockNotificationSettingsRepository_ListSettings_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID)) *MockNotificationSettingsRepository_ListSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_ListSettings_Call) Return(notificationSettings []domain.NotificationSetting, err error) *MockNotificationSettingsRepository_ListSettings_Call {
	_c.Call.Return(notificationSettings, err)
	return _c
}

func (_c *MockNotificationSettingsRepository_ListSettings_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) ([]domain.NotificationSetting, error)) *MockNotificationSettingsRepository_ListSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ListSettingsAll provides a mock function for the type MockNotificationSettingsRepository
func (_mock *MockNotificationSettingsRepository) ListSettingsAll(ctx context.Context, projectID domain.ProjectID) ([]domain.NotificationSetting, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListSettingsAll")
	}

	var r0 []domain.NotificationSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.NotificationSetting, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.NotificationSetting); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NotificationSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationSettingsRepository_ListSettingsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSettingsAll'
type MockNotificationSettingsRepository_ListSettingsAll_Call struct {
	*mock.Call
}

// ListSettingsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockNotificationSettingsRepository_Expecter) ListSettingsAll(ctx interface{}, projectID interface{}) *MockNotificationSettingsRepository_ListSettingsAll_Call {
	return &MockNotificationSettingsRepository_ListSettingsAll_Call{Call: _e.mock.On("ListSettingsAll", ctx, projectID)}
}

func (_c *MockNotificationSettingsRepository_ListSettingsAll_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockNotificationSettingsRepository_ListSettingsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_ListSettingsAll_Call) Return(notificationSettings []domain.NotificationSetting, err error) *MockNotificationSettingsRepository_ListSettingsAll_Call {
	_c.Call.Return(notificationSettings, err)
	return _c
}

func (_c *MockNotificationSettingsRepository_ListSettingsAll_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.NotificationSetting, error)) *MockNotificationSettingsRepository_ListSettingsAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSetting provides a mock function for the type MockNotificationSettingsRepository
func (_mock *MockNotificationSettingsRepository) UpdateSetting(ctx context.Context, setting domain.NotificationSetting) error {
	ret := _mock.Called(ctx, setting)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.NotificationSetting) error); ok {
		r0 = returnFunc(ctx, setting)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationSettingsRepository_UpdateSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSetting'
type MockNotificationSettingsRepository_UpdateSetting_Call struct {
	*mock.Call
}

// UpdateSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - setting domain.NotificationSetting
func (_e *MockNotificationSettingsRepository_Expecter) UpdateSetting(ctx interface{}, setting interface{}) *MockNotificationSettingsRepository_UpdateSetting_Call {
	return &MockNotificationSettingsRepository_UpdateSetting_Call{Call: _e.mock.On("UpdateSetting", ctx, setting)}
}

func (_c *MockNotificationSettingsRepository_UpdateSetting_Call) Run(run func(ctx context.Context, setting domain.NotificationSetting)) *MockNotificationSettingsRepository_UpdateSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.NotificationSetting
		if args[1] != nil {
			arg1 = args[1].(domain.NotificationSetting)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationSettingsRepository_UpdateSetting_Call) Return(err error) *MockNotificationSettingsRepository_UpdateSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationSettingsRepository_UpdateSetting_Call) RunAndReturn(run func(ctx context.Context, setting domain.NotificationSetting) error) *MockNotificationSettingsRepository_UpdateSetting_Call {
	_c.Call.Return(run)
	return _c
}
