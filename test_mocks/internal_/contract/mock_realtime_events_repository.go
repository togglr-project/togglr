// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockRealtimeEventsRepository creates a new instance of MockRealtimeEventsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRealtimeEventsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRealtimeEventsRepository {
	mock := &MockRealtimeEventsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRealtimeEventsRepository is an autogenerated mock type for the RealtimeEventsRepository type
type MockRealtimeEventsRepository struct {
	mock.Mock
}

type MockRealtimeEventsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRealtimeEventsRepository) EXPECT() *MockRealtimeEventsRepository_Expecter {
	return &MockRealtimeEventsRepository_Expecter{mock: &_m.Mock}
}

// FetchAfter provides a mock function for the type MockRealtimeEventsRepository
func (_mock *MockRealtimeEventsRepository) FetchAfter(ctx context.Context, after time.Time) ([]domain.RealtimeEvent, error) {
	ret := _mock.Called(ctx, after)

	if len(ret) == 0 {
		panic("no return value specified for FetchAfter")
	}

	var r0 []domain.RealtimeEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) ([]domain.RealtimeEvent, error)); ok {
		return returnFunc(ctx, after)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) []domain.RealtimeEvent); ok {
		r0 = returnFunc(ctx, after)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RealtimeEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = returnFunc(ctx, after)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRealtimeEventsRepository_FetchAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAfter'
type MockRealtimeEventsRepository_FetchAfter_Call struct {
	*mock.Call
}

// FetchAfter is a helper method to define mock.On call
//   - ctx context.Context
//   - after time.Time
func (_e *MockRealtimeEventsRepository_Expecter) FetchAfter(ctx interface{}, after interface{}) *MockRealtimeEventsRepository_FetchAfter_Call {
	return &MockRealtimeEventsRepository_FetchAfter_Call{Call: _e.mock.On("FetchAfter", ctx, after)}
}

func (_c *MockRealtimeEventsRepository_FetchAfter_Call) Run(run func(ctx context.Context, after time.Time)) *MockRealtimeEventsRepository_FetchAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRealtimeEventsRepository_FetchAfter_Call) Return(realtimeEvents []domain.RealtimeEvent, err error) *MockRealtimeEventsRepository_FetchAfter_Call {
	_c.Call.Return(realtimeEvents, err)
	return _c
}

func (_c *MockRealtimeEventsRepository_FetchAfter_Call) RunAndReturn(run func(ctx context.Context, after time.Time) ([]domain.RealtimeEvent, error)) *MockRealtimeEventsRepository_FetchAfter_Call {
	_c.Call.Return(run)
	return _c
}
