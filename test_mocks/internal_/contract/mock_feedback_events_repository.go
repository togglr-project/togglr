// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeedbackEventsRepository creates a new instance of MockFeedbackEventsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeedbackEventsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeedbackEventsRepository {
	mock := &MockFeedbackEventsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeedbackEventsRepository is an autogenerated mock type for the FeedbackEventsRepository type
type MockFeedbackEventsRepository struct {
	mock.Mock
}

type MockFeedbackEventsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeedbackEventsRepository) EXPECT() *MockFeedbackEventsRepository_Expecter {
	return &MockFeedbackEventsRepository_Expecter{mock: &_m.Mock}
}

// AddEvent provides a mock function for the type MockFeedbackEventsRepository
func (_mock *MockFeedbackEventsRepository) AddEvent(ctx context.Context, event domain.FeedbackEventDTO) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for AddEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeedbackEventDTO) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeedbackEventsRepository_AddEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvent'
type MockFeedbackEventsRepository_AddEvent_Call struct {
	*mock.Call
}

// AddEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event domain.FeedbackEventDTO
func (_e *MockFeedbackEventsRepository_Expecter) AddEvent(ctx interface{}, event interface{}) *MockFeedbackEventsRepository_AddEvent_Call {
	return &MockFeedbackEventsRepository_AddEvent_Call{Call: _e.mock.On("AddEvent", ctx, event)}
}

func (_c *MockFeedbackEventsRepository_AddEvent_Call) Run(run func(ctx context.Context, event domain.FeedbackEventDTO)) *MockFeedbackEventsRepository_AddEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeedbackEventDTO
		if args[1] != nil {
			arg1 = args[1].(domain.FeedbackEventDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeedbackEventsRepository_AddEvent_Call) Return(err error) *MockFeedbackEventsRepository_AddEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeedbackEventsRepository_AddEvent_Call) RunAndReturn(run func(ctx context.Context, event domain.FeedbackEventDTO) error) *MockFeedbackEventsRepository_AddEvent_Call {
	_c.Call.Return(run)
	return _c
}

// AddEventsBatch provides a mock function for the type MockFeedbackEventsRepository
func (_mock *MockFeedbackEventsRepository) AddEventsBatch(ctx context.Context, events []domain.FeedbackEventDTO) error {
	ret := _mock.Called(ctx, events)

	if len(ret) == 0 {
		panic("no return value specified for AddEventsBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.FeedbackEventDTO) error); ok {
		r0 = returnFunc(ctx, events)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeedbackEventsRepository_AddEventsBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEventsBatch'
type MockFeedbackEventsRepository_AddEventsBatch_Call struct {
	*mock.Call
}

// AddEventsBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - events []domain.FeedbackEventDTO
func (_e *MockFeedbackEventsRepository_Expecter) AddEventsBatch(ctx interface{}, events interface{}) *MockFeedbackEventsRepository_AddEventsBatch_Call {
	return &MockFeedbackEventsRepository_AddEventsBatch_Call{Call: _e.mock.On("AddEventsBatch", ctx, events)}
}

func (_c *MockFeedbackEventsRepository_AddEventsBatch_Call) Run(run func(ctx context.Context, events []domain.FeedbackEventDTO)) *MockFeedbackEventsRepository_AddEventsBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.FeedbackEventDTO
		if args[1] != nil {
			arg1 = args[1].([]domain.FeedbackEventDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeedbackEventsRepository_AddEventsBatch_Call) Return(err error) *MockFeedbackEventsRepository_AddEventsBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeedbackEventsRepository_AddEventsBatch_Call) RunAndReturn(run func(ctx context.Context, events []domain.FeedbackEventDTO) error) *MockFeedbackEventsRepository_AddEventsBatch_Call {
	_c.Call.Return(run)
	return _c
}
