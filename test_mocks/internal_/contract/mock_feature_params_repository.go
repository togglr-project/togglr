// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureParamsRepository creates a new instance of MockFeatureParamsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureParamsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureParamsRepository {
	mock := &MockFeatureParamsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureParamsRepository is an autogenerated mock type for the FeatureParamsRepository type
type MockFeatureParamsRepository struct {
	mock.Mock
}

type MockFeatureParamsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureParamsRepository) EXPECT() *MockFeatureParamsRepository_Expecter {
	return &MockFeatureParamsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFeatureParamsRepository
func (_mock *MockFeatureParamsRepository) Create(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams) (domain.FeatureParams, error) {
	ret := _mock.Called(ctx, projectID, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.FeatureParams) (domain.FeatureParams, error)); ok {
		return returnFunc(ctx, projectID, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.FeatureParams) domain.FeatureParams); ok {
		r0 = returnFunc(ctx, projectID, params)
	} else {
		r0 = ret.Get(0).(domain.FeatureParams)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.FeatureParams) error); ok {
		r1 = returnFunc(ctx, projectID, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureParamsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFeatureParamsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - params domain.FeatureParams
func (_e *MockFeatureParamsRepository_Expecter) Create(ctx interface{}, projectID interface{}, params interface{}) *MockFeatureParamsRepository_Create_Call {
	return &MockFeatureParamsRepository_Create_Call{Call: _e.mock.On("Create", ctx, projectID, params)}
}

func (_c *MockFeatureParamsRepository_Create_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams)) *MockFeatureParamsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.FeatureParams
		if args[2] != nil {
			arg2 = args[2].(domain.FeatureParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureParamsRepository_Create_Call) Return(featureParams domain.FeatureParams, err error) *MockFeatureParamsRepository_Create_Call {
	_c.Call.Return(featureParams, err)
	return _c
}

func (_c *MockFeatureParamsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams) (domain.FeatureParams, error)) *MockFeatureParamsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockFeatureParamsRepository
func (_mock *MockFeatureParamsRepository) Delete(ctx context.Context, projectID domain.ProjectID, featureID domain.FeatureID, envID domain.EnvironmentID) error {
	ret := _mock.Called(ctx, projectID, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.FeatureID, domain.EnvironmentID) error); ok {
		r0 = returnFunc(ctx, projectID, featureID, envID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureParamsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFeatureParamsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureParamsRepository_Expecter) Delete(ctx interface{}, projectID interface{}, featureID interface{}, envID interface{}) *MockFeatureParamsRepository_Delete_Call {
	return &MockFeatureParamsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, featureID, envID)}
}

func (_c *MockFeatureParamsRepository_Delete_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureParamsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.FeatureID
		if args[2] != nil {
			arg2 = args[2].(domain.FeatureID)
		}
		var arg3 domain.EnvironmentID
		if args[3] != nil {
			arg3 = args[3].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeatureParamsRepository_Delete_Call) Return(err error) *MockFeatureParamsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureParamsRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, featureID domain.FeatureID, envID domain.EnvironmentID) error) *MockFeatureParamsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFeatureWithEnv provides a mock function for the type MockFeatureParamsRepository
func (_mock *MockFeatureParamsRepository) GetByFeatureWithEnv(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureParams, error) {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for GetByFeatureWithEnv")
	}

	var r0 domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) (domain.FeatureParams, error)); ok {
		return returnFunc(ctx, featureID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) domain.FeatureParams); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		r0 = ret.Get(0).(domain.FeatureParams)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, featureID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureParamsRepository_GetByFeatureWithEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFeatureWithEnv'
type MockFeatureParamsRepository_GetByFeatureWithEnv_Call struct {
	*mock.Call
}

// GetByFeatureWithEnv is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureParamsRepository_Expecter) GetByFeatureWithEnv(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureParamsRepository_GetByFeatureWithEnv_Call {
	return &MockFeatureParamsRepository_GetByFeatureWithEnv_Call{Call: _e.mock.On("GetByFeatureWithEnv", ctx, featureID, envID)}
}

func (_c *MockFeatureParamsRepository_GetByFeatureWithEnv_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureParamsRepository_GetByFeatureWithEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureParamsRepository_GetByFeatureWithEnv_Call) Return(featureParams domain.FeatureParams, err error) *MockFeatureParamsRepository_GetByFeatureWithEnv_Call {
	_c.Call.Return(featureParams, err)
	return _c
}

func (_c *MockFeatureParamsRepository_GetByFeatureWithEnv_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureParams, error)) *MockFeatureParamsRepository_GetByFeatureWithEnv_Call {
	_c.Call.Return(run)
	return _c
}

// GetForUpdate provides a mock function for the type MockFeatureParamsRepository
func (_mock *MockFeatureParamsRepository) GetForUpdate(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureParams, error) {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for GetForUpdate")
	}

	var r0 domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) (domain.FeatureParams, error)); ok {
		return returnFunc(ctx, featureID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) domain.FeatureParams); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		r0 = ret.Get(0).(domain.FeatureParams)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, featureID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureParamsRepository_GetForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForUpdate'
type MockFeatureParamsRepository_GetForUpdate_Call struct {
	*mock.Call
}

// GetForUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureParamsRepository_Expecter) GetForUpdate(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureParamsRepository_GetForUpdate_Call {
	return &MockFeatureParamsRepository_GetForUpdate_Call{Call: _e.mock.On("GetForUpdate", ctx, featureID, envID)}
}

func (_c *MockFeatureParamsRepository_GetForUpdate_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureParamsRepository_GetForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureParamsRepository_GetForUpdate_Call) Return(featureParams domain.FeatureParams, err error) *MockFeatureParamsRepository_GetForUpdate_Call {
	_c.Call.Return(featureParams, err)
	return _c
}

func (_c *MockFeatureParamsRepository_GetForUpdate_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureParams, error)) *MockFeatureParamsRepository_GetForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFeatureID provides a mock function for the type MockFeatureParamsRepository
func (_mock *MockFeatureParamsRepository) ListByFeatureID(ctx context.Context, featureID domain.FeatureID) ([]domain.FeatureParams, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFeatureID")
	}

	var r0 []domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) ([]domain.FeatureParams, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) []domain.FeatureParams); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureParams)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureParamsRepository_ListByFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFeatureID'
type MockFeatureParamsRepository_ListByFeatureID_Call struct {
	*mock.Call
}

// ListByFeatureID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockFeatureParamsRepository_Expecter) ListByFeatureID(ctx interface{}, featureID interface{}) *MockFeatureParamsRepository_ListByFeatureID_Call {
	return &MockFeatureParamsRepository_ListByFeatureID_Call{Call: _e.mock.On("ListByFeatureID", ctx, featureID)}
}

func (_c *MockFeatureParamsRepository_ListByFeatureID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockFeatureParamsRepository_ListByFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureParamsRepository_ListByFeatureID_Call) Return(featureParamss []domain.FeatureParams, err error) *MockFeatureParamsRepository_ListByFeatureID_Call {
	_c.Call.Return(featureParamss, err)
	return _c
}

func (_c *MockFeatureParamsRepository_ListByFeatureID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) ([]domain.FeatureParams, error)) *MockFeatureParamsRepository_ListByFeatureID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFeatureParamsRepository
func (_mock *MockFeatureParamsRepository) Update(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams) (domain.FeatureParams, error) {
	ret := _mock.Called(ctx, projectID, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.FeatureParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.FeatureParams) (domain.FeatureParams, error)); ok {
		return returnFunc(ctx, projectID, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.FeatureParams) domain.FeatureParams); ok {
		r0 = returnFunc(ctx, projectID, params)
	} else {
		r0 = ret.Get(0).(domain.FeatureParams)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.FeatureParams) error); ok {
		r1 = returnFunc(ctx, projectID, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureParamsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFeatureParamsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - params domain.FeatureParams
func (_e *MockFeatureParamsRepository_Expecter) Update(ctx interface{}, projectID interface{}, params interface{}) *MockFeatureParamsRepository_Update_Call {
	return &MockFeatureParamsRepository_Update_Call{Call: _e.mock.On("Update", ctx, projectID, params)}
}

func (_c *MockFeatureParamsRepository_Update_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams)) *MockFeatureParamsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.FeatureParams
		if args[2] != nil {
			arg2 = args[2].(domain.FeatureParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureParamsRepository_Update_Call) Return(featureParams domain.FeatureParams, err error) *MockFeatureParamsRepository_Update_Call {
	_c.Call.Return(featureParams, err)
	return _c
}

func (_c *MockFeatureParamsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, params domain.FeatureParams) (domain.FeatureParams, error)) *MockFeatureParamsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
