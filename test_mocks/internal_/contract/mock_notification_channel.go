// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"encoding/json"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockNotificationChannel creates a new instance of MockNotificationChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationChannel {
	mock := &MockNotificationChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationChannel is an autogenerated mock type for the NotificationChannel type
type MockNotificationChannel struct {
	mock.Mock
}

type MockNotificationChannel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationChannel) EXPECT() *MockNotificationChannel_Expecter {
	return &MockNotificationChannel_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockNotificationChannel
func (_mock *MockNotificationChannel) Send(ctx context.Context, project *domain.Project, feature *domain.Feature, config json.RawMessage) error {
	ret := _mock.Called(ctx, project, feature, config)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Project, *domain.Feature, json.RawMessage) error); ok {
		r0 = returnFunc(ctx, project, feature, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationChannel_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockNotificationChannel_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - project *domain.Project
//   - feature *domain.Feature
//   - config json.RawMessage
func (_e *MockNotificationChannel_Expecter) Send(ctx interface{}, project interface{}, feature interface{}, config interface{}) *MockNotificationChannel_Send_Call {
	return &MockNotificationChannel_Send_Call{Call: _e.mock.On("Send", ctx, project, feature, config)}
}

func (_c *MockNotificationChannel_Send_Call) Run(run func(ctx context.Context, project *domain.Project, feature *domain.Feature, config json.RawMessage)) *MockNotificationChannel_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Project
		if args[1] != nil {
			arg1 = args[1].(*domain.Project)
		}
		var arg2 *domain.Feature
		if args[2] != nil {
			arg2 = args[2].(*domain.Feature)
		}
		var arg3 json.RawMessage
		if args[3] != nil {
			arg3 = args[3].(json.RawMessage)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockNotificationChannel_Send_Call) Return(err error) *MockNotificationChannel_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationChannel_Send_Call) RunAndReturn(run func(ctx context.Context, project *domain.Project, feature *domain.Feature, config json.RawMessage) error) *MockNotificationChannel_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockNotificationChannel
func (_mock *MockNotificationChannel) Type() domain.NotificationType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 domain.NotificationType
	if returnFunc, ok := ret.Get(0).(func() domain.NotificationType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.NotificationType)
	}
	return r0
}

// MockNotificationChannel_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockNotificationChannel_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockNotificationChannel_Expecter) Type() *MockNotificationChannel_Type_Call {
	return &MockNotificationChannel_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockNotificationChannel_Type_Call) Run(run func()) *MockNotificationChannel_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotificationChannel_Type_Call) Return(notificationType domain.NotificationType) *MockNotificationChannel_Type_Call {
	_c.Call.Return(notificationType)
	return _c
}

func (_c *MockNotificationChannel_Type_Call) RunAndReturn(run func() domain.NotificationType) *MockNotificationChannel_Type_Call {
	_c.Call.Return(run)
	return _c
}
