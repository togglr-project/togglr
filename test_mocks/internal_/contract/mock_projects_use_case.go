// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectsUseCase creates a new instance of MockProjectsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectsUseCase {
	mock := &MockProjectsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectsUseCase is an autogenerated mock type for the ProjectsUseCase type
type MockProjectsUseCase struct {
	mock.Mock
}

type MockProjectsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectsUseCase) EXPECT() *MockProjectsUseCase_Expecter {
	return &MockProjectsUseCase_Expecter{mock: &_m.Mock}
}

// ArchiveProject provides a mock function for the type MockProjectsUseCase
func (_mock *MockProjectsUseCase) ArchiveProject(ctx context.Context, id domain.ProjectID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectsUseCase_ArchiveProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveProject'
type MockProjectsUseCase_ArchiveProject_Call struct {
	*mock.Call
}

// ArchiveProject is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
func (_e *MockProjectsUseCase_Expecter) ArchiveProject(ctx interface{}, id interface{}) *MockProjectsUseCase_ArchiveProject_Call {
	return &MockProjectsUseCase_ArchiveProject_Call{Call: _e.mock.On("ArchiveProject", ctx, id)}
}

func (_c *MockProjectsUseCase_ArchiveProject_Call) Run(run func(ctx context.Context, id domain.ProjectID)) *MockProjectsUseCase_ArchiveProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectsUseCase_ArchiveProject_Call) Return(err error) *MockProjectsUseCase_ArchiveProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectsUseCase_ArchiveProject_Call) RunAndReturn(run func(ctx context.Context, id domain.ProjectID) error) *MockProjectsUseCase_ArchiveProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function for the type MockProjectsUseCase
func (_mock *MockProjectsUseCase) CreateProject(ctx context.Context, name string, description string) (domain.Project, error) {
	ret := _mock.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.Project, error)); ok {
		return returnFunc(ctx, name, description)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.Project); ok {
		r0 = returnFunc(ctx, name, description)
	} else {
		r0 = ret.Get(0).(domain.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsUseCase_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockProjectsUseCase_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
func (_e *MockProjectsUseCase_Expecter) CreateProject(ctx interface{}, name interface{}, description interface{}) *MockProjectsUseCase_CreateProject_Call {
	return &MockProjectsUseCase_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, name, description)}
}

func (_c *MockProjectsUseCase_CreateProject_Call) Run(run func(ctx context.Context, name string, description string)) *MockProjectsUseCase_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProjectsUseCase_CreateProject_Call) Return(project domain.Project, err error) *MockProjectsUseCase_CreateProject_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectsUseCase_CreateProject_Call) RunAndReturn(run func(ctx context.Context, name string, description string) (domain.Project, error)) *MockProjectsUseCase_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function for the type MockProjectsUseCase
func (_mock *MockProjectsUseCase) GetProject(ctx context.Context, id domain.ProjectID) (domain.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) (domain.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) domain.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsUseCase_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockProjectsUseCase_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
func (_e *MockProjectsUseCase_Expecter) GetProject(ctx interface{}, id interface{}) *MockProjectsUseCase_GetProject_Call {
	return &MockProjectsUseCase_GetProject_Call{Call: _e.mock.On("GetProject", ctx, id)}
}

func (_c *MockProjectsUseCase_GetProject_Call) Run(run func(ctx context.Context, id domain.ProjectID)) *MockProjectsUseCase_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectsUseCase_GetProject_Call) Return(project domain.Project, err error) *MockProjectsUseCase_GetProject_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectsUseCase_GetProject_Call) RunAndReturn(run func(ctx context.Context, id domain.ProjectID) (domain.Project, error)) *MockProjectsUseCase_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockProjectsUseCase
func (_mock *MockProjectsUseCase) List(ctx context.Context) ([]domain.Project, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Project, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Project); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProjectsUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectsUseCase_Expecter) List(ctx interface{}) *MockProjectsUseCase_List_Call {
	return &MockProjectsUseCase_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockProjectsUseCase_List_Call) Run(run func(ctx context.Context)) *MockProjectsUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectsUseCase_List_Call) Return(projects []domain.Project, err error) *MockProjectsUseCase_List_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *MockProjectsUseCase_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Project, error)) *MockProjectsUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListChanges provides a mock function for the type MockProjectsUseCase
func (_mock *MockProjectsUseCase) ListChanges(ctx context.Context, filter domain.ChangesListFilter) (domain.ChangesListResult, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListChanges")
	}

	var r0 domain.ChangesListResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ChangesListFilter) (domain.ChangesListResult, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ChangesListFilter) domain.ChangesListResult); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		r0 = ret.Get(0).(domain.ChangesListResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ChangesListFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsUseCase_ListChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChanges'
type MockProjectsUseCase_ListChanges_Call struct {
	*mock.Call
}

// ListChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.ChangesListFilter
func (_e *MockProjectsUseCase_Expecter) ListChanges(ctx interface{}, filter interface{}) *MockProjectsUseCase_ListChanges_Call {
	return &MockProjectsUseCase_ListChanges_Call{Call: _e.mock.On("ListChanges", ctx, filter)}
}

func (_c *MockProjectsUseCase_ListChanges_Call) Run(run func(ctx context.Context, filter domain.ChangesListFilter)) *MockProjectsUseCase_ListChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ChangesListFilter
		if args[1] != nil {
			arg1 = args[1].(domain.ChangesListFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectsUseCase_ListChanges_Call) Return(changesListResult domain.ChangesListResult, err error) *MockProjectsUseCase_ListChanges_Call {
	_c.Call.Return(changesListResult, err)
	return _c
}

func (_c *MockProjectsUseCase_ListChanges_Call) RunAndReturn(run func(ctx context.Context, filter domain.ChangesListFilter) (domain.ChangesListResult, error)) *MockProjectsUseCase_ListChanges_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInfo provides a mock function for the type MockProjectsUseCase
func (_mock *MockProjectsUseCase) UpdateInfo(ctx context.Context, id domain.ProjectID, name string, description string) (domain.Project, error) {
	ret := _mock.Called(ctx, id, name, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInfo")
	}

	var r0 domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) (domain.Project, error)); ok {
		return returnFunc(ctx, id, name, description)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) domain.Project); ok {
		r0 = returnFunc(ctx, id, name, description)
	} else {
		r0 = ret.Get(0).(domain.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, string) error); ok {
		r1 = returnFunc(ctx, id, name, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsUseCase_UpdateInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInfo'
type MockProjectsUseCase_UpdateInfo_Call struct {
	*mock.Call
}

// UpdateInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
//   - name string
//   - description string
func (_e *MockProjectsUseCase_Expecter) UpdateInfo(ctx interface{}, id interface{}, name interface{}, description interface{}) *MockProjectsUseCase_UpdateInfo_Call {
	return &MockProjectsUseCase_UpdateInfo_Call{Call: _e.mock.On("UpdateInfo", ctx, id, name, description)}
}

func (_c *MockProjectsUseCase_UpdateInfo_Call) Run(run func(ctx context.Context, id domain.ProjectID, name string, description string)) *MockProjectsUseCase_UpdateInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockProjectsUseCase_UpdateInfo_Call) Return(project domain.Project, err error) *MockProjectsUseCase_UpdateInfo_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectsUseCase_UpdateInfo_Call) RunAndReturn(run func(ctx context.Context, id domain.ProjectID, name string, description string) (domain.Project, error)) *MockProjectsUseCase_UpdateInfo_Call {
	_c.Call.Return(run)
	return _c
}
