// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPermissionsRepository creates a new instance of MockPermissionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionsRepository {
	mock := &MockPermissionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPermissionsRepository is an autogenerated mock type for the PermissionsRepository type
type MockPermissionsRepository struct {
	mock.Mock
}

type MockPermissionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionsRepository) EXPECT() *MockPermissionsRepository_Expecter {
	return &MockPermissionsRepository_Expecter{mock: &_m.Mock}
}

// RoleHasPermission provides a mock function for the type MockPermissionsRepository
func (_mock *MockPermissionsRepository) RoleHasPermission(ctx context.Context, roleID string, key domain.PermKey) (bool, error) {
	ret := _mock.Called(ctx, roleID, key)

	if len(ret) == 0 {
		panic("no return value specified for RoleHasPermission")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.PermKey) (bool, error)); ok {
		return returnFunc(ctx, roleID, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.PermKey) bool); ok {
		r0 = returnFunc(ctx, roleID, key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, domain.PermKey) error); ok {
		r1 = returnFunc(ctx, roleID, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPermissionsRepository_RoleHasPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleHasPermission'
type MockPermissionsRepository_RoleHasPermission_Call struct {
	*mock.Call
}

// RoleHasPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
//   - key domain.PermKey
func (_e *MockPermissionsRepository_Expecter) RoleHasPermission(ctx interface{}, roleID interface{}, key interface{}) *MockPermissionsRepository_RoleHasPermission_Call {
	return &MockPermissionsRepository_RoleHasPermission_Call{Call: _e.mock.On("RoleHasPermission", ctx, roleID, key)}
}

func (_c *MockPermissionsRepository_RoleHasPermission_Call) Run(run func(ctx context.Context, roleID string, key domain.PermKey)) *MockPermissionsRepository_RoleHasPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.PermKey
		if args[2] != nil {
			arg2 = args[2].(domain.PermKey)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPermissionsRepository_RoleHasPermission_Call) Return(b bool, err error) *MockPermissionsRepository_RoleHasPermission_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockPermissionsRepository_RoleHasPermission_Call) RunAndReturn(run func(ctx context.Context, roleID string, key domain.PermKey) (bool, error)) *MockPermissionsRepository_RoleHasPermission_Call {
	_c.Call.Return(run)
	return _c
}
