// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"time"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFeatureProcessor creates a new instance of MockFeatureProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureProcessor {
	mock := &MockFeatureProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureProcessor is an autogenerated mock type for the FeatureProcessor type
type MockFeatureProcessor struct {
	mock.Mock
}

type MockFeatureProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureProcessor) EXPECT() *MockFeatureProcessor_Expecter {
	return &MockFeatureProcessor_Expecter{mock: &_m.Mock}
}

// BuildFeatureTimeline provides a mock function for the type MockFeatureProcessor
func (_mock *MockFeatureProcessor) BuildFeatureTimeline(feature domain.FeatureExtended, from time.Time, to time.Time) ([]domain.TimelineEvent, error) {
	ret := _mock.Called(feature, from, to)

	if len(ret) == 0 {
		panic("no return value specified for BuildFeatureTimeline")
	}

	var r0 []domain.TimelineEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.FeatureExtended, time.Time, time.Time) ([]domain.TimelineEvent, error)); ok {
		return returnFunc(feature, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.FeatureExtended, time.Time, time.Time) []domain.TimelineEvent); ok {
		r0 = returnFunc(feature, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TimelineEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(domain.FeatureExtended, time.Time, time.Time) error); ok {
		r1 = returnFunc(feature, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureProcessor_BuildFeatureTimeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildFeatureTimeline'
type MockFeatureProcessor_BuildFeatureTimeline_Call struct {
	*mock.Call
}

// BuildFeatureTimeline is a helper method to define mock.On call
//   - feature domain.FeatureExtended
//   - from time.Time
//   - to time.Time
func (_e *MockFeatureProcessor_Expecter) BuildFeatureTimeline(feature interface{}, from interface{}, to interface{}) *MockFeatureProcessor_BuildFeatureTimeline_Call {
	return &MockFeatureProcessor_BuildFeatureTimeline_Call{Call: _e.mock.On("BuildFeatureTimeline", feature, from, to)}
}

func (_c *MockFeatureProcessor_BuildFeatureTimeline_Call) Run(run func(feature domain.FeatureExtended, from time.Time, to time.Time)) *MockFeatureProcessor_BuildFeatureTimeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.FeatureExtended
		if args[0] != nil {
			arg0 = args[0].(domain.FeatureExtended)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureProcessor_BuildFeatureTimeline_Call) Return(timelineEvents []domain.TimelineEvent, err error) *MockFeatureProcessor_BuildFeatureTimeline_Call {
	_c.Call.Return(timelineEvents, err)
	return _c
}

func (_c *MockFeatureProcessor_BuildFeatureTimeline_Call) RunAndReturn(run func(feature domain.FeatureExtended, from time.Time, to time.Time) ([]domain.TimelineEvent, error)) *MockFeatureProcessor_BuildFeatureTimeline_Call {
	_c.Call.Return(run)
	return _c
}

// Evaluate provides a mock function for the type MockFeatureProcessor
func (_mock *MockFeatureProcessor) Evaluate(projectID domain.ProjectID, featureKey string, reqCtx map[domain.RuleAttribute]any) (string, bool, bool) {
	ret := _mock.Called(projectID, featureKey, reqCtx)

	if len(ret) == 0 {
		panic("no return value specified for Evaluate")
	}

	var r0 string
	var r1 bool
	var r2 bool
	if returnFunc, ok := ret.Get(0).(func(domain.ProjectID, string, map[domain.RuleAttribute]any) (string, bool, bool)); ok {
		return returnFunc(projectID, featureKey, reqCtx)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.ProjectID, string, map[domain.RuleAttribute]any) string); ok {
		r0 = returnFunc(projectID, featureKey, reqCtx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.ProjectID, string, map[domain.RuleAttribute]any) bool); ok {
		r1 = returnFunc(projectID, featureKey, reqCtx)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(domain.ProjectID, string, map[domain.RuleAttribute]any) bool); ok {
		r2 = returnFunc(projectID, featureKey, reqCtx)
	} else {
		r2 = ret.Get(2).(bool)
	}
	return r0, r1, r2
}

// MockFeatureProcessor_Evaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evaluate'
type MockFeatureProcessor_Evaluate_Call struct {
	*mock.Call
}

// Evaluate is a helper method to define mock.On call
//   - projectID domain.ProjectID
//   - featureKey string
//   - reqCtx map[domain.RuleAttribute]any
func (_e *MockFeatureProcessor_Expecter) Evaluate(projectID interface{}, featureKey interface{}, reqCtx interface{}) *MockFeatureProcessor_Evaluate_Call {
	return &MockFeatureProcessor_Evaluate_Call{Call: _e.mock.On("Evaluate", projectID, featureKey, reqCtx)}
}

func (_c *MockFeatureProcessor_Evaluate_Call) Run(run func(projectID domain.ProjectID, featureKey string, reqCtx map[domain.RuleAttribute]any)) *MockFeatureProcessor_Evaluate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ProjectID
		if args[0] != nil {
			arg0 = args[0].(domain.ProjectID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[domain.RuleAttribute]any
		if args[2] != nil {
			arg2 = args[2].(map[domain.RuleAttribute]any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureProcessor_Evaluate_Call) Return(value string, enabled bool, found bool) *MockFeatureProcessor_Evaluate_Call {
	_c.Call.Return(value, enabled, found)
	return _c
}

func (_c *MockFeatureProcessor_Evaluate_Call) RunAndReturn(run func(projectID domain.ProjectID, featureKey string, reqCtx map[domain.RuleAttribute]any) (string, bool, bool)) *MockFeatureProcessor_Evaluate_Call {
	_c.Call.Return(run)
	return _c
}

// IsFeatureActive provides a mock function for the type MockFeatureProcessor
func (_mock *MockFeatureProcessor) IsFeatureActive(feature domain.FeatureExtended) bool {
	ret := _mock.Called(feature)

	if len(ret) == 0 {
		panic("no return value specified for IsFeatureActive")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(domain.FeatureExtended) bool); ok {
		r0 = returnFunc(feature)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFeatureProcessor_IsFeatureActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFeatureActive'
type MockFeatureProcessor_IsFeatureActive_Call struct {
	*mock.Call
}

// IsFeatureActive is a helper method to define mock.On call
//   - feature domain.FeatureExtended
func (_e *MockFeatureProcessor_Expecter) IsFeatureActive(feature interface{}) *MockFeatureProcessor_IsFeatureActive_Call {
	return &MockFeatureProcessor_IsFeatureActive_Call{Call: _e.mock.On("IsFeatureActive", feature)}
}

func (_c *MockFeatureProcessor_IsFeatureActive_Call) Run(run func(feature domain.FeatureExtended)) *MockFeatureProcessor_IsFeatureActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.FeatureExtended
		if args[0] != nil {
			arg0 = args[0].(domain.FeatureExtended)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeatureProcessor_IsFeatureActive_Call) Return(b bool) *MockFeatureProcessor_IsFeatureActive_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFeatureProcessor_IsFeatureActive_Call) RunAndReturn(run func(feature domain.FeatureExtended) bool) *MockFeatureProcessor_IsFeatureActive_Call {
	_c.Call.Return(run)
	return _c
}

// NextState provides a mock function for the type MockFeatureProcessor
func (_mock *MockFeatureProcessor) NextState(feature domain.FeatureExtended) (bool, time.Time) {
	ret := _mock.Called(feature)

	if len(ret) == 0 {
		panic("no return value specified for NextState")
	}

	var r0 bool
	var r1 time.Time
	if returnFunc, ok := ret.Get(0).(func(domain.FeatureExtended) (bool, time.Time)); ok {
		return returnFunc(feature)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.FeatureExtended) bool); ok {
		r0 = returnFunc(feature)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.FeatureExtended) time.Time); ok {
		r1 = returnFunc(feature)
	} else {
		r1 = ret.Get(1).(time.Time)
	}
	return r0, r1
}

// MockFeatureProcessor_NextState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextState'
type MockFeatureProcessor_NextState_Call struct {
	*mock.Call
}

// NextState is a helper method to define mock.On call
//   - feature domain.FeatureExtended
func (_e *MockFeatureProcessor_Expecter) NextState(feature interface{}) *MockFeatureProcessor_NextState_Call {
	return &MockFeatureProcessor_NextState_Call{Call: _e.mock.On("NextState", feature)}
}

func (_c *MockFeatureProcessor_NextState_Call) Run(run func(feature domain.FeatureExtended)) *MockFeatureProcessor_NextState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.FeatureExtended
		if args[0] != nil {
			arg0 = args[0].(domain.FeatureExtended)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeatureProcessor_NextState_Call) Return(enabled bool, timestamp time.Time) *MockFeatureProcessor_NextState_Call {
	_c.Call.Return(enabled, timestamp)
	return _c
}

func (_c *MockFeatureProcessor_NextState_Call) RunAndReturn(run func(feature domain.FeatureExtended) (bool, time.Time)) *MockFeatureProcessor_NextState_Call {
	_c.Call.Return(run)
	return _c
}
