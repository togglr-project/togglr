// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockWSConnection creates a new instance of MockWSConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWSConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWSConnection {
	mock := &MockWSConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWSConnection is an autogenerated mock type for the WSConnection type
type MockWSConnection struct {
	mock.Mock
}

type MockWSConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWSConnection) EXPECT() *MockWSConnection_Expecter {
	return &MockWSConnection_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockWSConnection
func (_mock *MockWSConnection) Close() {
	_mock.Called()
	return
}

// MockWSConnection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWSConnection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWSConnection_Expecter) Close() *MockWSConnection_Close_Call {
	return &MockWSConnection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWSConnection_Close_Call) Run(run func()) *MockWSConnection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWSConnection_Close_Call) Return() *MockWSConnection_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWSConnection_Close_Call) RunAndReturn(run func()) *MockWSConnection_Close_Call {
	_c.Run(run)
	return _c
}

// Send provides a mock function for the type MockWSConnection
func (_mock *MockWSConnection) Send(msg []byte) bool {
	ret := _mock.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = returnFunc(msg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockWSConnection_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockWSConnection_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - msg []byte
func (_e *MockWSConnection_Expecter) Send(msg interface{}) *MockWSConnection_Send_Call {
	return &MockWSConnection_Send_Call{Call: _e.mock.On("Send", msg)}
}

func (_c *MockWSConnection_Send_Call) Run(run func(msg []byte)) *MockWSConnection_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWSConnection_Send_Call) Return(b bool) *MockWSConnection_Send_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockWSConnection_Send_Call) RunAndReturn(run func(msg []byte) bool) *MockWSConnection_Send_Call {
	_c.Call.Return(run)
	return _c
}
