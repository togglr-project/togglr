// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockSSOProvider creates a new instance of MockSSOProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSOProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSOProvider {
	mock := &MockSSOProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSSOProvider is an autogenerated mock type for the SSOProvider type
type MockSSOProvider struct {
	mock.Mock
}

type MockSSOProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSSOProvider) EXPECT() *MockSSOProvider_Expecter {
	return &MockSSOProvider_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockSSOProvider
func (_mock *MockSSOProvider) Authenticate(ctx context.Context, req *http.Request, response string, state string) (*domain.User, error) {
	ret := _mock.Called(ctx, req, response, state)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *http.Request, string, string) (*domain.User, error)); ok {
		return returnFunc(ctx, req, response, state)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *http.Request, string, string) *domain.User); ok {
		r0 = returnFunc(ctx, req, response, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *http.Request, string, string) error); ok {
		r1 = returnFunc(ctx, req, response, state)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSSOProvider_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockSSOProvider_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - req *http.Request
//   - response string
//   - state string
func (_e *MockSSOProvider_Expecter) Authenticate(ctx interface{}, req interface{}, response interface{}, state interface{}) *MockSSOProvider_Authenticate_Call {
	return &MockSSOProvider_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, req, response, state)}
}

func (_c *MockSSOProvider_Authenticate_Call) Run(run func(ctx context.Context, req *http.Request, response string, state string)) *MockSSOProvider_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSSOProvider_Authenticate_Call) Return(user *domain.User, err error) *MockSSOProvider_Authenticate_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockSSOProvider_Authenticate_Call) RunAndReturn(run func(ctx context.Context, req *http.Request, response string, state string) (*domain.User, error)) *MockSSOProvider_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateAuthURL provides a mock function for the type MockSSOProvider
func (_mock *MockSSOProvider) GenerateAuthURL(state string) (string, error) {
	ret := _mock.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAuthURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(state)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(state)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(state)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSSOProvider_GenerateAuthURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAuthURL'
type MockSSOProvider_GenerateAuthURL_Call struct {
	*mock.Call
}

// GenerateAuthURL is a helper method to define mock.On call
//   - state string
func (_e *MockSSOProvider_Expecter) GenerateAuthURL(state interface{}) *MockSSOProvider_GenerateAuthURL_Call {
	return &MockSSOProvider_GenerateAuthURL_Call{Call: _e.mock.On("GenerateAuthURL", state)}
}

func (_c *MockSSOProvider_GenerateAuthURL_Call) Run(run func(state string)) *MockSSOProvider_GenerateAuthURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSSOProvider_GenerateAuthURL_Call) Return(s string, err error) *MockSSOProvider_GenerateAuthURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSSOProvider_GenerateAuthURL_Call) RunAndReturn(run func(state string) (string, error)) *MockSSOProvider_GenerateAuthURL_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateSPMetadata provides a mock function for the type MockSSOProvider
func (_mock *MockSSOProvider) GenerateSPMetadata() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateSPMetadata")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSSOProvider_GenerateSPMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSPMetadata'
type MockSSOProvider_GenerateSPMetadata_Call struct {
	*mock.Call
}

// GenerateSPMetadata is a helper method to define mock.On call
func (_e *MockSSOProvider_Expecter) GenerateSPMetadata() *MockSSOProvider_GenerateSPMetadata_Call {
	return &MockSSOProvider_GenerateSPMetadata_Call{Call: _e.mock.On("GenerateSPMetadata")}
}

func (_c *MockSSOProvider_GenerateSPMetadata_Call) Run(run func()) *MockSSOProvider_GenerateSPMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSOProvider_GenerateSPMetadata_Call) Return(bytes []byte, err error) *MockSSOProvider_GenerateSPMetadata_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockSSOProvider_GenerateSPMetadata_Call) RunAndReturn(run func() ([]byte, error)) *MockSSOProvider_GenerateSPMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplayName provides a mock function for the type MockSSOProvider
func (_mock *MockSSOProvider) GetDisplayName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSSOProvider_GetDisplayName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayName'
type MockSSOProvider_GetDisplayName_Call struct {
	*mock.Call
}

// GetDisplayName is a helper method to define mock.On call
func (_e *MockSSOProvider_Expecter) GetDisplayName() *MockSSOProvider_GetDisplayName_Call {
	return &MockSSOProvider_GetDisplayName_Call{Call: _e.mock.On("GetDisplayName")}
}

func (_c *MockSSOProvider_GetDisplayName_Call) Run(run func()) *MockSSOProvider_GetDisplayName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSOProvider_GetDisplayName_Call) Return(s string) *MockSSOProvider_GetDisplayName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSSOProvider_GetDisplayName_Call) RunAndReturn(run func() string) *MockSSOProvider_GetDisplayName_Call {
	_c.Call.Return(run)
	return _c
}

// GetIconURL provides a mock function for the type MockSSOProvider
func (_mock *MockSSOProvider) GetIconURL() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIconURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSSOProvider_GetIconURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIconURL'
type MockSSOProvider_GetIconURL_Call struct {
	*mock.Call
}

// GetIconURL is a helper method to define mock.On call
func (_e *MockSSOProvider_Expecter) GetIconURL() *MockSSOProvider_GetIconURL_Call {
	return &MockSSOProvider_GetIconURL_Call{Call: _e.mock.On("GetIconURL")}
}

func (_c *MockSSOProvider_GetIconURL_Call) Run(run func()) *MockSSOProvider_GetIconURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSOProvider_GetIconURL_Call) Return(s string) *MockSSOProvider_GetIconURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSSOProvider_GetIconURL_Call) RunAndReturn(run func() string) *MockSSOProvider_GetIconURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type MockSSOProvider
func (_mock *MockSSOProvider) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSSOProvider_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockSSOProvider_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockSSOProvider_Expecter) GetName() *MockSSOProvider_GetName_Call {
	return &MockSSOProvider_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockSSOProvider_GetName_Call) Run(run func()) *MockSSOProvider_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSOProvider_GetName_Call) Return(s string) *MockSSOProvider_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSSOProvider_GetName_Call) RunAndReturn(run func() string) *MockSSOProvider_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function for the type MockSSOProvider
func (_mock *MockSSOProvider) GetType() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSSOProvider_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockSSOProvider_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *MockSSOProvider_Expecter) GetType() *MockSSOProvider_GetType_Call {
	return &MockSSOProvider_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *MockSSOProvider_GetType_Call) Run(run func()) *MockSSOProvider_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSOProvider_GetType_Call) Return(s string) *MockSSOProvider_GetType_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSSOProvider_GetType_Call) RunAndReturn(run func() string) *MockSSOProvider_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function for the type MockSSOProvider
func (_mock *MockSSOProvider) IsEnabled() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockSSOProvider_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type MockSSOProvider_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *MockSSOProvider_Expecter) IsEnabled() *MockSSOProvider_IsEnabled_Call {
	return &MockSSOProvider_IsEnabled_Call{Call: _e.mock.On("IsEnabled")}
}

func (_c *MockSSOProvider_IsEnabled_Call) Run(run func()) *MockSSOProvider_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSOProvider_IsEnabled_Call) Return(b bool) *MockSSOProvider_IsEnabled_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockSSOProvider_IsEnabled_Call) RunAndReturn(run func() bool) *MockSSOProvider_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}
