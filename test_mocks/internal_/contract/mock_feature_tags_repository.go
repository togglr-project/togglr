// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureTagsRepository creates a new instance of MockFeatureTagsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureTagsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureTagsRepository {
	mock := &MockFeatureTagsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureTagsRepository is an autogenerated mock type for the FeatureTagsRepository type
type MockFeatureTagsRepository struct {
	mock.Mock
}

type MockFeatureTagsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureTagsRepository) EXPECT() *MockFeatureTagsRepository_Expecter {
	return &MockFeatureTagsRepository_Expecter{mock: &_m.Mock}
}

// AddFeatureTag provides a mock function for the type MockFeatureTagsRepository
func (_mock *MockFeatureTagsRepository) AddFeatureTag(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID) error {
	ret := _mock.Called(ctx, featureID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for AddFeatureTag")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.TagID) error); ok {
		r0 = returnFunc(ctx, featureID, tagID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureTagsRepository_AddFeatureTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatureTag'
type MockFeatureTagsRepository_AddFeatureTag_Call struct {
	*mock.Call
}

// AddFeatureTag is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - tagID domain.TagID
func (_e *MockFeatureTagsRepository_Expecter) AddFeatureTag(ctx interface{}, featureID interface{}, tagID interface{}) *MockFeatureTagsRepository_AddFeatureTag_Call {
	return &MockFeatureTagsRepository_AddFeatureTag_Call{Call: _e.mock.On("AddFeatureTag", ctx, featureID, tagID)}
}

func (_c *MockFeatureTagsRepository_AddFeatureTag_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID)) *MockFeatureTagsRepository_AddFeatureTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.TagID
		if args[2] != nil {
			arg2 = args[2].(domain.TagID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureTagsRepository_AddFeatureTag_Call) Return(err error) *MockFeatureTagsRepository_AddFeatureTag_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureTagsRepository_AddFeatureTag_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID) error) *MockFeatureTagsRepository_AddFeatureTag_Call {
	_c.Call.Return(run)
	return _c
}

// HasFeatureTag provides a mock function for the type MockFeatureTagsRepository
func (_mock *MockFeatureTagsRepository) HasFeatureTag(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID) (bool, error) {
	ret := _mock.Called(ctx, featureID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for HasFeatureTag")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.TagID) (bool, error)); ok {
		return returnFunc(ctx, featureID, tagID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.TagID) bool); ok {
		r0 = returnFunc(ctx, featureID, tagID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.TagID) error); ok {
		r1 = returnFunc(ctx, featureID, tagID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureTagsRepository_HasFeatureTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasFeatureTag'
type MockFeatureTagsRepository_HasFeatureTag_Call struct {
	*mock.Call
}

// HasFeatureTag is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - tagID domain.TagID
func (_e *MockFeatureTagsRepository_Expecter) HasFeatureTag(ctx interface{}, featureID interface{}, tagID interface{}) *MockFeatureTagsRepository_HasFeatureTag_Call {
	return &MockFeatureTagsRepository_HasFeatureTag_Call{Call: _e.mock.On("HasFeatureTag", ctx, featureID, tagID)}
}

func (_c *MockFeatureTagsRepository_HasFeatureTag_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID)) *MockFeatureTagsRepository_HasFeatureTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.TagID
		if args[2] != nil {
			arg2 = args[2].(domain.TagID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureTagsRepository_HasFeatureTag_Call) Return(b bool, err error) *MockFeatureTagsRepository_HasFeatureTag_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockFeatureTagsRepository_HasFeatureTag_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID) (bool, error)) *MockFeatureTagsRepository_HasFeatureTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeatureTags provides a mock function for the type MockFeatureTagsRepository
func (_mock *MockFeatureTagsRepository) ListFeatureTags(ctx context.Context, featureID domain.FeatureID) ([]domain.Tag, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatureTags")
	}

	var r0 []domain.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) ([]domain.Tag, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) []domain.Tag); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureTagsRepository_ListFeatureTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeatureTags'
type MockFeatureTagsRepository_ListFeatureTags_Call struct {
	*mock.Call
}

// ListFeatureTags is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockFeatureTagsRepository_Expecter) ListFeatureTags(ctx interface{}, featureID interface{}) *MockFeatureTagsRepository_ListFeatureTags_Call {
	return &MockFeatureTagsRepository_ListFeatureTags_Call{Call: _e.mock.On("ListFeatureTags", ctx, featureID)}
}

func (_c *MockFeatureTagsRepository_ListFeatureTags_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockFeatureTagsRepository_ListFeatureTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureTagsRepository_ListFeatureTags_Call) Return(tags []domain.Tag, err error) *MockFeatureTagsRepository_ListFeatureTags_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockFeatureTagsRepository_ListFeatureTags_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) ([]domain.Tag, error)) *MockFeatureTagsRepository_ListFeatureTags_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFeatureTag provides a mock function for the type MockFeatureTagsRepository
func (_mock *MockFeatureTagsRepository) RemoveFeatureTag(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID) error {
	ret := _mock.Called(ctx, featureID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFeatureTag")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.TagID) error); ok {
		r0 = returnFunc(ctx, featureID, tagID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureTagsRepository_RemoveFeatureTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFeatureTag'
type MockFeatureTagsRepository_RemoveFeatureTag_Call struct {
	*mock.Call
}

// RemoveFeatureTag is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - tagID domain.TagID
func (_e *MockFeatureTagsRepository_Expecter) RemoveFeatureTag(ctx interface{}, featureID interface{}, tagID interface{}) *MockFeatureTagsRepository_RemoveFeatureTag_Call {
	return &MockFeatureTagsRepository_RemoveFeatureTag_Call{Call: _e.mock.On("RemoveFeatureTag", ctx, featureID, tagID)}
}

func (_c *MockFeatureTagsRepository_RemoveFeatureTag_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID)) *MockFeatureTagsRepository_RemoveFeatureTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.TagID
		if args[2] != nil {
			arg2 = args[2].(domain.TagID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureTagsRepository_RemoveFeatureTag_Call) Return(err error) *MockFeatureTagsRepository_RemoveFeatureTag_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureTagsRepository_RemoveFeatureTag_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, tagID domain.TagID) error) *MockFeatureTagsRepository_RemoveFeatureTag_Call {
	_c.Call.Return(run)
	return _c
}
