// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockMembershipsUseCase creates a new instance of MockMembershipsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMembershipsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMembershipsUseCase {
	mock := &MockMembershipsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMembershipsUseCase is an autogenerated mock type for the MembershipsUseCase type
type MockMembershipsUseCase struct {
	mock.Mock
}

type MockMembershipsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMembershipsUseCase) EXPECT() *MockMembershipsUseCase_Expecter {
	return &MockMembershipsUseCase_Expecter{mock: &_m.Mock}
}

// CreateProjectMembership provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) CreateProjectMembership(ctx context.Context, projectID domain.ProjectID, userID int, roleID domain.RoleID) (domain.ProjectMembership, error) {
	ret := _mock.Called(ctx, projectID, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectMembership")
	}

	var r0 domain.ProjectMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, int, domain.RoleID) (domain.ProjectMembership, error)); ok {
		return returnFunc(ctx, projectID, userID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, int, domain.RoleID) domain.ProjectMembership); ok {
		r0 = returnFunc(ctx, projectID, userID, roleID)
	} else {
		r0 = ret.Get(0).(domain.ProjectMembership)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, int, domain.RoleID) error); ok {
		r1 = returnFunc(ctx, projectID, userID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsUseCase_CreateProjectMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectMembership'
type MockMembershipsUseCase_CreateProjectMembership_Call struct {
	*mock.Call
}

// CreateProjectMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - userID int
//   - roleID domain.RoleID
func (_e *MockMembershipsUseCase_Expecter) CreateProjectMembership(ctx interface{}, projectID interface{}, userID interface{}, roleID interface{}) *MockMembershipsUseCase_CreateProjectMembership_Call {
	return &MockMembershipsUseCase_CreateProjectMembership_Call{Call: _e.mock.On("CreateProjectMembership", ctx, projectID, userID, roleID)}
}

func (_c *MockMembershipsUseCase_CreateProjectMembership_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, userID int, roleID domain.RoleID)) *MockMembershipsUseCase_CreateProjectMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 domain.RoleID
		if args[3] != nil {
			arg3 = args[3].(domain.RoleID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_CreateProjectMembership_Call) Return(projectMembership domain.ProjectMembership, err error) *MockMembershipsUseCase_CreateProjectMembership_Call {
	_c.Call.Return(projectMembership, err)
	return _c
}

func (_c *MockMembershipsUseCase_CreateProjectMembership_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, userID int, roleID domain.RoleID) (domain.ProjectMembership, error)) *MockMembershipsUseCase_CreateProjectMembership_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectMembership provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) DeleteProjectMembership(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID) error {
	ret := _mock.Called(ctx, projectID, membershipID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectMembership")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.MembershipID) error); ok {
		r0 = returnFunc(ctx, projectID, membershipID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMembershipsUseCase_DeleteProjectMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectMembership'
type MockMembershipsUseCase_DeleteProjectMembership_Call struct {
	*mock.Call
}

// DeleteProjectMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - membershipID domain.MembershipID
func (_e *MockMembershipsUseCase_Expecter) DeleteProjectMembership(ctx interface{}, projectID interface{}, membershipID interface{}) *MockMembershipsUseCase_DeleteProjectMembership_Call {
	return &MockMembershipsUseCase_DeleteProjectMembership_Call{Call: _e.mock.On("DeleteProjectMembership", ctx, projectID, membershipID)}
}

func (_c *MockMembershipsUseCase_DeleteProjectMembership_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID)) *MockMembershipsUseCase_DeleteProjectMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.MembershipID
		if args[2] != nil {
			arg2 = args[2].(domain.MembershipID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_DeleteProjectMembership_Call) Return(err error) *MockMembershipsUseCase_DeleteProjectMembership_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMembershipsUseCase_DeleteProjectMembership_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID) error) *MockMembershipsUseCase_DeleteProjectMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMembership provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) GetProjectMembership(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID) (domain.ProjectMembership, error) {
	ret := _mock.Called(ctx, projectID, membershipID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMembership")
	}

	var r0 domain.ProjectMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.MembershipID) (domain.ProjectMembership, error)); ok {
		return returnFunc(ctx, projectID, membershipID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.MembershipID) domain.ProjectMembership); ok {
		r0 = returnFunc(ctx, projectID, membershipID)
	} else {
		r0 = ret.Get(0).(domain.ProjectMembership)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.MembershipID) error); ok {
		r1 = returnFunc(ctx, projectID, membershipID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsUseCase_GetProjectMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMembership'
type MockMembershipsUseCase_GetProjectMembership_Call struct {
	*mock.Call
}

// GetProjectMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - membershipID domain.MembershipID
func (_e *MockMembershipsUseCase_Expecter) GetProjectMembership(ctx interface{}, projectID interface{}, membershipID interface{}) *MockMembershipsUseCase_GetProjectMembership_Call {
	return &MockMembershipsUseCase_GetProjectMembership_Call{Call: _e.mock.On("GetProjectMembership", ctx, projectID, membershipID)}
}

func (_c *MockMembershipsUseCase_GetProjectMembership_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID)) *MockMembershipsUseCase_GetProjectMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.MembershipID
		if args[2] != nil {
			arg2 = args[2].(domain.MembershipID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_GetProjectMembership_Call) Return(projectMembership domain.ProjectMembership, err error) *MockMembershipsUseCase_GetProjectMembership_Call {
	_c.Call.Return(projectMembership, err)
	return _c
}

func (_c *MockMembershipsUseCase_GetProjectMembership_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID) (domain.ProjectMembership, error)) *MockMembershipsUseCase_GetProjectMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolePermissions provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) GetRolePermissions(ctx context.Context, roleID domain.RoleID) ([]domain.Permission, error) {
	ret := _mock.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetRolePermissions")
	}

	var r0 []domain.Permission
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RoleID) ([]domain.Permission, error)); ok {
		return returnFunc(ctx, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RoleID) []domain.Permission); ok {
		r0 = returnFunc(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Permission)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.RoleID) error); ok {
		r1 = returnFunc(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsUseCase_GetRolePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolePermissions'
type MockMembershipsUseCase_GetRolePermissions_Call struct {
	*mock.Call
}

// GetRolePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID domain.RoleID
func (_e *MockMembershipsUseCase_Expecter) GetRolePermissions(ctx interface{}, roleID interface{}) *MockMembershipsUseCase_GetRolePermissions_Call {
	return &MockMembershipsUseCase_GetRolePermissions_Call{Call: _e.mock.On("GetRolePermissions", ctx, roleID)}
}

func (_c *MockMembershipsUseCase_GetRolePermissions_Call) Run(run func(ctx context.Context, roleID domain.RoleID)) *MockMembershipsUseCase_GetRolePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RoleID
		if args[1] != nil {
			arg1 = args[1].(domain.RoleID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_GetRolePermissions_Call) Return(permissions []domain.Permission, err error) *MockMembershipsUseCase_GetRolePermissions_Call {
	_c.Call.Return(permissions, err)
	return _c
}

func (_c *MockMembershipsUseCase_GetRolePermissions_Call) RunAndReturn(run func(ctx context.Context, roleID domain.RoleID) ([]domain.Permission, error)) *MockMembershipsUseCase_GetRolePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListPermissions provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) ListPermissions(ctx context.Context) ([]domain.Permission, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissions")
	}

	var r0 []domain.Permission
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Permission, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Permission); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Permission)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsUseCase_ListPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPermissions'
type MockMembershipsUseCase_ListPermissions_Call struct {
	*mock.Call
}

// ListPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMembershipsUseCase_Expecter) ListPermissions(ctx interface{}) *MockMembershipsUseCase_ListPermissions_Call {
	return &MockMembershipsUseCase_ListPermissions_Call{Call: _e.mock.On("ListPermissions", ctx)}
}

func (_c *MockMembershipsUseCase_ListPermissions_Call) Run(run func(ctx context.Context)) *MockMembershipsUseCase_ListPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_ListPermissions_Call) Return(permissions []domain.Permission, err error) *MockMembershipsUseCase_ListPermissions_Call {
	_c.Call.Return(permissions, err)
	return _c
}

func (_c *MockMembershipsUseCase_ListPermissions_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Permission, error)) *MockMembershipsUseCase_ListPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectMemberships provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) ListProjectMemberships(ctx context.Context, projectID domain.ProjectID) ([]domain.ProjectMembership, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMemberships")
	}

	var r0 []domain.ProjectMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.ProjectMembership, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.ProjectMembership); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectMembership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsUseCase_ListProjectMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectMemberships'
type MockMembershipsUseCase_ListProjectMemberships_Call struct {
	*mock.Call
}

// ListProjectMemberships is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockMembershipsUseCase_Expecter) ListProjectMemberships(ctx interface{}, projectID interface{}) *MockMembershipsUseCase_ListProjectMemberships_Call {
	return &MockMembershipsUseCase_ListProjectMemberships_Call{Call: _e.mock.On("ListProjectMemberships", ctx, projectID)}
}

func (_c *MockMembershipsUseCase_ListProjectMemberships_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockMembershipsUseCase_ListProjectMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_ListProjectMemberships_Call) Return(projectMemberships []domain.ProjectMembership, err error) *MockMembershipsUseCase_ListProjectMemberships_Call {
	_c.Call.Return(projectMemberships, err)
	return _c
}

func (_c *MockMembershipsUseCase_ListProjectMemberships_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.ProjectMembership, error)) *MockMembershipsUseCase_ListProjectMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolePermissions provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) ListRolePermissions(ctx context.Context) (map[domain.Role][]domain.Permission, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRolePermissions")
	}

	var r0 map[domain.Role][]domain.Permission
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[domain.Role][]domain.Permission, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[domain.Role][]domain.Permission); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[domain.Role][]domain.Permission)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsUseCase_ListRolePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolePermissions'
type MockMembershipsUseCase_ListRolePermissions_Call struct {
	*mock.Call
}

// ListRolePermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMembershipsUseCase_Expecter) ListRolePermissions(ctx interface{}) *MockMembershipsUseCase_ListRolePermissions_Call {
	return &MockMembershipsUseCase_ListRolePermissions_Call{Call: _e.mock.On("ListRolePermissions", ctx)}
}

func (_c *MockMembershipsUseCase_ListRolePermissions_Call) Run(run func(ctx context.Context)) *MockMembershipsUseCase_ListRolePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_ListRolePermissions_Call) Return(roleToPermissions map[domain.Role][]domain.Permission, err error) *MockMembershipsUseCase_ListRolePermissions_Call {
	_c.Call.Return(roleToPermissions, err)
	return _c
}

func (_c *MockMembershipsUseCase_ListRolePermissions_Call) RunAndReturn(run func(ctx context.Context) (map[domain.Role][]domain.Permission, error)) *MockMembershipsUseCase_ListRolePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) ListRoles(ctx context.Context) ([]domain.Role, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 []domain.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Role, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Role); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Role)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsUseCase_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockMembershipsUseCase_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMembershipsUseCase_Expecter) ListRoles(ctx interface{}) *MockMembershipsUseCase_ListRoles_Call {
	return &MockMembershipsUseCase_ListRoles_Call{Call: _e.mock.On("ListRoles", ctx)}
}

func (_c *MockMembershipsUseCase_ListRoles_Call) Run(run func(ctx context.Context)) *MockMembershipsUseCase_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_ListRoles_Call) Return(roles []domain.Role, err error) *MockMembershipsUseCase_ListRoles_Call {
	_c.Call.Return(roles, err)
	return _c
}

func (_c *MockMembershipsUseCase_ListRoles_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Role, error)) *MockMembershipsUseCase_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectMembership provides a mock function for the type MockMembershipsUseCase
func (_mock *MockMembershipsUseCase) UpdateProjectMembership(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID, roleID domain.RoleID) (domain.ProjectMembership, error) {
	ret := _mock.Called(ctx, projectID, membershipID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectMembership")
	}

	var r0 domain.ProjectMembership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.MembershipID, domain.RoleID) (domain.ProjectMembership, error)); ok {
		return returnFunc(ctx, projectID, membershipID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.MembershipID, domain.RoleID) domain.ProjectMembership); ok {
		r0 = returnFunc(ctx, projectID, membershipID, roleID)
	} else {
		r0 = ret.Get(0).(domain.ProjectMembership)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.MembershipID, domain.RoleID) error); ok {
		r1 = returnFunc(ctx, projectID, membershipID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershipsUseCase_UpdateProjectMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectMembership'
type MockMembershipsUseCase_UpdateProjectMembership_Call struct {
	*mock.Call
}

// UpdateProjectMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - membershipID domain.MembershipID
//   - roleID domain.RoleID
func (_e *MockMembershipsUseCase_Expecter) UpdateProjectMembership(ctx interface{}, projectID interface{}, membershipID interface{}, roleID interface{}) *MockMembershipsUseCase_UpdateProjectMembership_Call {
	return &MockMembershipsUseCase_UpdateProjectMembership_Call{Call: _e.mock.On("UpdateProjectMembership", ctx, projectID, membershipID, roleID)}
}

func (_c *MockMembershipsUseCase_UpdateProjectMembership_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID, roleID domain.RoleID)) *MockMembershipsUseCase_UpdateProjectMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.MembershipID
		if args[2] != nil {
			arg2 = args[2].(domain.MembershipID)
		}
		var arg3 domain.RoleID
		if args[3] != nil {
			arg3 = args[3].(domain.RoleID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMembershipsUseCase_UpdateProjectMembership_Call) Return(projectMembership domain.ProjectMembership, err error) *MockMembershipsUseCase_UpdateProjectMembership_Call {
	_c.Call.Return(projectMembership, err)
	return _c
}

func (_c *MockMembershipsUseCase_UpdateProjectMembership_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, membershipID domain.MembershipID, roleID domain.RoleID) (domain.ProjectMembership, error)) *MockMembershipsUseCase_UpdateProjectMembership_Call {
	_c.Call.Return(run)
	return _c
}
