// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockPermissionsService creates a new instance of MockPermissionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionsService {
	mock := &MockPermissionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPermissionsService is an autogenerated mock type for the PermissionsService type
type MockPermissionsService struct {
	mock.Mock
}

type MockPermissionsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionsService) EXPECT() *MockPermissionsService_Expecter {
	return &MockPermissionsService_Expecter{mock: &_m.Mock}
}

// CanAccessProject provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) CanAccessProject(ctx context.Context, projectID domain.ProjectID) error {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CanAccessProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPermissionsService_CanAccessProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanAccessProject'
type MockPermissionsService_CanAccessProject_Call struct {
	*mock.Call
}

// CanAccessProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockPermissionsService_Expecter) CanAccessProject(ctx interface{}, projectID interface{}) *MockPermissionsService_CanAccessProject_Call {
	return &MockPermissionsService_CanAccessProject_Call{Call: _e.mock.On("CanAccessProject", ctx, projectID)}
}

func (_c *MockPermissionsService_CanAccessProject_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPermissionsService_CanAccessProject_Call) Return(err error) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPermissionsService_CanAccessProject_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) error) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Return(run)
	return _c
}

// CanManageProject provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) CanManageProject(ctx context.Context, projectID domain.ProjectID) error {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CanManageProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPermissionsService_CanManageProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanManageProject'
type MockPermissionsService_CanManageProject_Call struct {
	*mock.Call
}

// CanManageProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockPermissionsService_Expecter) CanManageProject(ctx interface{}, projectID interface{}) *MockPermissionsService_CanManageProject_Call {
	return &MockPermissionsService_CanManageProject_Call{Call: _e.mock.On("CanManageProject", ctx, projectID)}
}

func (_c *MockPermissionsService_CanManageProject_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPermissionsService_CanManageProject_Call) Return(err error) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPermissionsService_CanManageProject_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) error) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessibleProjects provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) GetAccessibleProjects(ctx context.Context, projects []domain.Project) ([]domain.Project, error) {
	ret := _mock.Called(ctx, projects)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessibleProjects")
	}

	var r0 []domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.Project) ([]domain.Project, error)); ok {
		return returnFunc(ctx, projects)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.Project) []domain.Project); ok {
		r0 = returnFunc(ctx, projects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []domain.Project) error); ok {
		r1 = returnFunc(ctx, projects)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPermissionsService_GetAccessibleProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessibleProjects'
type MockPermissionsService_GetAccessibleProjects_Call struct {
	*mock.Call
}

// GetAccessibleProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - projects []domain.Project
func (_e *MockPermissionsService_Expecter) GetAccessibleProjects(ctx interface{}, projects interface{}) *MockPermissionsService_GetAccessibleProjects_Call {
	return &MockPermissionsService_GetAccessibleProjects_Call{Call: _e.mock.On("GetAccessibleProjects", ctx, projects)}
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) Run(run func(ctx context.Context, projects []domain.Project)) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.Project
		if args[1] != nil {
			arg1 = args[1].([]domain.Project)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) Return(projects1 []domain.Project, err error) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Return(projects1, err)
	return _c
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) RunAndReturn(run func(ctx context.Context, projects []domain.Project) ([]domain.Project, error)) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetMyProjectPermissions provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) GetMyProjectPermissions(ctx context.Context) (map[domain.ProjectID][]domain.PermKey, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMyProjectPermissions")
	}

	var r0 map[domain.ProjectID][]domain.PermKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[domain.ProjectID][]domain.PermKey, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[domain.ProjectID][]domain.PermKey); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[domain.ProjectID][]domain.PermKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPermissionsService_GetMyProjectPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyProjectPermissions'
type MockPermissionsService_GetMyProjectPermissions_Call struct {
	*mock.Call
}

// GetMyProjectPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPermissionsService_Expecter) GetMyProjectPermissions(ctx interface{}) *MockPermissionsService_GetMyProjectPermissions_Call {
	return &MockPermissionsService_GetMyProjectPermissions_Call{Call: _e.mock.On("GetMyProjectPermissions", ctx)}
}

func (_c *MockPermissionsService_GetMyProjectPermissions_Call) Run(run func(ctx context.Context)) *MockPermissionsService_GetMyProjectPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPermissionsService_GetMyProjectPermissions_Call) Return(projectIDToPermKeys map[domain.ProjectID][]domain.PermKey, err error) *MockPermissionsService_GetMyProjectPermissions_Call {
	_c.Call.Return(projectIDToPermKeys, err)
	return _c
}

func (_c *MockPermissionsService_GetMyProjectPermissions_Call) RunAndReturn(run func(ctx context.Context) (map[domain.ProjectID][]domain.PermKey, error)) *MockPermissionsService_GetMyProjectPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// HasGlobalPermission provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) HasGlobalPermission(ctx context.Context, permKey domain.PermKey) (bool, error) {
	ret := _mock.Called(ctx, permKey)

	if len(ret) == 0 {
		panic("no return value specified for HasGlobalPermission")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PermKey) (bool, error)); ok {
		return returnFunc(ctx, permKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PermKey) bool); ok {
		r0 = returnFunc(ctx, permKey)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.PermKey) error); ok {
		r1 = returnFunc(ctx, permKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPermissionsService_HasGlobalPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasGlobalPermission'
type MockPermissionsService_HasGlobalPermission_Call struct {
	*mock.Call
}

// HasGlobalPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - permKey domain.PermKey
func (_e *MockPermissionsService_Expecter) HasGlobalPermission(ctx interface{}, permKey interface{}) *MockPermissionsService_HasGlobalPermission_Call {
	return &MockPermissionsService_HasGlobalPermission_Call{Call: _e.mock.On("HasGlobalPermission", ctx, permKey)}
}

func (_c *MockPermissionsService_HasGlobalPermission_Call) Run(run func(ctx context.Context, permKey domain.PermKey)) *MockPermissionsService_HasGlobalPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PermKey
		if args[1] != nil {
			arg1 = args[1].(domain.PermKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPermissionsService_HasGlobalPermission_Call) Return(b bool, err error) *MockPermissionsService_HasGlobalPermission_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockPermissionsService_HasGlobalPermission_Call) RunAndReturn(run func(ctx context.Context, permKey domain.PermKey) (bool, error)) *MockPermissionsService_HasGlobalPermission_Call {
	_c.Call.Return(run)
	return _c
}

// HasProjectPermission provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) HasProjectPermission(ctx context.Context, projectID domain.ProjectID, permKey domain.PermKey) (bool, error) {
	ret := _mock.Called(ctx, projectID, permKey)

	if len(ret) == 0 {
		panic("no return value specified for HasProjectPermission")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.PermKey) (bool, error)); ok {
		return returnFunc(ctx, projectID, permKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.PermKey) bool); ok {
		r0 = returnFunc(ctx, projectID, permKey)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.PermKey) error); ok {
		r1 = returnFunc(ctx, projectID, permKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPermissionsService_HasProjectPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasProjectPermission'
type MockPermissionsService_HasProjectPermission_Call struct {
	*mock.Call
}

// HasProjectPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - permKey domain.PermKey
func (_e *MockPermissionsService_Expecter) HasProjectPermission(ctx interface{}, projectID interface{}, permKey interface{}) *MockPermissionsService_HasProjectPermission_Call {
	return &MockPermissionsService_HasProjectPermission_Call{Call: _e.mock.On("HasProjectPermission", ctx, projectID, permKey)}
}

func (_c *MockPermissionsService_HasProjectPermission_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, permKey domain.PermKey)) *MockPermissionsService_HasProjectPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.PermKey
		if args[2] != nil {
			arg2 = args[2].(domain.PermKey)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPermissionsService_HasProjectPermission_Call) Return(b bool, err error) *MockPermissionsService_HasProjectPermission_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockPermissionsService_HasProjectPermission_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, permKey domain.PermKey) (bool, error)) *MockPermissionsService_HasProjectPermission_Call {
	_c.Call.Return(run)
	return _c
}
