// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPermissionsService creates a new instance of MockPermissionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionsService {
	mock := &MockPermissionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPermissionsService is an autogenerated mock type for the PermissionsService type
type MockPermissionsService struct {
	mock.Mock
}

type MockPermissionsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionsService) EXPECT() *MockPermissionsService_Expecter {
	return &MockPermissionsService_Expecter{mock: &_m.Mock}
}

// CanAccessProject provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) CanAccessProject(ctx context.Context, projectID domain.ProjectID) error {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CanAccessProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPermissionsService_CanAccessProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanAccessProject'
type MockPermissionsService_CanAccessProject_Call struct {
	*mock.Call
}

// CanAccessProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockPermissionsService_Expecter) CanAccessProject(ctx interface{}, projectID interface{}) *MockPermissionsService_CanAccessProject_Call {
	return &MockPermissionsService_CanAccessProject_Call{Call: _e.mock.On("CanAccessProject", ctx, projectID)}
}

func (_c *MockPermissionsService_CanAccessProject_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPermissionsService_CanAccessProject_Call) Return(err error) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPermissionsService_CanAccessProject_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) error) *MockPermissionsService_CanAccessProject_Call {
	_c.Call.Return(run)
	return _c
}

// CanManageProject provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) CanManageProject(ctx context.Context, projectID domain.ProjectID) error {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CanManageProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPermissionsService_CanManageProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanManageProject'
type MockPermissionsService_CanManageProject_Call struct {
	*mock.Call
}

// CanManageProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockPermissionsService_Expecter) CanManageProject(ctx interface{}, projectID interface{}) *MockPermissionsService_CanManageProject_Call {
	return &MockPermissionsService_CanManageProject_Call{Call: _e.mock.On("CanManageProject", ctx, projectID)}
}

func (_c *MockPermissionsService_CanManageProject_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPermissionsService_CanManageProject_Call) Return(err error) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPermissionsService_CanManageProject_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) error) *MockPermissionsService_CanManageProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessibleProjects provides a mock function for the type MockPermissionsService
func (_mock *MockPermissionsService) GetAccessibleProjects(ctx context.Context, projects []domain.Project) ([]domain.Project, error) {
	ret := _mock.Called(ctx, projects)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessibleProjects")
	}

	var r0 []domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.Project) ([]domain.Project, error)); ok {
		return returnFunc(ctx, projects)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.Project) []domain.Project); ok {
		r0 = returnFunc(ctx, projects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []domain.Project) error); ok {
		r1 = returnFunc(ctx, projects)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPermissionsService_GetAccessibleProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessibleProjects'
type MockPermissionsService_GetAccessibleProjects_Call struct {
	*mock.Call
}

// GetAccessibleProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - projects []domain.Project
func (_e *MockPermissionsService_Expecter) GetAccessibleProjects(ctx interface{}, projects interface{}) *MockPermissionsService_GetAccessibleProjects_Call {
	return &MockPermissionsService_GetAccessibleProjects_Call{Call: _e.mock.On("GetAccessibleProjects", ctx, projects)}
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) Run(run func(ctx context.Context, projects []domain.Project)) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.Project
		if args[1] != nil {
			arg1 = args[1].([]domain.Project)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) Return(projects1 []domain.Project, err error) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Return(projects1, err)
	return _c
}

func (_c *MockPermissionsService_GetAccessibleProjects_Call) RunAndReturn(run func(ctx context.Context, projects []domain.Project) ([]domain.Project, error)) *MockPermissionsService_GetAccessibleProjects_Call {
	_c.Call.Return(run)
	return _c
}
