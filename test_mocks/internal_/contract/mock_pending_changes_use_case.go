// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockPendingChangesUseCase creates a new instance of MockPendingChangesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPendingChangesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPendingChangesUseCase {
	mock := &MockPendingChangesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPendingChangesUseCase is an autogenerated mock type for the PendingChangesUseCase type
type MockPendingChangesUseCase struct {
	mock.Mock
}

type MockPendingChangesUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPendingChangesUseCase) EXPECT() *MockPendingChangesUseCase_Expecter {
	return &MockPendingChangesUseCase_Expecter{mock: &_m.Mock}
}

// Approve provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) Approve(ctx context.Context, id domain.PendingChangeID, approverUserID int, approverName string, authMethod string, credential string, sessionID string) error {
	ret := _mock.Called(ctx, id, approverUserID, approverName, authMethod, credential, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID, int, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, id, approverUserID, approverName, authMethod, credential, sessionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPendingChangesUseCase_Approve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Approve'
type MockPendingChangesUseCase_Approve_Call struct {
	*mock.Call
}

// Approve is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.PendingChangeID
//   - approverUserID int
//   - approverName string
//   - authMethod string
//   - credential string
//   - sessionID string
func (_e *MockPendingChangesUseCase_Expecter) Approve(ctx interface{}, id interface{}, approverUserID interface{}, approverName interface{}, authMethod interface{}, credential interface{}, sessionID interface{}) *MockPendingChangesUseCase_Approve_Call {
	return &MockPendingChangesUseCase_Approve_Call{Call: _e.mock.On("Approve", ctx, id, approverUserID, approverName, authMethod, credential, sessionID)}
}

func (_c *MockPendingChangesUseCase_Approve_Call) Run(run func(ctx context.Context, id domain.PendingChangeID, approverUserID int, approverName string, authMethod string, credential string, sessionID string)) *MockPendingChangesUseCase_Approve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PendingChangeID
		if args[1] != nil {
			arg1 = args[1].(domain.PendingChangeID)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_Approve_Call) Return(err error) *MockPendingChangesUseCase_Approve_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPendingChangesUseCase_Approve_Call) RunAndReturn(run func(ctx context.Context, id domain.PendingChangeID, approverUserID int, approverName string, authMethod string, credential string, sessionID string) error) *MockPendingChangesUseCase_Approve_Call {
	_c.Call.Return(run)
	return _c
}

// Cancel provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) Cancel(ctx context.Context, id domain.PendingChangeID, cancelledBy string) error {
	ret := _mock.Called(ctx, id, cancelledBy)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID, string) error); ok {
		r0 = returnFunc(ctx, id, cancelledBy)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPendingChangesUseCase_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockPendingChangesUseCase_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.PendingChangeID
//   - cancelledBy string
func (_e *MockPendingChangesUseCase_Expecter) Cancel(ctx interface{}, id interface{}, cancelledBy interface{}) *MockPendingChangesUseCase_Cancel_Call {
	return &MockPendingChangesUseCase_Cancel_Call{Call: _e.mock.On("Cancel", ctx, id, cancelledBy)}
}

func (_c *MockPendingChangesUseCase_Cancel_Call) Run(run func(ctx context.Context, id domain.PendingChangeID, cancelledBy string)) *MockPendingChangesUseCase_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PendingChangeID
		if args[1] != nil {
			arg1 = args[1].(domain.PendingChangeID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_Cancel_Call) Return(err error) *MockPendingChangesUseCase_Cancel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPendingChangesUseCase_Cancel_Call) RunAndReturn(run func(ctx context.Context, id domain.PendingChangeID, cancelledBy string) error) *MockPendingChangesUseCase_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEntityConflict provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) CheckEntityConflict(ctx context.Context, entities []domain.EntityChange) (bool, error) {
	ret := _mock.Called(ctx, entities)

	if len(ret) == 0 {
		panic("no return value specified for CheckEntityConflict")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.EntityChange) (bool, error)); ok {
		return returnFunc(ctx, entities)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.EntityChange) bool); ok {
		r0 = returnFunc(ctx, entities)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []domain.EntityChange) error); ok {
		r1 = returnFunc(ctx, entities)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesUseCase_CheckEntityConflict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEntityConflict'
type MockPendingChangesUseCase_CheckEntityConflict_Call struct {
	*mock.Call
}

// CheckEntityConflict is a helper method to define mock.On call
//   - ctx context.Context
//   - entities []domain.EntityChange
func (_e *MockPendingChangesUseCase_Expecter) CheckEntityConflict(ctx interface{}, entities interface{}) *MockPendingChangesUseCase_CheckEntityConflict_Call {
	return &MockPendingChangesUseCase_CheckEntityConflict_Call{Call: _e.mock.On("CheckEntityConflict", ctx, entities)}
}

func (_c *MockPendingChangesUseCase_CheckEntityConflict_Call) Run(run func(ctx context.Context, entities []domain.EntityChange)) *MockPendingChangesUseCase_CheckEntityConflict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.EntityChange
		if args[1] != nil {
			arg1 = args[1].([]domain.EntityChange)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_CheckEntityConflict_Call) Return(b bool, err error) *MockPendingChangesUseCase_CheckEntityConflict_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockPendingChangesUseCase_CheckEntityConflict_Call) RunAndReturn(run func(ctx context.Context, entities []domain.EntityChange) (bool, error)) *MockPendingChangesUseCase_CheckEntityConflict_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) Create(ctx context.Context, projectID domain.ProjectID, requestedBy string, requestUserID *int, change domain.PendingChangePayload) (domain.PendingChange, error) {
	ret := _mock.Called(ctx, projectID, requestedBy, requestUserID, change)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.PendingChange
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, *int, domain.PendingChangePayload) (domain.PendingChange, error)); ok {
		return returnFunc(ctx, projectID, requestedBy, requestUserID, change)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, *int, domain.PendingChangePayload) domain.PendingChange); ok {
		r0 = returnFunc(ctx, projectID, requestedBy, requestUserID, change)
	} else {
		r0 = ret.Get(0).(domain.PendingChange)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, *int, domain.PendingChangePayload) error); ok {
		r1 = returnFunc(ctx, projectID, requestedBy, requestUserID, change)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPendingChangesUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - requestedBy string
//   - requestUserID *int
//   - change domain.PendingChangePayload
func (_e *MockPendingChangesUseCase_Expecter) Create(ctx interface{}, projectID interface{}, requestedBy interface{}, requestUserID interface{}, change interface{}) *MockPendingChangesUseCase_Create_Call {
	return &MockPendingChangesUseCase_Create_Call{Call: _e.mock.On("Create", ctx, projectID, requestedBy, requestUserID, change)}
}

func (_c *MockPendingChangesUseCase_Create_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, requestedBy string, requestUserID *int, change domain.PendingChangePayload)) *MockPendingChangesUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *int
		if args[3] != nil {
			arg3 = args[3].(*int)
		}
		var arg4 domain.PendingChangePayload
		if args[4] != nil {
			arg4 = args[4].(domain.PendingChangePayload)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_Create_Call) Return(pendingChange domain.PendingChange, err error) *MockPendingChangesUseCase_Create_Call {
	_c.Call.Return(pendingChange, err)
	return _c
}

func (_c *MockPendingChangesUseCase_Create_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, requestedBy string, requestUserID *int, change domain.PendingChangePayload) (domain.PendingChange, error)) *MockPendingChangesUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) GetByID(ctx context.Context, id domain.PendingChangeID) (domain.PendingChange, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.PendingChange
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID) (domain.PendingChange, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID) domain.PendingChange); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.PendingChange)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.PendingChangeID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesUseCase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockPendingChangesUseCase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.PendingChangeID
func (_e *MockPendingChangesUseCase_Expecter) GetByID(ctx interface{}, id interface{}) *MockPendingChangesUseCase_GetByID_Call {
	return &MockPendingChangesUseCase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockPendingChangesUseCase_GetByID_Call) Run(run func(ctx context.Context, id domain.PendingChangeID)) *MockPendingChangesUseCase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PendingChangeID
		if args[1] != nil {
			arg1 = args[1].(domain.PendingChangeID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_GetByID_Call) Return(pendingChange domain.PendingChange, err error) *MockPendingChangesUseCase_GetByID_Call {
	_c.Call.Return(pendingChange, err)
	return _c
}

func (_c *MockPendingChangesUseCase_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.PendingChangeID) (domain.PendingChange, error)) *MockPendingChangesUseCase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectActiveUserCount provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) GetProjectActiveUserCount(ctx context.Context, projectID domain.ProjectID) (int, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectActiveUserCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) (int, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) int); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesUseCase_GetProjectActiveUserCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectActiveUserCount'
type MockPendingChangesUseCase_GetProjectActiveUserCount_Call struct {
	*mock.Call
}

// GetProjectActiveUserCount is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockPendingChangesUseCase_Expecter) GetProjectActiveUserCount(ctx interface{}, projectID interface{}) *MockPendingChangesUseCase_GetProjectActiveUserCount_Call {
	return &MockPendingChangesUseCase_GetProjectActiveUserCount_Call{Call: _e.mock.On("GetProjectActiveUserCount", ctx, projectID)}
}

func (_c *MockPendingChangesUseCase_GetProjectActiveUserCount_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockPendingChangesUseCase_GetProjectActiveUserCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_GetProjectActiveUserCount_Call) Return(n int, err error) *MockPendingChangesUseCase_GetProjectActiveUserCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockPendingChangesUseCase_GetProjectActiveUserCount_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) (int, error)) *MockPendingChangesUseCase_GetProjectActiveUserCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectApprovers provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) GetProjectApprovers(ctx context.Context, projectID domain.ProjectID) ([]domain.ProjectApprover, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectApprovers")
	}

	var r0 []domain.ProjectApprover
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.ProjectApprover, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.ProjectApprover); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProjectApprover)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesUseCase_GetProjectApprovers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectApprovers'
type MockPendingChangesUseCase_GetProjectApprovers_Call struct {
	*mock.Call
}

// GetProjectApprovers is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockPendingChangesUseCase_Expecter) GetProjectApprovers(ctx interface{}, projectID interface{}) *MockPendingChangesUseCase_GetProjectApprovers_Call {
	return &MockPendingChangesUseCase_GetProjectApprovers_Call{Call: _e.mock.On("GetProjectApprovers", ctx, projectID)}
}

func (_c *MockPendingChangesUseCase_GetProjectApprovers_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockPendingChangesUseCase_GetProjectApprovers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_GetProjectApprovers_Call) Return(projectApprovers []domain.ProjectApprover, err error) *MockPendingChangesUseCase_GetProjectApprovers_Call {
	_c.Call.Return(projectApprovers, err)
	return _c
}

func (_c *MockPendingChangesUseCase_GetProjectApprovers_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.ProjectApprover, error)) *MockPendingChangesUseCase_GetProjectApprovers_Call {
	_c.Call.Return(run)
	return _c
}

// InitiateTOTPApproval provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) InitiateTOTPApproval(ctx context.Context, id domain.PendingChangeID, approverUserID int) (string, error) {
	ret := _mock.Called(ctx, id, approverUserID)

	if len(ret) == 0 {
		panic("no return value specified for InitiateTOTPApproval")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID, int) (string, error)); ok {
		return returnFunc(ctx, id, approverUserID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID, int) string); ok {
		r0 = returnFunc(ctx, id, approverUserID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.PendingChangeID, int) error); ok {
		r1 = returnFunc(ctx, id, approverUserID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesUseCase_InitiateTOTPApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateTOTPApproval'
type MockPendingChangesUseCase_InitiateTOTPApproval_Call struct {
	*mock.Call
}

// InitiateTOTPApproval is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.PendingChangeID
//   - approverUserID int
func (_e *MockPendingChangesUseCase_Expecter) InitiateTOTPApproval(ctx interface{}, id interface{}, approverUserID interface{}) *MockPendingChangesUseCase_InitiateTOTPApproval_Call {
	return &MockPendingChangesUseCase_InitiateTOTPApproval_Call{Call: _e.mock.On("InitiateTOTPApproval", ctx, id, approverUserID)}
}

func (_c *MockPendingChangesUseCase_InitiateTOTPApproval_Call) Run(run func(ctx context.Context, id domain.PendingChangeID, approverUserID int)) *MockPendingChangesUseCase_InitiateTOTPApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PendingChangeID
		if args[1] != nil {
			arg1 = args[1].(domain.PendingChangeID)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_InitiateTOTPApproval_Call) Return(s string, err error) *MockPendingChangesUseCase_InitiateTOTPApproval_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPendingChangesUseCase_InitiateTOTPApproval_Call) RunAndReturn(run func(ctx context.Context, id domain.PendingChangeID, approverUserID int) (string, error)) *MockPendingChangesUseCase_InitiateTOTPApproval_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserApprover provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) IsUserApprover(ctx context.Context, projectID domain.ProjectID, userID int) (bool, error) {
	ret := _mock.Called(ctx, projectID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserApprover")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, int) (bool, error)); ok {
		return returnFunc(ctx, projectID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, int) bool); ok {
		r0 = returnFunc(ctx, projectID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, int) error); ok {
		r1 = returnFunc(ctx, projectID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPendingChangesUseCase_IsUserApprover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserApprover'
type MockPendingChangesUseCase_IsUserApprover_Call struct {
	*mock.Call
}

// IsUserApprover is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - userID int
func (_e *MockPendingChangesUseCase_Expecter) IsUserApprover(ctx interface{}, projectID interface{}, userID interface{}) *MockPendingChangesUseCase_IsUserApprover_Call {
	return &MockPendingChangesUseCase_IsUserApprover_Call{Call: _e.mock.On("IsUserApprover", ctx, projectID, userID)}
}

func (_c *MockPendingChangesUseCase_IsUserApprover_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, userID int)) *MockPendingChangesUseCase_IsUserApprover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_IsUserApprover_Call) Return(b bool, err error) *MockPendingChangesUseCase_IsUserApprover_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockPendingChangesUseCase_IsUserApprover_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, userID int) (bool, error)) *MockPendingChangesUseCase_IsUserApprover_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) List(ctx context.Context, filter contract.PendingChangesListFilter) ([]domain.PendingChange, int, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.PendingChange
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, contract.PendingChangesListFilter) ([]domain.PendingChange, int, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, contract.PendingChangesListFilter) []domain.PendingChange); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PendingChange)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, contract.PendingChangesListFilter) int); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, contract.PendingChangesListFilter) error); ok {
		r2 = returnFunc(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPendingChangesUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPendingChangesUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter contract.PendingChangesListFilter
func (_e *MockPendingChangesUseCase_Expecter) List(ctx interface{}, filter interface{}) *MockPendingChangesUseCase_List_Call {
	return &MockPendingChangesUseCase_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *MockPendingChangesUseCase_List_Call) Run(run func(ctx context.Context, filter contract.PendingChangesListFilter)) *MockPendingChangesUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 contract.PendingChangesListFilter
		if args[1] != nil {
			arg1 = args[1].(contract.PendingChangesListFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_List_Call) Return(pendingChanges []domain.PendingChange, n int, err error) *MockPendingChangesUseCase_List_Call {
	_c.Call.Return(pendingChanges, n, err)
	return _c
}

func (_c *MockPendingChangesUseCase_List_Call) RunAndReturn(run func(ctx context.Context, filter contract.PendingChangesListFilter) ([]domain.PendingChange, int, error)) *MockPendingChangesUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// Reject provides a mock function for the type MockPendingChangesUseCase
func (_mock *MockPendingChangesUseCase) Reject(ctx context.Context, id domain.PendingChangeID, rejectedBy string, reason string) error {
	ret := _mock.Called(ctx, id, rejectedBy, reason)

	if len(ret) == 0 {
		panic("no return value specified for Reject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PendingChangeID, string, string) error); ok {
		r0 = returnFunc(ctx, id, rejectedBy, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPendingChangesUseCase_Reject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reject'
type MockPendingChangesUseCase_Reject_Call struct {
	*mock.Call
}

// Reject is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.PendingChangeID
//   - rejectedBy string
//   - reason string
func (_e *MockPendingChangesUseCase_Expecter) Reject(ctx interface{}, id interface{}, rejectedBy interface{}, reason interface{}) *MockPendingChangesUseCase_Reject_Call {
	return &MockPendingChangesUseCase_Reject_Call{Call: _e.mock.On("Reject", ctx, id, rejectedBy, reason)}
}

func (_c *MockPendingChangesUseCase_Reject_Call) Run(run func(ctx context.Context, id domain.PendingChangeID, rejectedBy string, reason string)) *MockPendingChangesUseCase_Reject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.PendingChangeID
		if args[1] != nil {
			arg1 = args[1].(domain.PendingChangeID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPendingChangesUseCase_Reject_Call) Return(err error) *MockPendingChangesUseCase_Reject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPendingChangesUseCase_Reject_Call) RunAndReturn(run func(ctx context.Context, id domain.PendingChangeID, rejectedBy string, reason string) error) *MockPendingChangesUseCase_Reject_Call {
	_c.Call.Return(run)
	return _c
}
