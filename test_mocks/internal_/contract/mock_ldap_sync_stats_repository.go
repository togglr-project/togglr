// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggl/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLDAPSyncStatsRepository creates a new instance of MockLDAPSyncStatsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLDAPSyncStatsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLDAPSyncStatsRepository {
	mock := &MockLDAPSyncStatsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLDAPSyncStatsRepository is an autogenerated mock type for the LDAPSyncStatsRepository type
type MockLDAPSyncStatsRepository struct {
	mock.Mock
}

type MockLDAPSyncStatsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLDAPSyncStatsRepository) EXPECT() *MockLDAPSyncStatsRepository_Expecter {
	return &MockLDAPSyncStatsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockLDAPSyncStatsRepository
func (_mock *MockLDAPSyncStatsRepository) Create(ctx context.Context, stats domain.LDAPSyncStats) (domain.LDAPSyncStats, error) {
	ret := _mock.Called(ctx, stats)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.LDAPSyncStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncStats) (domain.LDAPSyncStats, error)); ok {
		return returnFunc(ctx, stats)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncStats) domain.LDAPSyncStats); ok {
		r0 = returnFunc(ctx, stats)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncStats)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LDAPSyncStats) error); ok {
		r1 = returnFunc(ctx, stats)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncStatsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLDAPSyncStatsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - stats domain.LDAPSyncStats
func (_e *MockLDAPSyncStatsRepository_Expecter) Create(ctx interface{}, stats interface{}) *MockLDAPSyncStatsRepository_Create_Call {
	return &MockLDAPSyncStatsRepository_Create_Call{Call: _e.mock.On("Create", ctx, stats)}
}

func (_c *MockLDAPSyncStatsRepository_Create_Call) Run(run func(ctx context.Context, stats domain.LDAPSyncStats)) *MockLDAPSyncStatsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LDAPSyncStats
		if args[1] != nil {
			arg1 = args[1].(domain.LDAPSyncStats)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncStatsRepository_Create_Call) Return(lDAPSyncStats domain.LDAPSyncStats, err error) *MockLDAPSyncStatsRepository_Create_Call {
	_c.Call.Return(lDAPSyncStats, err)
	return _c
}

func (_c *MockLDAPSyncStatsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, stats domain.LDAPSyncStats) (domain.LDAPSyncStats, error)) *MockLDAPSyncStatsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySyncSessionID provides a mock function for the type MockLDAPSyncStatsRepository
func (_mock *MockLDAPSyncStatsRepository) GetBySyncSessionID(ctx context.Context, syncSessionID string) (domain.LDAPSyncStats, error) {
	ret := _mock.Called(ctx, syncSessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySyncSessionID")
	}

	var r0 domain.LDAPSyncStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.LDAPSyncStats, error)); ok {
		return returnFunc(ctx, syncSessionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.LDAPSyncStats); ok {
		r0 = returnFunc(ctx, syncSessionID)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncStats)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, syncSessionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncStatsRepository_GetBySyncSessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySyncSessionID'
type MockLDAPSyncStatsRepository_GetBySyncSessionID_Call struct {
	*mock.Call
}

// GetBySyncSessionID is a helper method to define mock.On call
//   - ctx context.Context
//   - syncSessionID string
func (_e *MockLDAPSyncStatsRepository_Expecter) GetBySyncSessionID(ctx interface{}, syncSessionID interface{}) *MockLDAPSyncStatsRepository_GetBySyncSessionID_Call {
	return &MockLDAPSyncStatsRepository_GetBySyncSessionID_Call{Call: _e.mock.On("GetBySyncSessionID", ctx, syncSessionID)}
}

func (_c *MockLDAPSyncStatsRepository_GetBySyncSessionID_Call) Run(run func(ctx context.Context, syncSessionID string)) *MockLDAPSyncStatsRepository_GetBySyncSessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncStatsRepository_GetBySyncSessionID_Call) Return(lDAPSyncStats domain.LDAPSyncStats, err error) *MockLDAPSyncStatsRepository_GetBySyncSessionID_Call {
	_c.Call.Return(lDAPSyncStats, err)
	return _c
}

func (_c *MockLDAPSyncStatsRepository_GetBySyncSessionID_Call) RunAndReturn(run func(ctx context.Context, syncSessionID string) (domain.LDAPSyncStats, error)) *MockLDAPSyncStatsRepository_GetBySyncSessionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function for the type MockLDAPSyncStatsRepository
func (_mock *MockLDAPSyncStatsRepository) GetStatistics(ctx context.Context) (domain.LDAPStatistics, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 domain.LDAPStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.LDAPStatistics, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.LDAPStatistics); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.LDAPStatistics)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncStatsRepository_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type MockLDAPSyncStatsRepository_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPSyncStatsRepository_Expecter) GetStatistics(ctx interface{}) *MockLDAPSyncStatsRepository_GetStatistics_Call {
	return &MockLDAPSyncStatsRepository_GetStatistics_Call{Call: _e.mock.On("GetStatistics", ctx)}
}

func (_c *MockLDAPSyncStatsRepository_GetStatistics_Call) Run(run func(ctx context.Context)) *MockLDAPSyncStatsRepository_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPSyncStatsRepository_GetStatistics_Call) Return(lDAPStatistics domain.LDAPStatistics, err error) *MockLDAPSyncStatsRepository_GetStatistics_Call {
	_c.Call.Return(lDAPStatistics, err)
	return _c
}

func (_c *MockLDAPSyncStatsRepository_GetStatistics_Call) RunAndReturn(run func(ctx context.Context) (domain.LDAPStatistics, error)) *MockLDAPSyncStatsRepository_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockLDAPSyncStatsRepository
func (_mock *MockLDAPSyncStatsRepository) List(ctx context.Context, limit int) ([]domain.LDAPSyncStats, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.LDAPSyncStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]domain.LDAPSyncStats, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []domain.LDAPSyncStats); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LDAPSyncStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncStatsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockLDAPSyncStatsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
func (_e *MockLDAPSyncStatsRepository_Expecter) List(ctx interface{}, limit interface{}) *MockLDAPSyncStatsRepository_List_Call {
	return &MockLDAPSyncStatsRepository_List_Call{Call: _e.mock.On("List", ctx, limit)}
}

func (_c *MockLDAPSyncStatsRepository_List_Call) Run(run func(ctx context.Context, limit int)) *MockLDAPSyncStatsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncStatsRepository_List_Call) Return(lDAPSyncStatss []domain.LDAPSyncStats, err error) *MockLDAPSyncStatsRepository_List_Call {
	_c.Call.Return(lDAPSyncStatss, err)
	return _c
}

func (_c *MockLDAPSyncStatsRepository_List_Call) RunAndReturn(run func(ctx context.Context, limit int) ([]domain.LDAPSyncStats, error)) *MockLDAPSyncStatsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockLDAPSyncStatsRepository
func (_mock *MockLDAPSyncStatsRepository) Update(ctx context.Context, stats domain.LDAPSyncStats) error {
	ret := _mock.Called(ctx, stats)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncStats) error); ok {
		r0 = returnFunc(ctx, stats)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPSyncStatsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLDAPSyncStatsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - stats domain.LDAPSyncStats
func (_e *MockLDAPSyncStatsRepository_Expecter) Update(ctx interface{}, stats interface{}) *MockLDAPSyncStatsRepository_Update_Call {
	return &MockLDAPSyncStatsRepository_Update_Call{Call: _e.mock.On("Update", ctx, stats)}
}

func (_c *MockLDAPSyncStatsRepository_Update_Call) Run(run func(ctx context.Context, stats domain.LDAPSyncStats)) *MockLDAPSyncStatsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LDAPSyncStats
		if args[1] != nil {
			arg1 = args[1].(domain.LDAPSyncStats)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncStatsRepository_Update_Call) Return(err error) *MockLDAPSyncStatsRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPSyncStatsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, stats domain.LDAPSyncStats) error) *MockLDAPSyncStatsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
