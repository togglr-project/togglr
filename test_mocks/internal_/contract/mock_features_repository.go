// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/contract"
	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFeaturesRepository creates a new instance of MockFeaturesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeaturesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeaturesRepository {
	mock := &MockFeaturesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeaturesRepository is an autogenerated mock type for the FeaturesRepository type
type MockFeaturesRepository struct {
	mock.Mock
}

type MockFeaturesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeaturesRepository) EXPECT() *MockFeaturesRepository_Expecter {
	return &MockFeaturesRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFeaturesRepository
func (_mock *MockFeaturesRepository) Create(ctx context.Context, feature domain.Feature) (domain.Feature, error) {
	ret := _mock.Called(ctx, feature)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature) (domain.Feature, error)); ok {
		return returnFunc(ctx, feature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature) domain.Feature); ok {
		r0 = returnFunc(ctx, feature)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Feature) error); ok {
		r1 = returnFunc(ctx, feature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFeaturesRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - feature domain.Feature
func (_e *MockFeaturesRepository_Expecter) Create(ctx interface{}, feature interface{}) *MockFeaturesRepository_Create_Call {
	return &MockFeaturesRepository_Create_Call{Call: _e.mock.On("Create", ctx, feature)}
}

func (_c *MockFeaturesRepository_Create_Call) Run(run func(ctx context.Context, feature domain.Feature)) *MockFeaturesRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Feature
		if args[1] != nil {
			arg1 = args[1].(domain.Feature)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesRepository_Create_Call) Return(feature1 domain.Feature, err error) *MockFeaturesRepository_Create_Call {
	_c.Call.Return(feature1, err)
	return _c
}

func (_c *MockFeaturesRepository_Create_Call) RunAndReturn(run func(ctx context.Context, feature domain.Feature) (domain.Feature, error)) *MockFeaturesRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockFeaturesRepository
func (_mock *MockFeaturesRepository) Delete(ctx context.Context, id domain.FeatureID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeaturesRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFeaturesRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
func (_e *MockFeaturesRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockFeaturesRepository_Delete_Call {
	return &MockFeaturesRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockFeaturesRepository_Delete_Call) Run(run func(ctx context.Context, id domain.FeatureID)) *MockFeaturesRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesRepository_Delete_Call) Return(err error) *MockFeaturesRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeaturesRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID) error) *MockFeaturesRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockFeaturesRepository
func (_mock *MockFeaturesRepository) GetByID(ctx context.Context, id domain.FeatureID) (domain.Feature, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) (domain.Feature, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) domain.Feature); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockFeaturesRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureID
func (_e *MockFeaturesRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockFeaturesRepository_GetByID_Call {
	return &MockFeaturesRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockFeaturesRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.FeatureID)) *MockFeaturesRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesRepository_GetByID_Call) Return(feature domain.Feature, err error) *MockFeaturesRepository_GetByID_Call {
	_c.Call.Return(feature, err)
	return _c
}

func (_c *MockFeaturesRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureID) (domain.Feature, error)) *MockFeaturesRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByKey provides a mock function for the type MockFeaturesRepository
func (_mock *MockFeaturesRepository) GetByKey(ctx context.Context, key string) (domain.Feature, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetByKey")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Feature, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Feature); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesRepository_GetByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByKey'
type MockFeaturesRepository_GetByKey_Call struct {
	*mock.Call
}

// GetByKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockFeaturesRepository_Expecter) GetByKey(ctx interface{}, key interface{}) *MockFeaturesRepository_GetByKey_Call {
	return &MockFeaturesRepository_GetByKey_Call{Call: _e.mock.On("GetByKey", ctx, key)}
}

func (_c *MockFeaturesRepository_GetByKey_Call) Run(run func(ctx context.Context, key string)) *MockFeaturesRepository_GetByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesRepository_GetByKey_Call) Return(feature domain.Feature, err error) *MockFeaturesRepository_GetByKey_Call {
	_c.Call.Return(feature, err)
	return _c
}

func (_c *MockFeaturesRepository_GetByKey_Call) RunAndReturn(run func(ctx context.Context, key string) (domain.Feature, error)) *MockFeaturesRepository_GetByKey_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockFeaturesRepository
func (_mock *MockFeaturesRepository) List(ctx context.Context) ([]domain.Feature, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Feature, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Feature); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFeaturesRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeaturesRepository_Expecter) List(ctx interface{}) *MockFeaturesRepository_List_Call {
	return &MockFeaturesRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockFeaturesRepository_List_Call) Run(run func(ctx context.Context)) *MockFeaturesRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeaturesRepository_List_Call) Return(features []domain.Feature, err error) *MockFeaturesRepository_List_Call {
	_c.Call.Return(features, err)
	return _c
}

func (_c *MockFeaturesRepository_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Feature, error)) *MockFeaturesRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectID provides a mock function for the type MockFeaturesRepository
func (_mock *MockFeaturesRepository) ListByProjectID(ctx context.Context, projectID domain.ProjectID) ([]domain.Feature, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectID")
	}

	var r0 []domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) ([]domain.Feature, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) []domain.Feature); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesRepository_ListByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectID'
type MockFeaturesRepository_ListByProjectID_Call struct {
	*mock.Call
}

// ListByProjectID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockFeaturesRepository_Expecter) ListByProjectID(ctx interface{}, projectID interface{}) *MockFeaturesRepository_ListByProjectID_Call {
	return &MockFeaturesRepository_ListByProjectID_Call{Call: _e.mock.On("ListByProjectID", ctx, projectID)}
}

func (_c *MockFeaturesRepository_ListByProjectID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockFeaturesRepository_ListByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesRepository_ListByProjectID_Call) Return(features []domain.Feature, err error) *MockFeaturesRepository_ListByProjectID_Call {
	_c.Call.Return(features, err)
	return _c
}

func (_c *MockFeaturesRepository_ListByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) ([]domain.Feature, error)) *MockFeaturesRepository_ListByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectIDFiltered provides a mock function for the type MockFeaturesRepository
func (_mock *MockFeaturesRepository) ListByProjectIDFiltered(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter) ([]domain.Feature, int, error) {
	ret := _mock.Called(ctx, projectID, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectIDFiltered")
	}

	var r0 []domain.Feature
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) ([]domain.Feature, int, error)); ok {
		return returnFunc(ctx, projectID, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) []domain.Feature); ok {
		r0 = returnFunc(ctx, projectID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) int); ok {
		r1 = returnFunc(ctx, projectID, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.ProjectID, contract.FeaturesListFilter) error); ok {
		r2 = returnFunc(ctx, projectID, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeaturesRepository_ListByProjectIDFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectIDFiltered'
type MockFeaturesRepository_ListByProjectIDFiltered_Call struct {
	*mock.Call
}

// ListByProjectIDFiltered is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - filter contract.FeaturesListFilter
func (_e *MockFeaturesRepository_Expecter) ListByProjectIDFiltered(ctx interface{}, projectID interface{}, filter interface{}) *MockFeaturesRepository_ListByProjectIDFiltered_Call {
	return &MockFeaturesRepository_ListByProjectIDFiltered_Call{Call: _e.mock.On("ListByProjectIDFiltered", ctx, projectID, filter)}
}

func (_c *MockFeaturesRepository_ListByProjectIDFiltered_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter)) *MockFeaturesRepository_ListByProjectIDFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 contract.FeaturesListFilter
		if args[2] != nil {
			arg2 = args[2].(contract.FeaturesListFilter)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeaturesRepository_ListByProjectIDFiltered_Call) Return(features []domain.Feature, n int, err error) *MockFeaturesRepository_ListByProjectIDFiltered_Call {
	_c.Call.Return(features, n, err)
	return _c
}

func (_c *MockFeaturesRepository_ListByProjectIDFiltered_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, filter contract.FeaturesListFilter) ([]domain.Feature, int, error)) *MockFeaturesRepository_ListByProjectIDFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFeaturesRepository
func (_mock *MockFeaturesRepository) Update(ctx context.Context, feature domain.Feature) (domain.Feature, error) {
	ret := _mock.Called(ctx, feature)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Feature
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature) (domain.Feature, error)); ok {
		return returnFunc(ctx, feature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Feature) domain.Feature); ok {
		r0 = returnFunc(ctx, feature)
	} else {
		r0 = ret.Get(0).(domain.Feature)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Feature) error); ok {
		r1 = returnFunc(ctx, feature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFeaturesRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - feature domain.Feature
func (_e *MockFeaturesRepository_Expecter) Update(ctx interface{}, feature interface{}) *MockFeaturesRepository_Update_Call {
	return &MockFeaturesRepository_Update_Call{Call: _e.mock.On("Update", ctx, feature)}
}

func (_c *MockFeaturesRepository_Update_Call) Run(run func(ctx context.Context, feature domain.Feature)) *MockFeaturesRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Feature
		if args[1] != nil {
			arg1 = args[1].(domain.Feature)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeaturesRepository_Update_Call) Return(feature1 domain.Feature, err error) *MockFeaturesRepository_Update_Call {
	_c.Call.Return(feature1, err)
	return _c
}

func (_c *MockFeaturesRepository_Update_Call) RunAndReturn(run func(ctx context.Context, feature domain.Feature) (domain.Feature, error)) *MockFeaturesRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
