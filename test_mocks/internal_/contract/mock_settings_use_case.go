// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockSettingsUseCase creates a new instance of MockSettingsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSettingsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSettingsUseCase {
	mock := &MockSettingsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSettingsUseCase is an autogenerated mock type for the SettingsUseCase type
type MockSettingsUseCase struct {
	mock.Mock
}

type MockSettingsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSettingsUseCase) EXPECT() *MockSettingsUseCase_Expecter {
	return &MockSettingsUseCase_Expecter{mock: &_m.Mock}
}

// DeleteSetting provides a mock function for the type MockSettingsUseCase
func (_mock *MockSettingsUseCase) DeleteSetting(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSettingsUseCase_DeleteSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSetting'
type MockSettingsUseCase_DeleteSetting_Call struct {
	*mock.Call
}

// DeleteSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSettingsUseCase_Expecter) DeleteSetting(ctx interface{}, name interface{}) *MockSettingsUseCase_DeleteSetting_Call {
	return &MockSettingsUseCase_DeleteSetting_Call{Call: _e.mock.On("DeleteSetting", ctx, name)}
}

func (_c *MockSettingsUseCase_DeleteSetting_Call) Run(run func(ctx context.Context, name string)) *MockSettingsUseCase_DeleteSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSettingsUseCase_DeleteSetting_Call) Return(err error) *MockSettingsUseCase_DeleteSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSettingsUseCase_DeleteSetting_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockSettingsUseCase_DeleteSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetLDAPConfig provides a mock function for the type MockSettingsUseCase
func (_mock *MockSettingsUseCase) GetLDAPConfig(ctx context.Context) (*domain.LDAPConfig, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLDAPConfig")
	}

	var r0 *domain.LDAPConfig
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*domain.LDAPConfig, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *domain.LDAPConfig); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LDAPConfig)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSettingsUseCase_GetLDAPConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLDAPConfig'
type MockSettingsUseCase_GetLDAPConfig_Call struct {
	*mock.Call
}

// GetLDAPConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSettingsUseCase_Expecter) GetLDAPConfig(ctx interface{}) *MockSettingsUseCase_GetLDAPConfig_Call {
	return &MockSettingsUseCase_GetLDAPConfig_Call{Call: _e.mock.On("GetLDAPConfig", ctx)}
}

func (_c *MockSettingsUseCase_GetLDAPConfig_Call) Run(run func(ctx context.Context)) *MockSettingsUseCase_GetLDAPConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSettingsUseCase_GetLDAPConfig_Call) Return(lDAPConfig *domain.LDAPConfig, err error) *MockSettingsUseCase_GetLDAPConfig_Call {
	_c.Call.Return(lDAPConfig, err)
	return _c
}

func (_c *MockSettingsUseCase_GetLDAPConfig_Call) RunAndReturn(run func(ctx context.Context) (*domain.LDAPConfig, error)) *MockSettingsUseCase_GetLDAPConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetSetting provides a mock function for the type MockSettingsUseCase
func (_mock *MockSettingsUseCase) GetSetting(ctx context.Context, name string) (*domain.Setting, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSetting")
	}

	var r0 *domain.Setting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Setting, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Setting); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Setting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSettingsUseCase_GetSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSetting'
type MockSettingsUseCase_GetSetting_Call struct {
	*mock.Call
}

// GetSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSettingsUseCase_Expecter) GetSetting(ctx interface{}, name interface{}) *MockSettingsUseCase_GetSetting_Call {
	return &MockSettingsUseCase_GetSetting_Call{Call: _e.mock.On("GetSetting", ctx, name)}
}

func (_c *MockSettingsUseCase_GetSetting_Call) Run(run func(ctx context.Context, name string)) *MockSettingsUseCase_GetSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSettingsUseCase_GetSetting_Call) Return(setting *domain.Setting, err error) *MockSettingsUseCase_GetSetting_Call {
	_c.Call.Return(setting, err)
	return _c
}

func (_c *MockSettingsUseCase_GetSetting_Call) RunAndReturn(run func(ctx context.Context, name string) (*domain.Setting, error)) *MockSettingsUseCase_GetSetting_Call {
	_c.Call.Return(run)
	return _c
}

// ListSettings provides a mock function for the type MockSettingsUseCase
func (_mock *MockSettingsUseCase) ListSettings(ctx context.Context) ([]*domain.Setting, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSettings")
	}

	var r0 []*domain.Setting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.Setting, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.Setting); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Setting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSettingsUseCase_ListSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSettings'
type MockSettingsUseCase_ListSettings_Call struct {
	*mock.Call
}

// ListSettings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSettingsUseCase_Expecter) ListSettings(ctx interface{}) *MockSettingsUseCase_ListSettings_Call {
	return &MockSettingsUseCase_ListSettings_Call{Call: _e.mock.On("ListSettings", ctx)}
}

func (_c *MockSettingsUseCase_ListSettings_Call) Run(run func(ctx context.Context)) *MockSettingsUseCase_ListSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSettingsUseCase_ListSettings_Call) Return(settings []*domain.Setting, err error) *MockSettingsUseCase_ListSettings_Call {
	_c.Call.Return(settings, err)
	return _c
}

func (_c *MockSettingsUseCase_ListSettings_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.Setting, error)) *MockSettingsUseCase_ListSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SetSetting provides a mock function for the type MockSettingsUseCase
func (_mock *MockSettingsUseCase) SetSetting(ctx context.Context, name string, value any, description string) error {
	ret := _mock.Called(ctx, name, value, description)

	if len(ret) == 0 {
		panic("no return value specified for SetSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, string) error); ok {
		r0 = returnFunc(ctx, name, value, description)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSettingsUseCase_SetSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSetting'
type MockSettingsUseCase_SetSetting_Call struct {
	*mock.Call
}

// SetSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - value any
//   - description string
func (_e *MockSettingsUseCase_Expecter) SetSetting(ctx interface{}, name interface{}, value interface{}, description interface{}) *MockSettingsUseCase_SetSetting_Call {
	return &MockSettingsUseCase_SetSetting_Call{Call: _e.mock.On("SetSetting", ctx, name, value, description)}
}

func (_c *MockSettingsUseCase_SetSetting_Call) Run(run func(ctx context.Context, name string, value any, description string)) *MockSettingsUseCase_SetSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSettingsUseCase_SetSetting_Call) Return(err error) *MockSettingsUseCase_SetSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSettingsUseCase_SetSetting_Call) RunAndReturn(run func(ctx context.Context, name string, value any, description string) error) *MockSettingsUseCase_SetSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLDAPConfig provides a mock function for the type MockSettingsUseCase
func (_mock *MockSettingsUseCase) UpdateLDAPConfig(ctx context.Context, config *domain.LDAPConfig) error {
	ret := _mock.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLDAPConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.LDAPConfig) error); ok {
		r0 = returnFunc(ctx, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSettingsUseCase_UpdateLDAPConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLDAPConfig'
type MockSettingsUseCase_UpdateLDAPConfig_Call struct {
	*mock.Call
}

// UpdateLDAPConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - config *domain.LDAPConfig
func (_e *MockSettingsUseCase_Expecter) UpdateLDAPConfig(ctx interface{}, config interface{}) *MockSettingsUseCase_UpdateLDAPConfig_Call {
	return &MockSettingsUseCase_UpdateLDAPConfig_Call{Call: _e.mock.On("UpdateLDAPConfig", ctx, config)}
}

func (_c *MockSettingsUseCase_UpdateLDAPConfig_Call) Run(run func(ctx context.Context, config *domain.LDAPConfig)) *MockSettingsUseCase_UpdateLDAPConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.LDAPConfig
		if args[1] != nil {
			arg1 = args[1].(*domain.LDAPConfig)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSettingsUseCase_UpdateLDAPConfig_Call) Return(err error) *MockSettingsUseCase_UpdateLDAPConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSettingsUseCase_UpdateLDAPConfig_Call) RunAndReturn(run func(ctx context.Context, config *domain.LDAPConfig) error) *MockSettingsUseCase_UpdateLDAPConfig_Call {
	_c.Call.Return(run)
	return _c
}
