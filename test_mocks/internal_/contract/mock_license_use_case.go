// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockLicenseUseCase creates a new instance of MockLicenseUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLicenseUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLicenseUseCase {
	mock := &MockLicenseUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLicenseUseCase is an autogenerated mock type for the LicenseUseCase type
type MockLicenseUseCase struct {
	mock.Mock
}

type MockLicenseUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLicenseUseCase) EXPECT() *MockLicenseUseCase_Expecter {
	return &MockLicenseUseCase_Expecter{mock: &_m.Mock}
}

// GetLicenseStatus provides a mock function for the type MockLicenseUseCase
func (_mock *MockLicenseUseCase) GetLicenseStatus(ctx context.Context) (domain.LicenseStatus, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseStatus")
	}

	var r0 domain.LicenseStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.LicenseStatus, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.LicenseStatus); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.LicenseStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicenseUseCase_GetLicenseStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseStatus'
type MockLicenseUseCase_GetLicenseStatus_Call struct {
	*mock.Call
}

// GetLicenseStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseUseCase_Expecter) GetLicenseStatus(ctx interface{}) *MockLicenseUseCase_GetLicenseStatus_Call {
	return &MockLicenseUseCase_GetLicenseStatus_Call{Call: _e.mock.On("GetLicenseStatus", ctx)}
}

func (_c *MockLicenseUseCase_GetLicenseStatus_Call) Run(run func(ctx context.Context)) *MockLicenseUseCase_GetLicenseStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseUseCase_GetLicenseStatus_Call) Return(licenseStatus domain.LicenseStatus, err error) *MockLicenseUseCase_GetLicenseStatus_Call {
	_c.Call.Return(licenseStatus, err)
	return _c
}

func (_c *MockLicenseUseCase_GetLicenseStatus_Call) RunAndReturn(run func(ctx context.Context) (domain.LicenseStatus, error)) *MockLicenseUseCase_GetLicenseStatus_Call {
	_c.Call.Return(run)
	return _c
}

// IsFeatureAvailable provides a mock function for the type MockLicenseUseCase
func (_mock *MockLicenseUseCase) IsFeatureAvailable(ctx context.Context, feature domain.LicenseFeature) (bool, error) {
	ret := _mock.Called(ctx, feature)

	if len(ret) == 0 {
		panic("no return value specified for IsFeatureAvailable")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LicenseFeature) (bool, error)); ok {
		return returnFunc(ctx, feature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LicenseFeature) bool); ok {
		r0 = returnFunc(ctx, feature)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LicenseFeature) error); ok {
		r1 = returnFunc(ctx, feature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicenseUseCase_IsFeatureAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFeatureAvailable'
type MockLicenseUseCase_IsFeatureAvailable_Call struct {
	*mock.Call
}

// IsFeatureAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - feature domain.LicenseFeature
func (_e *MockLicenseUseCase_Expecter) IsFeatureAvailable(ctx interface{}, feature interface{}) *MockLicenseUseCase_IsFeatureAvailable_Call {
	return &MockLicenseUseCase_IsFeatureAvailable_Call{Call: _e.mock.On("IsFeatureAvailable", ctx, feature)}
}

func (_c *MockLicenseUseCase_IsFeatureAvailable_Call) Run(run func(ctx context.Context, feature domain.LicenseFeature)) *MockLicenseUseCase_IsFeatureAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LicenseFeature
		if args[1] != nil {
			arg1 = args[1].(domain.LicenseFeature)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicenseUseCase_IsFeatureAvailable_Call) Return(b bool, err error) *MockLicenseUseCase_IsFeatureAvailable_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockLicenseUseCase_IsFeatureAvailable_Call) RunAndReturn(run func(ctx context.Context, feature domain.LicenseFeature) (bool, error)) *MockLicenseUseCase_IsFeatureAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLicense provides a mock function for the type MockLicenseUseCase
func (_mock *MockLicenseUseCase) UpdateLicense(ctx context.Context, licenseText string) (domain.LicenseStatus, error) {
	ret := _mock.Called(ctx, licenseText)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicense")
	}

	var r0 domain.LicenseStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.LicenseStatus, error)); ok {
		return returnFunc(ctx, licenseText)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.LicenseStatus); ok {
		r0 = returnFunc(ctx, licenseText)
	} else {
		r0 = ret.Get(0).(domain.LicenseStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, licenseText)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicenseUseCase_UpdateLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLicense'
type MockLicenseUseCase_UpdateLicense_Call struct {
	*mock.Call
}

// UpdateLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - licenseText string
func (_e *MockLicenseUseCase_Expecter) UpdateLicense(ctx interface{}, licenseText interface{}) *MockLicenseUseCase_UpdateLicense_Call {
	return &MockLicenseUseCase_UpdateLicense_Call{Call: _e.mock.On("UpdateLicense", ctx, licenseText)}
}

func (_c *MockLicenseUseCase_UpdateLicense_Call) Run(run func(ctx context.Context, licenseText string)) *MockLicenseUseCase_UpdateLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicenseUseCase_UpdateLicense_Call) Return(licenseStatus domain.LicenseStatus, err error) *MockLicenseUseCase_UpdateLicense_Call {
	_c.Call.Return(licenseStatus, err)
	return _c
}

func (_c *MockLicenseUseCase_UpdateLicense_Call) RunAndReturn(run func(ctx context.Context, licenseText string) (domain.LicenseStatus, error)) *MockLicenseUseCase_UpdateLicense_Call {
	_c.Call.Return(run)
	return _c
}
