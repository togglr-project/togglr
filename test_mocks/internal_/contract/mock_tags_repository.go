// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockTagsRepository creates a new instance of MockTagsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagsRepository {
	mock := &MockTagsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTagsRepository is an autogenerated mock type for the TagsRepository type
type MockTagsRepository struct {
	mock.Mock
}

type MockTagsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagsRepository) EXPECT() *MockTagsRepository_Expecter {
	return &MockTagsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTagsRepository
func (_mock *MockTagsRepository) Create(ctx context.Context, tag *domain.TagDTO) (domain.TagID, error) {
	ret := _mock.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.TagID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.TagDTO) (domain.TagID, error)); ok {
		return returnFunc(ctx, tag)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.TagDTO) domain.TagID); ok {
		r0 = returnFunc(ctx, tag)
	} else {
		r0 = ret.Get(0).(domain.TagID)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.TagDTO) error); ok {
		r1 = returnFunc(ctx, tag)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTagsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tag *domain.TagDTO
func (_e *MockTagsRepository_Expecter) Create(ctx interface{}, tag interface{}) *MockTagsRepository_Create_Call {
	return &MockTagsRepository_Create_Call{Call: _e.mock.On("Create", ctx, tag)}
}

func (_c *MockTagsRepository_Create_Call) Run(run func(ctx context.Context, tag *domain.TagDTO)) *MockTagsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.TagDTO
		if args[1] != nil {
			arg1 = args[1].(*domain.TagDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagsRepository_Create_Call) Return(tagID domain.TagID, err error) *MockTagsRepository_Create_Call {
	_c.Call.Return(tagID, err)
	return _c
}

func (_c *MockTagsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, tag *domain.TagDTO) (domain.TagID, error)) *MockTagsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFromCategories provides a mock function for the type MockTagsRepository
func (_mock *MockTagsRepository) CreateFromCategories(ctx context.Context, projectID domain.ProjectID) error {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CreateFromCategories")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagsRepository_CreateFromCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFromCategories'
type MockTagsRepository_CreateFromCategories_Call struct {
	*mock.Call
}

// CreateFromCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockTagsRepository_Expecter) CreateFromCategories(ctx interface{}, projectID interface{}) *MockTagsRepository_CreateFromCategories_Call {
	return &MockTagsRepository_CreateFromCategories_Call{Call: _e.mock.On("CreateFromCategories", ctx, projectID)}
}

func (_c *MockTagsRepository_CreateFromCategories_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockTagsRepository_CreateFromCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagsRepository_CreateFromCategories_Call) Return(err error) *MockTagsRepository_CreateFromCategories_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagsRepository_CreateFromCategories_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) error) *MockTagsRepository_CreateFromCategories_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTagsRepository
func (_mock *MockTagsRepository) Delete(ctx context.Context, id domain.TagID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTagsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.TagID
func (_e *MockTagsRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockTagsRepository_Delete_Call {
	return &MockTagsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTagsRepository_Delete_Call) Run(run func(ctx context.Context, id domain.TagID)) *MockTagsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TagID
		if args[1] != nil {
			arg1 = args[1].(domain.TagID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagsRepository_Delete_Call) Return(err error) *MockTagsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagsRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.TagID) error) *MockTagsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockTagsRepository
func (_mock *MockTagsRepository) GetByID(ctx context.Context, id domain.TagID) (domain.Tag, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID) (domain.Tag, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID) domain.Tag); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Tag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TagID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTagsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.TagID
func (_e *MockTagsRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockTagsRepository_GetByID_Call {
	return &MockTagsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTagsRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.TagID)) *MockTagsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TagID
		if args[1] != nil {
			arg1 = args[1].(domain.TagID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagsRepository_GetByID_Call) Return(tag domain.Tag, err error) *MockTagsRepository_GetByID_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockTagsRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.TagID) (domain.Tag, error)) *MockTagsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectAndSlug provides a mock function for the type MockTagsRepository
func (_mock *MockTagsRepository) GetByProjectAndSlug(ctx context.Context, projectID domain.ProjectID, slug string) (domain.Tag, error) {
	ret := _mock.Called(ctx, projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectAndSlug")
	}

	var r0 domain.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) (domain.Tag, error)); ok {
		return returnFunc(ctx, projectID, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string) domain.Tag); ok {
		r0 = returnFunc(ctx, projectID, slug)
	} else {
		r0 = ret.Get(0).(domain.Tag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string) error); ok {
		r1 = returnFunc(ctx, projectID, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsRepository_GetByProjectAndSlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectAndSlug'
type MockTagsRepository_GetByProjectAndSlug_Call struct {
	*mock.Call
}

// GetByProjectAndSlug is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - slug string
func (_e *MockTagsRepository_Expecter) GetByProjectAndSlug(ctx interface{}, projectID interface{}, slug interface{}) *MockTagsRepository_GetByProjectAndSlug_Call {
	return &MockTagsRepository_GetByProjectAndSlug_Call{Call: _e.mock.On("GetByProjectAndSlug", ctx, projectID, slug)}
}

func (_c *MockTagsRepository_GetByProjectAndSlug_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, slug string)) *MockTagsRepository_GetByProjectAndSlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagsRepository_GetByProjectAndSlug_Call) Return(tag domain.Tag, err error) *MockTagsRepository_GetByProjectAndSlug_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockTagsRepository_GetByProjectAndSlug_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, slug string) (domain.Tag, error)) *MockTagsRepository_GetByProjectAndSlug_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProject provides a mock function for the type MockTagsRepository
func (_mock *MockTagsRepository) ListByProject(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID) ([]domain.Tag, error) {
	ret := _mock.Called(ctx, projectID, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProject")
	}

	var r0 []domain.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, *domain.CategoryID) ([]domain.Tag, error)); ok {
		return returnFunc(ctx, projectID, categoryID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, *domain.CategoryID) []domain.Tag); ok {
		r0 = returnFunc(ctx, projectID, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, *domain.CategoryID) error); ok {
		r1 = returnFunc(ctx, projectID, categoryID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsRepository_ListByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProject'
type MockTagsRepository_ListByProject_Call struct {
	*mock.Call
}

// ListByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - categoryID *domain.CategoryID
func (_e *MockTagsRepository_Expecter) ListByProject(ctx interface{}, projectID interface{}, categoryID interface{}) *MockTagsRepository_ListByProject_Call {
	return &MockTagsRepository_ListByProject_Call{Call: _e.mock.On("ListByProject", ctx, projectID, categoryID)}
}

func (_c *MockTagsRepository_ListByProject_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID)) *MockTagsRepository_ListByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 *domain.CategoryID
		if args[2] != nil {
			arg2 = args[2].(*domain.CategoryID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagsRepository_ListByProject_Call) Return(tags []domain.Tag, err error) *MockTagsRepository_ListByProject_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockTagsRepository_ListByProject_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID) ([]domain.Tag, error)) *MockTagsRepository_ListByProject_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTagsRepository
func (_mock *MockTagsRepository) Update(ctx context.Context, id domain.TagID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string) error {
	ret := _mock.Called(ctx, id, categoryID, name, slug, description, color)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID, *domain.CategoryID, string, string, *string, *string) error); ok {
		r0 = returnFunc(ctx, id, categoryID, name, slug, description, color)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTagsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.TagID
//   - categoryID *domain.CategoryID
//   - name string
//   - slug string
//   - description *string
//   - color *string
func (_e *MockTagsRepository_Expecter) Update(ctx interface{}, id interface{}, categoryID interface{}, name interface{}, slug interface{}, description interface{}, color interface{}) *MockTagsRepository_Update_Call {
	return &MockTagsRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, categoryID, name, slug, description, color)}
}

func (_c *MockTagsRepository_Update_Call) Run(run func(ctx context.Context, id domain.TagID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string)) *MockTagsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TagID
		if args[1] != nil {
			arg1 = args[1].(domain.TagID)
		}
		var arg2 *domain.CategoryID
		if args[2] != nil {
			arg2 = args[2].(*domain.CategoryID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		var arg6 *string
		if args[6] != nil {
			arg6 = args[6].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockTagsRepository_Update_Call) Return(err error) *MockTagsRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id domain.TagID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string) error) *MockTagsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
