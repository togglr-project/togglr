// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRulesUseCase creates a new instance of MockRulesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRulesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRulesUseCase {
	mock := &MockRulesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRulesUseCase is an autogenerated mock type for the RulesUseCase type
type MockRulesUseCase struct {
	mock.Mock
}

type MockRulesUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRulesUseCase) EXPECT() *MockRulesUseCase_Expecter {
	return &MockRulesUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRulesUseCase
func (_mock *MockRulesUseCase) Create(ctx context.Context, rule domain.Rule) (domain.Rule, error) {
	ret := _mock.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Rule) (domain.Rule, error)); ok {
		return returnFunc(ctx, rule)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Rule) domain.Rule); ok {
		r0 = returnFunc(ctx, rule)
	} else {
		r0 = ret.Get(0).(domain.Rule)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Rule) error); ok {
		r1 = returnFunc(ctx, rule)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRulesUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - rule domain.Rule
func (_e *MockRulesUseCase_Expecter) Create(ctx interface{}, rule interface{}) *MockRulesUseCase_Create_Call {
	return &MockRulesUseCase_Create_Call{Call: _e.mock.On("Create", ctx, rule)}
}

func (_c *MockRulesUseCase_Create_Call) Run(run func(ctx context.Context, rule domain.Rule)) *MockRulesUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Rule
		if args[1] != nil {
			arg1 = args[1].(domain.Rule)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesUseCase_Create_Call) Return(rule1 domain.Rule, err error) *MockRulesUseCase_Create_Call {
	_c.Call.Return(rule1, err)
	return _c
}

func (_c *MockRulesUseCase_Create_Call) RunAndReturn(run func(ctx context.Context, rule domain.Rule) (domain.Rule, error)) *MockRulesUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRulesUseCase
func (_mock *MockRulesUseCase) Delete(ctx context.Context, id domain.RuleID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRulesUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRulesUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.RuleID
func (_e *MockRulesUseCase_Expecter) Delete(ctx interface{}, id interface{}) *MockRulesUseCase_Delete_Call {
	return &MockRulesUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockRulesUseCase_Delete_Call) Run(run func(ctx context.Context, id domain.RuleID)) *MockRulesUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RuleID
		if args[1] != nil {
			arg1 = args[1].(domain.RuleID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesUseCase_Delete_Call) Return(err error) *MockRulesUseCase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRulesUseCase_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.RuleID) error) *MockRulesUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockRulesUseCase
func (_mock *MockRulesUseCase) GetByID(ctx context.Context, id domain.RuleID) (domain.Rule, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleID) (domain.Rule, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleID) domain.Rule); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Rule)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.RuleID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesUseCase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRulesUseCase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.RuleID
func (_e *MockRulesUseCase_Expecter) GetByID(ctx interface{}, id interface{}) *MockRulesUseCase_GetByID_Call {
	return &MockRulesUseCase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockRulesUseCase_GetByID_Call) Run(run func(ctx context.Context, id domain.RuleID)) *MockRulesUseCase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RuleID
		if args[1] != nil {
			arg1 = args[1].(domain.RuleID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesUseCase_GetByID_Call) Return(rule domain.Rule, err error) *MockRulesUseCase_GetByID_Call {
	_c.Call.Return(rule, err)
	return _c
}

func (_c *MockRulesUseCase_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.RuleID) (domain.Rule, error)) *MockRulesUseCase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRulesUseCase
func (_mock *MockRulesUseCase) List(ctx context.Context) ([]domain.Rule, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Rule, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Rule); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRulesUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRulesUseCase_Expecter) List(ctx interface{}) *MockRulesUseCase_List_Call {
	return &MockRulesUseCase_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockRulesUseCase_List_Call) Run(run func(ctx context.Context)) *MockRulesUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRulesUseCase_List_Call) Return(rules []domain.Rule, err error) *MockRulesUseCase_List_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *MockRulesUseCase_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Rule, error)) *MockRulesUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFeatureID provides a mock function for the type MockRulesUseCase
func (_mock *MockRulesUseCase) ListByFeatureID(ctx context.Context, featureID domain.FeatureID) ([]domain.Rule, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFeatureID")
	}

	var r0 []domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) ([]domain.Rule, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) []domain.Rule); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesUseCase_ListByFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFeatureID'
type MockRulesUseCase_ListByFeatureID_Call struct {
	*mock.Call
}

// ListByFeatureID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockRulesUseCase_Expecter) ListByFeatureID(ctx interface{}, featureID interface{}) *MockRulesUseCase_ListByFeatureID_Call {
	return &MockRulesUseCase_ListByFeatureID_Call{Call: _e.mock.On("ListByFeatureID", ctx, featureID)}
}

func (_c *MockRulesUseCase_ListByFeatureID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockRulesUseCase_ListByFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesUseCase_ListByFeatureID_Call) Return(rules []domain.Rule, err error) *MockRulesUseCase_ListByFeatureID_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *MockRulesUseCase_ListByFeatureID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) ([]domain.Rule, error)) *MockRulesUseCase_ListByFeatureID_Call {
	_c.Call.Return(run)
	return _c
}

// SyncCustomized provides a mock function for the type MockRulesUseCase
func (_mock *MockRulesUseCase) SyncCustomized(ctx context.Context, id domain.RuleID) (domain.Rule, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SyncCustomized")
	}

	var r0 domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleID) (domain.Rule, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleID) domain.Rule); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Rule)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.RuleID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesUseCase_SyncCustomized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncCustomized'
type MockRulesUseCase_SyncCustomized_Call struct {
	*mock.Call
}

// SyncCustomized is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.RuleID
func (_e *MockRulesUseCase_Expecter) SyncCustomized(ctx interface{}, id interface{}) *MockRulesUseCase_SyncCustomized_Call {
	return &MockRulesUseCase_SyncCustomized_Call{Call: _e.mock.On("SyncCustomized", ctx, id)}
}

func (_c *MockRulesUseCase_SyncCustomized_Call) Run(run func(ctx context.Context, id domain.RuleID)) *MockRulesUseCase_SyncCustomized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RuleID
		if args[1] != nil {
			arg1 = args[1].(domain.RuleID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesUseCase_SyncCustomized_Call) Return(rule domain.Rule, err error) *MockRulesUseCase_SyncCustomized_Call {
	_c.Call.Return(rule, err)
	return _c
}

func (_c *MockRulesUseCase_SyncCustomized_Call) RunAndReturn(run func(ctx context.Context, id domain.RuleID) (domain.Rule, error)) *MockRulesUseCase_SyncCustomized_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRulesUseCase
func (_mock *MockRulesUseCase) Update(ctx context.Context, rule domain.Rule) (domain.Rule, error) {
	ret := _mock.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Rule) (domain.Rule, error)); ok {
		return returnFunc(ctx, rule)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Rule) domain.Rule); ok {
		r0 = returnFunc(ctx, rule)
	} else {
		r0 = ret.Get(0).(domain.Rule)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Rule) error); ok {
		r1 = returnFunc(ctx, rule)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRulesUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - rule domain.Rule
func (_e *MockRulesUseCase_Expecter) Update(ctx interface{}, rule interface{}) *MockRulesUseCase_Update_Call {
	return &MockRulesUseCase_Update_Call{Call: _e.mock.On("Update", ctx, rule)}
}

func (_c *MockRulesUseCase_Update_Call) Run(run func(ctx context.Context, rule domain.Rule)) *MockRulesUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Rule
		if args[1] != nil {
			arg1 = args[1].(domain.Rule)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRulesUseCase_Update_Call) Return(rule1 domain.Rule, err error) *MockRulesUseCase_Update_Call {
	_c.Call.Return(rule1, err)
	return _c
}

func (_c *MockRulesUseCase_Update_Call) RunAndReturn(run func(ctx context.Context, rule domain.Rule) (domain.Rule, error)) *MockRulesUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}
