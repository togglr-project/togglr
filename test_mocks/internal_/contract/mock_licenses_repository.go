// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggl/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLicensesRepository creates a new instance of MockLicensesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLicensesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLicensesRepository {
	mock := &MockLicensesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLicensesRepository is an autogenerated mock type for the LicensesRepository type
type MockLicensesRepository struct {
	mock.Mock
}

type MockLicensesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLicensesRepository) EXPECT() *MockLicensesRepository_Expecter {
	return &MockLicensesRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockLicensesRepository
func (_mock *MockLicensesRepository) Create(ctx context.Context, license domain.License) (domain.License, error) {
	ret := _mock.Called(ctx, license)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.License
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.License) (domain.License, error)); ok {
		return returnFunc(ctx, license)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.License) domain.License); ok {
		r0 = returnFunc(ctx, license)
	} else {
		r0 = ret.Get(0).(domain.License)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.License) error); ok {
		r1 = returnFunc(ctx, license)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicensesRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLicensesRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - license domain.License
func (_e *MockLicensesRepository_Expecter) Create(ctx interface{}, license interface{}) *MockLicensesRepository_Create_Call {
	return &MockLicensesRepository_Create_Call{Call: _e.mock.On("Create", ctx, license)}
}

func (_c *MockLicensesRepository_Create_Call) Run(run func(ctx context.Context, license domain.License)) *MockLicensesRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.License
		if args[1] != nil {
			arg1 = args[1].(domain.License)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicensesRepository_Create_Call) Return(license1 domain.License, err error) *MockLicensesRepository_Create_Call {
	_c.Call.Return(license1, err)
	return _c
}

func (_c *MockLicensesRepository_Create_Call) RunAndReturn(run func(ctx context.Context, license domain.License) (domain.License, error)) *MockLicensesRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockLicensesRepository
func (_mock *MockLicensesRepository) GetByID(ctx context.Context, id string) (domain.License, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.License
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.License, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.License); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.License)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicensesRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockLicensesRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockLicensesRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockLicensesRepository_GetByID_Call {
	return &MockLicensesRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockLicensesRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockLicensesRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicensesRepository_GetByID_Call) Return(license domain.License, err error) *MockLicensesRepository_GetByID_Call {
	_c.Call.Return(license, err)
	return _c
}

func (_c *MockLicensesRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (domain.License, error)) *MockLicensesRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastByExpiresAt provides a mock function for the type MockLicensesRepository
func (_mock *MockLicensesRepository) GetLastByExpiresAt(ctx context.Context) (domain.License, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastByExpiresAt")
	}

	var r0 domain.License
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.License, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.License); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.License)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicensesRepository_GetLastByExpiresAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastByExpiresAt'
type MockLicensesRepository_GetLastByExpiresAt_Call struct {
	*mock.Call
}

// GetLastByExpiresAt is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicensesRepository_Expecter) GetLastByExpiresAt(ctx interface{}) *MockLicensesRepository_GetLastByExpiresAt_Call {
	return &MockLicensesRepository_GetLastByExpiresAt_Call{Call: _e.mock.On("GetLastByExpiresAt", ctx)}
}

func (_c *MockLicensesRepository_GetLastByExpiresAt_Call) Run(run func(ctx context.Context)) *MockLicensesRepository_GetLastByExpiresAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicensesRepository_GetLastByExpiresAt_Call) Return(license domain.License, err error) *MockLicensesRepository_GetLastByExpiresAt_Call {
	_c.Call.Return(license, err)
	return _c
}

func (_c *MockLicensesRepository_GetLastByExpiresAt_Call) RunAndReturn(run func(ctx context.Context) (domain.License, error)) *MockLicensesRepository_GetLastByExpiresAt_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLicense provides a mock function for the type MockLicensesRepository
func (_mock *MockLicensesRepository) UpdateLicense(ctx context.Context, license domain.License) (domain.License, error) {
	ret := _mock.Called(ctx, license)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicense")
	}

	var r0 domain.License
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.License) (domain.License, error)); ok {
		return returnFunc(ctx, license)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.License) domain.License); ok {
		r0 = returnFunc(ctx, license)
	} else {
		r0 = ret.Get(0).(domain.License)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.License) error); ok {
		r1 = returnFunc(ctx, license)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicensesRepository_UpdateLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLicense'
type MockLicensesRepository_UpdateLicense_Call struct {
	*mock.Call
}

// UpdateLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - license domain.License
func (_e *MockLicensesRepository_Expecter) UpdateLicense(ctx interface{}, license interface{}) *MockLicensesRepository_UpdateLicense_Call {
	return &MockLicensesRepository_UpdateLicense_Call{Call: _e.mock.On("UpdateLicense", ctx, license)}
}

func (_c *MockLicensesRepository_UpdateLicense_Call) Run(run func(ctx context.Context, license domain.License)) *MockLicensesRepository_UpdateLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.License
		if args[1] != nil {
			arg1 = args[1].(domain.License)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicensesRepository_UpdateLicense_Call) Return(license1 domain.License, err error) *MockLicensesRepository_UpdateLicense_Call {
	_c.Call.Return(license1, err)
	return _c
}

func (_c *MockLicensesRepository_UpdateLicense_Call) RunAndReturn(run func(ctx context.Context, license domain.License) (domain.License, error)) *MockLicensesRepository_UpdateLicense_Call {
	_c.Call.Return(run)
	return _c
}
