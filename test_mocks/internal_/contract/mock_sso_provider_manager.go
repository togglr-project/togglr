// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockSSOProviderManager creates a new instance of MockSSOProviderManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSOProviderManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSOProviderManager {
	mock := &MockSSOProviderManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSSOProviderManager is an autogenerated mock type for the SSOProviderManager type
type MockSSOProviderManager struct {
	mock.Mock
}

type MockSSOProviderManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSSOProviderManager) EXPECT() *MockSSOProviderManager_Expecter {
	return &MockSSOProviderManager_Expecter{mock: &_m.Mock}
}

// AddProvider provides a mock function for the type MockSSOProviderManager
func (_mock *MockSSOProviderManager) AddProvider(name string, provider contract.SSOProvider, config domain.SSOProviderConfig) {
	_mock.Called(name, provider, config)
	return
}

// MockSSOProviderManager_AddProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProvider'
type MockSSOProviderManager_AddProvider_Call struct {
	*mock.Call
}

// AddProvider is a helper method to define mock.On call
//   - name string
//   - provider contract.SSOProvider
//   - config domain.SSOProviderConfig
func (_e *MockSSOProviderManager_Expecter) AddProvider(name interface{}, provider interface{}, config interface{}) *MockSSOProviderManager_AddProvider_Call {
	return &MockSSOProviderManager_AddProvider_Call{Call: _e.mock.On("AddProvider", name, provider, config)}
}

func (_c *MockSSOProviderManager_AddProvider_Call) Run(run func(name string, provider contract.SSOProvider, config domain.SSOProviderConfig)) *MockSSOProviderManager_AddProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 contract.SSOProvider
		if args[1] != nil {
			arg1 = args[1].(contract.SSOProvider)
		}
		var arg2 domain.SSOProviderConfig
		if args[2] != nil {
			arg2 = args[2].(domain.SSOProviderConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSSOProviderManager_AddProvider_Call) Return() *MockSSOProviderManager_AddProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSSOProviderManager_AddProvider_Call) RunAndReturn(run func(name string, provider contract.SSOProvider, config domain.SSOProviderConfig)) *MockSSOProviderManager_AddProvider_Call {
	_c.Run(run)
	return _c
}

// AuthenticateWithProvider provides a mock function for the type MockSSOProviderManager
func (_mock *MockSSOProviderManager) AuthenticateWithProvider(ctx context.Context, providerName string, req *http.Request, response string, state string) (*domain.User, error) {
	ret := _mock.Called(ctx, providerName, req, response, state)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateWithProvider")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *http.Request, string, string) (*domain.User, error)); ok {
		return returnFunc(ctx, providerName, req, response, state)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *http.Request, string, string) *domain.User); ok {
		r0 = returnFunc(ctx, providerName, req, response, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *http.Request, string, string) error); ok {
		r1 = returnFunc(ctx, providerName, req, response, state)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSSOProviderManager_AuthenticateWithProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateWithProvider'
type MockSSOProviderManager_AuthenticateWithProvider_Call struct {
	*mock.Call
}

// AuthenticateWithProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - providerName string
//   - req *http.Request
//   - response string
//   - state string
func (_e *MockSSOProviderManager_Expecter) AuthenticateWithProvider(ctx interface{}, providerName interface{}, req interface{}, response interface{}, state interface{}) *MockSSOProviderManager_AuthenticateWithProvider_Call {
	return &MockSSOProviderManager_AuthenticateWithProvider_Call{Call: _e.mock.On("AuthenticateWithProvider", ctx, providerName, req, response, state)}
}

func (_c *MockSSOProviderManager_AuthenticateWithProvider_Call) Run(run func(ctx context.Context, providerName string, req *http.Request, response string, state string)) *MockSSOProviderManager_AuthenticateWithProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *http.Request
		if args[2] != nil {
			arg2 = args[2].(*http.Request)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockSSOProviderManager_AuthenticateWithProvider_Call) Return(user *domain.User, err error) *MockSSOProviderManager_AuthenticateWithProvider_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockSSOProviderManager_AuthenticateWithProvider_Call) RunAndReturn(run func(ctx context.Context, providerName string, req *http.Request, response string, state string) (*domain.User, error)) *MockSSOProviderManager_AuthenticateWithProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnabledProviders provides a mock function for the type MockSSOProviderManager
func (_mock *MockSSOProviderManager) GetEnabledProviders() []contract.SSOProvider {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledProviders")
	}

	var r0 []contract.SSOProvider
	if returnFunc, ok := ret.Get(0).(func() []contract.SSOProvider); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contract.SSOProvider)
		}
	}
	return r0
}

// MockSSOProviderManager_GetEnabledProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnabledProviders'
type MockSSOProviderManager_GetEnabledProviders_Call struct {
	*mock.Call
}

// GetEnabledProviders is a helper method to define mock.On call
func (_e *MockSSOProviderManager_Expecter) GetEnabledProviders() *MockSSOProviderManager_GetEnabledProviders_Call {
	return &MockSSOProviderManager_GetEnabledProviders_Call{Call: _e.mock.On("GetEnabledProviders")}
}

func (_c *MockSSOProviderManager_GetEnabledProviders_Call) Run(run func()) *MockSSOProviderManager_GetEnabledProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSOProviderManager_GetEnabledProviders_Call) Return(sSOProviders []contract.SSOProvider) *MockSSOProviderManager_GetEnabledProviders_Call {
	_c.Call.Return(sSOProviders)
	return _c
}

func (_c *MockSSOProviderManager_GetEnabledProviders_Call) RunAndReturn(run func() []contract.SSOProvider) *MockSSOProviderManager_GetEnabledProviders_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvider provides a mock function for the type MockSSOProviderManager
func (_mock *MockSSOProviderManager) GetProvider(name string) (contract.SSOProvider, bool) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 contract.SSOProvider
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (contract.SSOProvider, bool)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) contract.SSOProvider); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.SSOProvider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockSSOProviderManager_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type MockSSOProviderManager_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
//   - name string
func (_e *MockSSOProviderManager_Expecter) GetProvider(name interface{}) *MockSSOProviderManager_GetProvider_Call {
	return &MockSSOProviderManager_GetProvider_Call{Call: _e.mock.On("GetProvider", name)}
}

func (_c *MockSSOProviderManager_GetProvider_Call) Run(run func(name string)) *MockSSOProviderManager_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSSOProviderManager_GetProvider_Call) Return(sSOProvider contract.SSOProvider, b bool) *MockSSOProviderManager_GetProvider_Call {
	_c.Call.Return(sSOProvider, b)
	return _c
}

func (_c *MockSSOProviderManager_GetProvider_Call) RunAndReturn(run func(name string) (contract.SSOProvider, bool)) *MockSSOProviderManager_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderConfig provides a mock function for the type MockSSOProviderManager
func (_mock *MockSSOProviderManager) GetProviderConfig(name string) (domain.SSOProviderConfig, bool) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderConfig")
	}

	var r0 domain.SSOProviderConfig
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (domain.SSOProviderConfig, bool)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.SSOProviderConfig); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(domain.SSOProviderConfig)
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockSSOProviderManager_GetProviderConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderConfig'
type MockSSOProviderManager_GetProviderConfig_Call struct {
	*mock.Call
}

// GetProviderConfig is a helper method to define mock.On call
//   - name string
func (_e *MockSSOProviderManager_Expecter) GetProviderConfig(name interface{}) *MockSSOProviderManager_GetProviderConfig_Call {
	return &MockSSOProviderManager_GetProviderConfig_Call{Call: _e.mock.On("GetProviderConfig", name)}
}

func (_c *MockSSOProviderManager_GetProviderConfig_Call) Run(run func(name string)) *MockSSOProviderManager_GetProviderConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSSOProviderManager_GetProviderConfig_Call) Return(sSOProviderConfig domain.SSOProviderConfig, b bool) *MockSSOProviderManager_GetProviderConfig_Call {
	_c.Call.Return(sSOProviderConfig, b)
	return _c
}

func (_c *MockSSOProviderManager_GetProviderConfig_Call) RunAndReturn(run func(name string) (domain.SSOProviderConfig, bool)) *MockSSOProviderManager_GetProviderConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderMetadata provides a mock function for the type MockSSOProviderManager
func (_mock *MockSSOProviderManager) GetProviderMetadata(name string) ([]byte, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderMetadata")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSSOProviderManager_GetProviderMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderMetadata'
type MockSSOProviderManager_GetProviderMetadata_Call struct {
	*mock.Call
}

// GetProviderMetadata is a helper method to define mock.On call
//   - name string
func (_e *MockSSOProviderManager_Expecter) GetProviderMetadata(name interface{}) *MockSSOProviderManager_GetProviderMetadata_Call {
	return &MockSSOProviderManager_GetProviderMetadata_Call{Call: _e.mock.On("GetProviderMetadata", name)}
}

func (_c *MockSSOProviderManager_GetProviderMetadata_Call) Run(run func(name string)) *MockSSOProviderManager_GetProviderMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSSOProviderManager_GetProviderMetadata_Call) Return(bytes []byte, err error) *MockSSOProviderManager_GetProviderMetadata_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockSSOProviderManager_GetProviderMetadata_Call) RunAndReturn(run func(name string) ([]byte, error)) *MockSSOProviderManager_GetProviderMetadata_Call {
	_c.Call.Return(run)
	return _c
}
