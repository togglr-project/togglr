// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockProjectsRepository creates a new instance of MockProjectsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectsRepository {
	mock := &MockProjectsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectsRepository is an autogenerated mock type for the ProjectsRepository type
type MockProjectsRepository struct {
	mock.Mock
}

type MockProjectsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectsRepository) EXPECT() *MockProjectsRepository_Expecter {
	return &MockProjectsRepository_Expecter{mock: &_m.Mock}
}

// Archive provides a mock function for the type MockProjectsRepository
func (_mock *MockProjectsRepository) Archive(ctx context.Context, id domain.ProjectID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Archive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectsRepository_Archive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Archive'
type MockProjectsRepository_Archive_Call struct {
	*mock.Call
}

// Archive is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
func (_e *MockProjectsRepository_Expecter) Archive(ctx interface{}, id interface{}) *MockProjectsRepository_Archive_Call {
	return &MockProjectsRepository_Archive_Call{Call: _e.mock.On("Archive", ctx, id)}
}

func (_c *MockProjectsRepository_Archive_Call) Run(run func(ctx context.Context, id domain.ProjectID)) *MockProjectsRepository_Archive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectsRepository_Archive_Call) Return(err error) *MockProjectsRepository_Archive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectsRepository_Archive_Call) RunAndReturn(run func(ctx context.Context, id domain.ProjectID) error) *MockProjectsRepository_Archive_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockProjectsRepository
func (_mock *MockProjectsRepository) Create(ctx context.Context, project *domain.ProjectDTO) (domain.ProjectID, error) {
	ret := _mock.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.ProjectID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.ProjectDTO) (domain.ProjectID, error)); ok {
		return returnFunc(ctx, project)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.ProjectDTO) domain.ProjectID); ok {
		r0 = returnFunc(ctx, project)
	} else {
		r0 = ret.Get(0).(domain.ProjectID)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.ProjectDTO) error); ok {
		r1 = returnFunc(ctx, project)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - project *domain.ProjectDTO
func (_e *MockProjectsRepository_Expecter) Create(ctx interface{}, project interface{}) *MockProjectsRepository_Create_Call {
	return &MockProjectsRepository_Create_Call{Call: _e.mock.On("Create", ctx, project)}
}

func (_c *MockProjectsRepository_Create_Call) Run(run func(ctx context.Context, project *domain.ProjectDTO)) *MockProjectsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.ProjectDTO
		if args[1] != nil {
			arg1 = args[1].(*domain.ProjectDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectsRepository_Create_Call) Return(projectID domain.ProjectID, err error) *MockProjectsRepository_Create_Call {
	_c.Call.Return(projectID, err)
	return _c
}

func (_c *MockProjectsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, project *domain.ProjectDTO) (domain.ProjectID, error)) *MockProjectsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAPIKey provides a mock function for the type MockProjectsRepository
func (_mock *MockProjectsRepository) GetByAPIKey(ctx context.Context, apiKey string) (domain.ProjectWithEnv, error) {
	ret := _mock.Called(ctx, apiKey)

	if len(ret) == 0 {
		panic("no return value specified for GetByAPIKey")
	}

	var r0 domain.ProjectWithEnv
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.ProjectWithEnv, error)); ok {
		return returnFunc(ctx, apiKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.ProjectWithEnv); ok {
		r0 = returnFunc(ctx, apiKey)
	} else {
		r0 = ret.Get(0).(domain.ProjectWithEnv)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, apiKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsRepository_GetByAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAPIKey'
type MockProjectsRepository_GetByAPIKey_Call struct {
	*mock.Call
}

// GetByAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey string
func (_e *MockProjectsRepository_Expecter) GetByAPIKey(ctx interface{}, apiKey interface{}) *MockProjectsRepository_GetByAPIKey_Call {
	return &MockProjectsRepository_GetByAPIKey_Call{Call: _e.mock.On("GetByAPIKey", ctx, apiKey)}
}

func (_c *MockProjectsRepository_GetByAPIKey_Call) Run(run func(ctx context.Context, apiKey string)) *MockProjectsRepository_GetByAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectsRepository_GetByAPIKey_Call) Return(projectWithEnv domain.ProjectWithEnv, err error) *MockProjectsRepository_GetByAPIKey_Call {
	_c.Call.Return(projectWithEnv, err)
	return _c
}

func (_c *MockProjectsRepository_GetByAPIKey_Call) RunAndReturn(run func(ctx context.Context, apiKey string) (domain.ProjectWithEnv, error)) *MockProjectsRepository_GetByAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockProjectsRepository
func (_mock *MockProjectsRepository) GetByID(ctx context.Context, id domain.ProjectID) (domain.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) (domain.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) domain.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockProjectsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
func (_e *MockProjectsRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockProjectsRepository_GetByID_Call {
	return &MockProjectsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockProjectsRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.ProjectID)) *MockProjectsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectsRepository_GetByID_Call) Return(project domain.Project, err error) *MockProjectsRepository_GetByID_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectsRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.ProjectID) (domain.Project, error)) *MockProjectsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockProjectsRepository
func (_mock *MockProjectsRepository) List(ctx context.Context) ([]domain.Project, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Project, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Project); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProjectsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectsRepository_Expecter) List(ctx interface{}) *MockProjectsRepository_List_Call {
	return &MockProjectsRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockProjectsRepository_List_Call) Run(run func(ctx context.Context)) *MockProjectsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectsRepository_List_Call) Return(projects []domain.Project, err error) *MockProjectsRepository_List_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *MockProjectsRepository_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Project, error)) *MockProjectsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectsRepository
func (_mock *MockProjectsRepository) Update(ctx context.Context, id domain.ProjectID, name string, description string) error {
	ret := _mock.Called(ctx, id, name, description)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) error); ok {
		r0 = returnFunc(ctx, id, name, description)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ProjectID
//   - name string
//   - description string
func (_e *MockProjectsRepository_Expecter) Update(ctx interface{}, id interface{}, name interface{}, description interface{}) *MockProjectsRepository_Update_Call {
	return &MockProjectsRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, name, description)}
}

func (_c *MockProjectsRepository_Update_Call) Run(run func(ctx context.Context, id domain.ProjectID, name string, description string)) *MockProjectsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockProjectsRepository_Update_Call) Return(err error) *MockProjectsRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id domain.ProjectID, name string, description string) error) *MockProjectsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
