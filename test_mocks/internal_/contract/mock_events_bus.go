// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/contract"
)

// NewMockEventsBus creates a new instance of MockEventsBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventsBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventsBus {
	mock := &MockEventsBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventsBus is an autogenerated mock type for the EventsBus type
type MockEventsBus struct {
	mock.Mock
}

type MockEventsBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventsBus) EXPECT() *MockEventsBus_Expecter {
	return &MockEventsBus_Expecter{mock: &_m.Mock}
}

// PublishErrorReport provides a mock function for the type MockEventsBus
func (_mock *MockEventsBus) PublishErrorReport(ctx context.Context, event contract.ErrorReportEvent) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for PublishErrorReport")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, contract.ErrorReportEvent) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventsBus_PublishErrorReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishErrorReport'
type MockEventsBus_PublishErrorReport_Call struct {
	*mock.Call
}

// PublishErrorReport is a helper method to define mock.On call
//   - ctx context.Context
//   - event contract.ErrorReportEvent
func (_e *MockEventsBus_Expecter) PublishErrorReport(ctx interface{}, event interface{}) *MockEventsBus_PublishErrorReport_Call {
	return &MockEventsBus_PublishErrorReport_Call{Call: _e.mock.On("PublishErrorReport", ctx, event)}
}

func (_c *MockEventsBus_PublishErrorReport_Call) Run(run func(ctx context.Context, event contract.ErrorReportEvent)) *MockEventsBus_PublishErrorReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 contract.ErrorReportEvent
		if args[1] != nil {
			arg1 = args[1].(contract.ErrorReportEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventsBus_PublishErrorReport_Call) Return(err error) *MockEventsBus_PublishErrorReport_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventsBus_PublishErrorReport_Call) RunAndReturn(run func(ctx context.Context, event contract.ErrorReportEvent) error) *MockEventsBus_PublishErrorReport_Call {
	_c.Call.Return(run)
	return _c
}
