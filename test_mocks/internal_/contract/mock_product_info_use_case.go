// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockProductInfoUseCase creates a new instance of MockProductInfoUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductInfoUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductInfoUseCase {
	mock := &MockProductInfoUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductInfoUseCase is an autogenerated mock type for the ProductInfoUseCase type
type MockProductInfoUseCase struct {
	mock.Mock
}

type MockProductInfoUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductInfoUseCase) EXPECT() *MockProductInfoUseCase_Expecter {
	return &MockProductInfoUseCase_Expecter{mock: &_m.Mock}
}

// GetProductInfo provides a mock function for the type MockProductInfoUseCase
func (_mock *MockProductInfoUseCase) GetProductInfo(ctx context.Context) (domain.ProductInfo, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProductInfo")
	}

	var r0 domain.ProductInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.ProductInfo, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.ProductInfo); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.ProductInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductInfoUseCase_GetProductInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductInfo'
type MockProductInfoUseCase_GetProductInfo_Call struct {
	*mock.Call
}

// GetProductInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProductInfoUseCase_Expecter) GetProductInfo(ctx interface{}) *MockProductInfoUseCase_GetProductInfo_Call {
	return &MockProductInfoUseCase_GetProductInfo_Call{Call: _e.mock.On("GetProductInfo", ctx)}
}

func (_c *MockProductInfoUseCase_GetProductInfo_Call) Run(run func(ctx context.Context)) *MockProductInfoUseCase_GetProductInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProductInfoUseCase_GetProductInfo_Call) Return(productInfo domain.ProductInfo, err error) *MockProductInfoUseCase_GetProductInfo_Call {
	_c.Call.Return(productInfo, err)
	return _c
}

func (_c *MockProductInfoUseCase_GetProductInfo_Call) RunAndReturn(run func(ctx context.Context) (domain.ProductInfo, error)) *MockProductInfoUseCase_GetProductInfo_Call {
	_c.Call.Return(run)
	return _c
}
