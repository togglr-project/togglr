// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockAlgorithmsRepository creates a new instance of MockAlgorithmsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAlgorithmsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAlgorithmsRepository {
	mock := &MockAlgorithmsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAlgorithmsRepository is an autogenerated mock type for the AlgorithmsRepository type
type MockAlgorithmsRepository struct {
	mock.Mock
}

type MockAlgorithmsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAlgorithmsRepository) EXPECT() *MockAlgorithmsRepository_Expecter {
	return &MockAlgorithmsRepository_Expecter{mock: &_m.Mock}
}

// GetBySlug provides a mock function for the type MockAlgorithmsRepository
func (_mock *MockAlgorithmsRepository) GetBySlug(ctx context.Context, slug string) (domain.Algorithm, error) {
	ret := _mock.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetBySlug")
	}

	var r0 domain.Algorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Algorithm, error)); ok {
		return returnFunc(ctx, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Algorithm); ok {
		r0 = returnFunc(ctx, slug)
	} else {
		r0 = ret.Get(0).(domain.Algorithm)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAlgorithmsRepository_GetBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySlug'
type MockAlgorithmsRepository_GetBySlug_Call struct {
	*mock.Call
}

// GetBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockAlgorithmsRepository_Expecter) GetBySlug(ctx interface{}, slug interface{}) *MockAlgorithmsRepository_GetBySlug_Call {
	return &MockAlgorithmsRepository_GetBySlug_Call{Call: _e.mock.On("GetBySlug", ctx, slug)}
}

func (_c *MockAlgorithmsRepository_GetBySlug_Call) Run(run func(ctx context.Context, slug string)) *MockAlgorithmsRepository_GetBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAlgorithmsRepository_GetBySlug_Call) Return(algorithm domain.Algorithm, err error) *MockAlgorithmsRepository_GetBySlug_Call {
	_c.Call.Return(algorithm, err)
	return _c
}

func (_c *MockAlgorithmsRepository_GetBySlug_Call) RunAndReturn(run func(ctx context.Context, slug string) (domain.Algorithm, error)) *MockAlgorithmsRepository_GetBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockAlgorithmsRepository
func (_mock *MockAlgorithmsRepository) List(ctx context.Context) ([]domain.Algorithm, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Algorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Algorithm, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Algorithm); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Algorithm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAlgorithmsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAlgorithmsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAlgorithmsRepository_Expecter) List(ctx interface{}) *MockAlgorithmsRepository_List_Call {
	return &MockAlgorithmsRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockAlgorithmsRepository_List_Call) Run(run func(ctx context.Context)) *MockAlgorithmsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAlgorithmsRepository_List_Call) Return(algorithms []domain.Algorithm, err error) *MockAlgorithmsRepository_List_Call {
	_c.Call.Return(algorithms, err)
	return _c
}

func (_c *MockAlgorithmsRepository_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Algorithm, error)) *MockAlgorithmsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}
