// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLDAPSyncUseCase creates a new instance of MockLDAPSyncUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLDAPSyncUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLDAPSyncUseCase {
	mock := &MockLDAPSyncUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLDAPSyncUseCase is an autogenerated mock type for the LDAPSyncUseCase type
type MockLDAPSyncUseCase struct {
	mock.Mock
}

type MockLDAPSyncUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLDAPSyncUseCase) EXPECT() *MockLDAPSyncUseCase_Expecter {
	return &MockLDAPSyncUseCase_Expecter{mock: &_m.Mock}
}

// CancelSync provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) CancelSync(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CancelSync")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPSyncUseCase_CancelSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelSync'
type MockLDAPSyncUseCase_CancelSync_Call struct {
	*mock.Call
}

// CancelSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPSyncUseCase_Expecter) CancelSync(ctx interface{}) *MockLDAPSyncUseCase_CancelSync_Call {
	return &MockLDAPSyncUseCase_CancelSync_Call{Call: _e.mock.On("CancelSync", ctx)}
}

func (_c *MockLDAPSyncUseCase_CancelSync_Call) Run(run func(ctx context.Context)) *MockLDAPSyncUseCase_CancelSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_CancelSync_Call) Return(err error) *MockLDAPSyncUseCase_CancelSync_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPSyncUseCase_CancelSync_Call) RunAndReturn(run func(ctx context.Context) error) *MockLDAPSyncUseCase_CancelSync_Call {
	_c.Call.Return(run)
	return _c
}

// Disable provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) Disable(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPSyncUseCase_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type MockLDAPSyncUseCase_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPSyncUseCase_Expecter) Disable(ctx interface{}) *MockLDAPSyncUseCase_Disable_Call {
	return &MockLDAPSyncUseCase_Disable_Call{Call: _e.mock.On("Disable", ctx)}
}

func (_c *MockLDAPSyncUseCase_Disable_Call) Run(run func(ctx context.Context)) *MockLDAPSyncUseCase_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_Disable_Call) Return(err error) *MockLDAPSyncUseCase_Disable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPSyncUseCase_Disable_Call) RunAndReturn(run func(ctx context.Context) error) *MockLDAPSyncUseCase_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) GetStatistics(ctx context.Context) (domain.LDAPStatistics, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 domain.LDAPStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.LDAPStatistics, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.LDAPStatistics); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.LDAPStatistics)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncUseCase_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type MockLDAPSyncUseCase_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPSyncUseCase_Expecter) GetStatistics(ctx interface{}) *MockLDAPSyncUseCase_GetStatistics_Call {
	return &MockLDAPSyncUseCase_GetStatistics_Call{Call: _e.mock.On("GetStatistics", ctx)}
}

func (_c *MockLDAPSyncUseCase_GetStatistics_Call) Run(run func(ctx context.Context)) *MockLDAPSyncUseCase_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_GetStatistics_Call) Return(lDAPStatistics domain.LDAPStatistics, err error) *MockLDAPSyncUseCase_GetStatistics_Call {
	_c.Call.Return(lDAPStatistics, err)
	return _c
}

func (_c *MockLDAPSyncUseCase_GetStatistics_Call) RunAndReturn(run func(ctx context.Context) (domain.LDAPStatistics, error)) *MockLDAPSyncUseCase_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncLogDetails provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) GetSyncLogDetails(ctx context.Context, id uint) (domain.LDAPSyncLog, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncLogDetails")
	}

	var r0 domain.LDAPSyncLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) (domain.LDAPSyncLog, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) domain.LDAPSyncLog); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncLog)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncUseCase_GetSyncLogDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncLogDetails'
type MockLDAPSyncUseCase_GetSyncLogDetails_Call struct {
	*mock.Call
}

// GetSyncLogDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockLDAPSyncUseCase_Expecter) GetSyncLogDetails(ctx interface{}, id interface{}) *MockLDAPSyncUseCase_GetSyncLogDetails_Call {
	return &MockLDAPSyncUseCase_GetSyncLogDetails_Call{Call: _e.mock.On("GetSyncLogDetails", ctx, id)}
}

func (_c *MockLDAPSyncUseCase_GetSyncLogDetails_Call) Run(run func(ctx context.Context, id uint)) *MockLDAPSyncUseCase_GetSyncLogDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_GetSyncLogDetails_Call) Return(lDAPSyncLog domain.LDAPSyncLog, err error) *MockLDAPSyncUseCase_GetSyncLogDetails_Call {
	_c.Call.Return(lDAPSyncLog, err)
	return _c
}

func (_c *MockLDAPSyncUseCase_GetSyncLogDetails_Call) RunAndReturn(run func(ctx context.Context, id uint) (domain.LDAPSyncLog, error)) *MockLDAPSyncUseCase_GetSyncLogDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncLogs provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) GetSyncLogs(ctx context.Context, filter domain.LDAPSyncLogFilter) (domain.LDAPSyncLogsResult, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncLogs")
	}

	var r0 domain.LDAPSyncLogsResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncLogFilter) (domain.LDAPSyncLogsResult, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncLogFilter) domain.LDAPSyncLogsResult); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncLogsResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LDAPSyncLogFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncUseCase_GetSyncLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncLogs'
type MockLDAPSyncUseCase_GetSyncLogs_Call struct {
	*mock.Call
}

// GetSyncLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.LDAPSyncLogFilter
func (_e *MockLDAPSyncUseCase_Expecter) GetSyncLogs(ctx interface{}, filter interface{}) *MockLDAPSyncUseCase_GetSyncLogs_Call {
	return &MockLDAPSyncUseCase_GetSyncLogs_Call{Call: _e.mock.On("GetSyncLogs", ctx, filter)}
}

func (_c *MockLDAPSyncUseCase_GetSyncLogs_Call) Run(run func(ctx context.Context, filter domain.LDAPSyncLogFilter)) *MockLDAPSyncUseCase_GetSyncLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LDAPSyncLogFilter
		if args[1] != nil {
			arg1 = args[1].(domain.LDAPSyncLogFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_GetSyncLogs_Call) Return(lDAPSyncLogsResult domain.LDAPSyncLogsResult, err error) *MockLDAPSyncUseCase_GetSyncLogs_Call {
	_c.Call.Return(lDAPSyncLogsResult, err)
	return _c
}

func (_c *MockLDAPSyncUseCase_GetSyncLogs_Call) RunAndReturn(run func(ctx context.Context, filter domain.LDAPSyncLogFilter) (domain.LDAPSyncLogsResult, error)) *MockLDAPSyncUseCase_GetSyncLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncProgress provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) GetSyncProgress(ctx context.Context) (domain.LDAPSyncProgress, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncProgress")
	}

	var r0 domain.LDAPSyncProgress
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.LDAPSyncProgress, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.LDAPSyncProgress); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncProgress)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncUseCase_GetSyncProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncProgress'
type MockLDAPSyncUseCase_GetSyncProgress_Call struct {
	*mock.Call
}

// GetSyncProgress is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPSyncUseCase_Expecter) GetSyncProgress(ctx interface{}) *MockLDAPSyncUseCase_GetSyncProgress_Call {
	return &MockLDAPSyncUseCase_GetSyncProgress_Call{Call: _e.mock.On("GetSyncProgress", ctx)}
}

func (_c *MockLDAPSyncUseCase_GetSyncProgress_Call) Run(run func(ctx context.Context)) *MockLDAPSyncUseCase_GetSyncProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_GetSyncProgress_Call) Return(lDAPSyncProgress domain.LDAPSyncProgress, err error) *MockLDAPSyncUseCase_GetSyncProgress_Call {
	_c.Call.Return(lDAPSyncProgress, err)
	return _c
}

func (_c *MockLDAPSyncUseCase_GetSyncProgress_Call) RunAndReturn(run func(ctx context.Context) (domain.LDAPSyncProgress, error)) *MockLDAPSyncUseCase_GetSyncProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncStatus provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) GetSyncStatus(ctx context.Context) (domain.LDAPSyncStatus, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncStatus")
	}

	var r0 domain.LDAPSyncStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.LDAPSyncStatus, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.LDAPSyncStatus); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncUseCase_GetSyncStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncStatus'
type MockLDAPSyncUseCase_GetSyncStatus_Call struct {
	*mock.Call
}

// GetSyncStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPSyncUseCase_Expecter) GetSyncStatus(ctx interface{}) *MockLDAPSyncUseCase_GetSyncStatus_Call {
	return &MockLDAPSyncUseCase_GetSyncStatus_Call{Call: _e.mock.On("GetSyncStatus", ctx)}
}

func (_c *MockLDAPSyncUseCase_GetSyncStatus_Call) Run(run func(ctx context.Context)) *MockLDAPSyncUseCase_GetSyncStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_GetSyncStatus_Call) Return(lDAPSyncStatus domain.LDAPSyncStatus, err error) *MockLDAPSyncUseCase_GetSyncStatus_Call {
	_c.Call.Return(lDAPSyncStatus, err)
	return _c
}

func (_c *MockLDAPSyncUseCase_GetSyncStatus_Call) RunAndReturn(run func(ctx context.Context) (domain.LDAPSyncStatus, error)) *MockLDAPSyncUseCase_GetSyncStatus_Call {
	_c.Call.Return(run)
	return _c
}

// StartManualSync provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) StartManualSync(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartManualSync")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPSyncUseCase_StartManualSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartManualSync'
type MockLDAPSyncUseCase_StartManualSync_Call struct {
	*mock.Call
}

// StartManualSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPSyncUseCase_Expecter) StartManualSync(ctx interface{}) *MockLDAPSyncUseCase_StartManualSync_Call {
	return &MockLDAPSyncUseCase_StartManualSync_Call{Call: _e.mock.On("StartManualSync", ctx)}
}

func (_c *MockLDAPSyncUseCase_StartManualSync_Call) Run(run func(ctx context.Context)) *MockLDAPSyncUseCase_StartManualSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_StartManualSync_Call) Return(err error) *MockLDAPSyncUseCase_StartManualSync_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPSyncUseCase_StartManualSync_Call) RunAndReturn(run func(ctx context.Context) error) *MockLDAPSyncUseCase_StartManualSync_Call {
	_c.Call.Return(run)
	return _c
}

// TestConnection provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) TestConnection(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPSyncUseCase_TestConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestConnection'
type MockLDAPSyncUseCase_TestConnection_Call struct {
	*mock.Call
}

// TestConnection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLDAPSyncUseCase_Expecter) TestConnection(ctx interface{}) *MockLDAPSyncUseCase_TestConnection_Call {
	return &MockLDAPSyncUseCase_TestConnection_Call{Call: _e.mock.On("TestConnection", ctx)}
}

func (_c *MockLDAPSyncUseCase_TestConnection_Call) Run(run func(ctx context.Context)) *MockLDAPSyncUseCase_TestConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_TestConnection_Call) Return(err error) *MockLDAPSyncUseCase_TestConnection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPSyncUseCase_TestConnection_Call) RunAndReturn(run func(ctx context.Context) error) *MockLDAPSyncUseCase_TestConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfig provides a mock function for the type MockLDAPSyncUseCase
func (_mock *MockLDAPSyncUseCase) UpdateConfig(ctx context.Context, cfg *domain.LDAPConfig) error {
	ret := _mock.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.LDAPConfig) error); ok {
		r0 = returnFunc(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPSyncUseCase_UpdateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfig'
type MockLDAPSyncUseCase_UpdateConfig_Call struct {
	*mock.Call
}

// UpdateConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg *domain.LDAPConfig
func (_e *MockLDAPSyncUseCase_Expecter) UpdateConfig(ctx interface{}, cfg interface{}) *MockLDAPSyncUseCase_UpdateConfig_Call {
	return &MockLDAPSyncUseCase_UpdateConfig_Call{Call: _e.mock.On("UpdateConfig", ctx, cfg)}
}

func (_c *MockLDAPSyncUseCase_UpdateConfig_Call) Run(run func(ctx context.Context, cfg *domain.LDAPConfig)) *MockLDAPSyncUseCase_UpdateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.LDAPConfig
		if args[1] != nil {
			arg1 = args[1].(*domain.LDAPConfig)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncUseCase_UpdateConfig_Call) Return(err error) *MockLDAPSyncUseCase_UpdateConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPSyncUseCase_UpdateConfig_Call) RunAndReturn(run func(ctx context.Context, cfg *domain.LDAPConfig) error) *MockLDAPSyncUseCase_UpdateConfig_Call {
	_c.Call.Return(run)
	return _c
}
