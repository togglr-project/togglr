// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockEmailer creates a new instance of MockEmailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailer {
	mock := &MockEmailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmailer is an autogenerated mock type for the Emailer type
type MockEmailer struct {
	mock.Mock
}

type MockEmailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailer) EXPECT() *MockEmailer_Expecter {
	return &MockEmailer_Expecter{mock: &_m.Mock}
}

// Send2FACodeEmail provides a mock function for the type MockEmailer
func (_mock *MockEmailer) Send2FACodeEmail(ctx context.Context, email string, code string, action string) error {
	ret := _mock.Called(ctx, email, code, action)

	if len(ret) == 0 {
		panic("no return value specified for Send2FACodeEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, email, code, action)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailer_Send2FACodeEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send2FACodeEmail'
type MockEmailer_Send2FACodeEmail_Call struct {
	*mock.Call
}

// Send2FACodeEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - code string
//   - action string
func (_e *MockEmailer_Expecter) Send2FACodeEmail(ctx interface{}, email interface{}, code interface{}, action interface{}) *MockEmailer_Send2FACodeEmail_Call {
	return &MockEmailer_Send2FACodeEmail_Call{Call: _e.mock.On("Send2FACodeEmail", ctx, email, code, action)}
}

func (_c *MockEmailer_Send2FACodeEmail_Call) Run(run func(ctx context.Context, email string, code string, action string)) *MockEmailer_Send2FACodeEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockEmailer_Send2FACodeEmail_Call) Return(err error) *MockEmailer_Send2FACodeEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailer_Send2FACodeEmail_Call) RunAndReturn(run func(ctx context.Context, email string, code string, action string) error) *MockEmailer_Send2FACodeEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendResetPasswordEmail provides a mock function for the type MockEmailer
func (_mock *MockEmailer) SendResetPasswordEmail(ctx context.Context, email string, token string) error {
	ret := _mock.Called(ctx, email, token)

	if len(ret) == 0 {
		panic("no return value specified for SendResetPasswordEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, email, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailer_SendResetPasswordEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResetPasswordEmail'
type MockEmailer_SendResetPasswordEmail_Call struct {
	*mock.Call
}

// SendResetPasswordEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - token string
func (_e *MockEmailer_Expecter) SendResetPasswordEmail(ctx interface{}, email interface{}, token interface{}) *MockEmailer_SendResetPasswordEmail_Call {
	return &MockEmailer_SendResetPasswordEmail_Call{Call: _e.mock.On("SendResetPasswordEmail", ctx, email, token)}
}

func (_c *MockEmailer_SendResetPasswordEmail_Call) Run(run func(ctx context.Context, email string, token string)) *MockEmailer_SendResetPasswordEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEmailer_SendResetPasswordEmail_Call) Return(err error) *MockEmailer_SendResetPasswordEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailer_SendResetPasswordEmail_Call) RunAndReturn(run func(ctx context.Context, email string, token string) error) *MockEmailer_SendResetPasswordEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendUserNotificationEmail provides a mock function for the type MockEmailer
func (_mock *MockEmailer) SendUserNotificationEmail(ctx context.Context, toEmail string, notifType domain.UserNotificationType, content domain.UserNotificationContent) error {
	ret := _mock.Called(ctx, toEmail, notifType, content)

	if len(ret) == 0 {
		panic("no return value specified for SendUserNotificationEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.UserNotificationType, domain.UserNotificationContent) error); ok {
		r0 = returnFunc(ctx, toEmail, notifType, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailer_SendUserNotificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendUserNotificationEmail'
type MockEmailer_SendUserNotificationEmail_Call struct {
	*mock.Call
}

// SendUserNotificationEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - toEmail string
//   - notifType domain.UserNotificationType
//   - content domain.UserNotificationContent
func (_e *MockEmailer_Expecter) SendUserNotificationEmail(ctx interface{}, toEmail interface{}, notifType interface{}, content interface{}) *MockEmailer_SendUserNotificationEmail_Call {
	return &MockEmailer_SendUserNotificationEmail_Call{Call: _e.mock.On("SendUserNotificationEmail", ctx, toEmail, notifType, content)}
}

func (_c *MockEmailer_SendUserNotificationEmail_Call) Run(run func(ctx context.Context, toEmail string, notifType domain.UserNotificationType, content domain.UserNotificationContent)) *MockEmailer_SendUserNotificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.UserNotificationType
		if args[2] != nil {
			arg2 = args[2].(domain.UserNotificationType)
		}
		var arg3 domain.UserNotificationContent
		if args[3] != nil {
			arg3 = args[3].(domain.UserNotificationContent)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockEmailer_SendUserNotificationEmail_Call) Return(err error) *MockEmailer_SendUserNotificationEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailer_SendUserNotificationEmail_Call) RunAndReturn(run func(ctx context.Context, toEmail string, notifType domain.UserNotificationType, content domain.UserNotificationContent) error) *MockEmailer_SendUserNotificationEmail_Call {
	_c.Call.Return(run)
	return _c
}
