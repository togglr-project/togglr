// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockLDAPSyncLogsRepository creates a new instance of MockLDAPSyncLogsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLDAPSyncLogsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLDAPSyncLogsRepository {
	mock := &MockLDAPSyncLogsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLDAPSyncLogsRepository is an autogenerated mock type for the LDAPSyncLogsRepository type
type MockLDAPSyncLogsRepository struct {
	mock.Mock
}

type MockLDAPSyncLogsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLDAPSyncLogsRepository) EXPECT() *MockLDAPSyncLogsRepository_Expecter {
	return &MockLDAPSyncLogsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockLDAPSyncLogsRepository
func (_mock *MockLDAPSyncLogsRepository) Create(ctx context.Context, log domain.LDAPSyncLog) (domain.LDAPSyncLog, error) {
	ret := _mock.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.LDAPSyncLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncLog) (domain.LDAPSyncLog, error)); ok {
		return returnFunc(ctx, log)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncLog) domain.LDAPSyncLog); ok {
		r0 = returnFunc(ctx, log)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncLog)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LDAPSyncLog) error); ok {
		r1 = returnFunc(ctx, log)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncLogsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLDAPSyncLogsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - log domain.LDAPSyncLog
func (_e *MockLDAPSyncLogsRepository_Expecter) Create(ctx interface{}, log interface{}) *MockLDAPSyncLogsRepository_Create_Call {
	return &MockLDAPSyncLogsRepository_Create_Call{Call: _e.mock.On("Create", ctx, log)}
}

func (_c *MockLDAPSyncLogsRepository_Create_Call) Run(run func(ctx context.Context, log domain.LDAPSyncLog)) *MockLDAPSyncLogsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LDAPSyncLog
		if args[1] != nil {
			arg1 = args[1].(domain.LDAPSyncLog)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncLogsRepository_Create_Call) Return(lDAPSyncLog domain.LDAPSyncLog, err error) *MockLDAPSyncLogsRepository_Create_Call {
	_c.Call.Return(lDAPSyncLog, err)
	return _c
}

func (_c *MockLDAPSyncLogsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, log domain.LDAPSyncLog) (domain.LDAPSyncLog, error)) *MockLDAPSyncLogsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBySyncID provides a mock function for the type MockLDAPSyncLogsRepository
func (_mock *MockLDAPSyncLogsRepository) DeleteBySyncID(ctx context.Context, syncSessionID string) error {
	ret := _mock.Called(ctx, syncSessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBySyncID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, syncSessionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLDAPSyncLogsRepository_DeleteBySyncID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBySyncID'
type MockLDAPSyncLogsRepository_DeleteBySyncID_Call struct {
	*mock.Call
}

// DeleteBySyncID is a helper method to define mock.On call
//   - ctx context.Context
//   - syncSessionID string
func (_e *MockLDAPSyncLogsRepository_Expecter) DeleteBySyncID(ctx interface{}, syncSessionID interface{}) *MockLDAPSyncLogsRepository_DeleteBySyncID_Call {
	return &MockLDAPSyncLogsRepository_DeleteBySyncID_Call{Call: _e.mock.On("DeleteBySyncID", ctx, syncSessionID)}
}

func (_c *MockLDAPSyncLogsRepository_DeleteBySyncID_Call) Run(run func(ctx context.Context, syncSessionID string)) *MockLDAPSyncLogsRepository_DeleteBySyncID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncLogsRepository_DeleteBySyncID_Call) Return(err error) *MockLDAPSyncLogsRepository_DeleteBySyncID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLDAPSyncLogsRepository_DeleteBySyncID_Call) RunAndReturn(run func(ctx context.Context, syncSessionID string) error) *MockLDAPSyncLogsRepository_DeleteBySyncID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockLDAPSyncLogsRepository
func (_mock *MockLDAPSyncLogsRepository) GetByID(ctx context.Context, id uint) (domain.LDAPSyncLog, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.LDAPSyncLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) (domain.LDAPSyncLog, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) domain.LDAPSyncLog); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncLog)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncLogsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockLDAPSyncLogsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockLDAPSyncLogsRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockLDAPSyncLogsRepository_GetByID_Call {
	return &MockLDAPSyncLogsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockLDAPSyncLogsRepository_GetByID_Call) Run(run func(ctx context.Context, id uint)) *MockLDAPSyncLogsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncLogsRepository_GetByID_Call) Return(lDAPSyncLog domain.LDAPSyncLog, err error) *MockLDAPSyncLogsRepository_GetByID_Call {
	_c.Call.Return(lDAPSyncLog, err)
	return _c
}

func (_c *MockLDAPSyncLogsRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uint) (domain.LDAPSyncLog, error)) *MockLDAPSyncLogsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockLDAPSyncLogsRepository
func (_mock *MockLDAPSyncLogsRepository) List(ctx context.Context, filter domain.LDAPSyncLogFilter) (domain.LDAPSyncLogsResult, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 domain.LDAPSyncLogsResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncLogFilter) (domain.LDAPSyncLogsResult, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LDAPSyncLogFilter) domain.LDAPSyncLogsResult); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		r0 = ret.Get(0).(domain.LDAPSyncLogsResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LDAPSyncLogFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLDAPSyncLogsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockLDAPSyncLogsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.LDAPSyncLogFilter
func (_e *MockLDAPSyncLogsRepository_Expecter) List(ctx interface{}, filter interface{}) *MockLDAPSyncLogsRepository_List_Call {
	return &MockLDAPSyncLogsRepository_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *MockLDAPSyncLogsRepository_List_Call) Run(run func(ctx context.Context, filter domain.LDAPSyncLogFilter)) *MockLDAPSyncLogsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LDAPSyncLogFilter
		if args[1] != nil {
			arg1 = args[1].(domain.LDAPSyncLogFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLDAPSyncLogsRepository_List_Call) Return(lDAPSyncLogsResult domain.LDAPSyncLogsResult, err error) *MockLDAPSyncLogsRepository_List_Call {
	_c.Call.Return(lDAPSyncLogsResult, err)
	return _c
}

func (_c *MockLDAPSyncLogsRepository_List_Call) RunAndReturn(run func(ctx context.Context, filter domain.LDAPSyncLogFilter) (domain.LDAPSyncLogsResult, error)) *MockLDAPSyncLogsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}
