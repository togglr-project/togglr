// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTwoFARateLimiter creates a new instance of MockTwoFARateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTwoFARateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTwoFARateLimiter {
	mock := &MockTwoFARateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTwoFARateLimiter is an autogenerated mock type for the TwoFARateLimiter type
type MockTwoFARateLimiter struct {
	mock.Mock
}

type MockTwoFARateLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTwoFARateLimiter) EXPECT() *MockTwoFARateLimiter_Expecter {
	return &MockTwoFARateLimiter_Expecter{mock: &_m.Mock}
}

// Inc provides a mock function for the type MockTwoFARateLimiter
func (_mock *MockTwoFARateLimiter) Inc(userID domain.UserID) (int, bool) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Inc")
	}

	var r0 int
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(domain.UserID) (int, bool)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.UserID) int); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.UserID) bool); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockTwoFARateLimiter_Inc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inc'
type MockTwoFARateLimiter_Inc_Call struct {
	*mock.Call
}

// Inc is a helper method to define mock.On call
//   - userID domain.UserID
func (_e *MockTwoFARateLimiter_Expecter) Inc(userID interface{}) *MockTwoFARateLimiter_Inc_Call {
	return &MockTwoFARateLimiter_Inc_Call{Call: _e.mock.On("Inc", userID)}
}

func (_c *MockTwoFARateLimiter_Inc_Call) Run(run func(userID domain.UserID)) *MockTwoFARateLimiter_Inc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.UserID
		if args[0] != nil {
			arg0 = args[0].(domain.UserID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTwoFARateLimiter_Inc_Call) Return(attempts int, blocked bool) *MockTwoFARateLimiter_Inc_Call {
	_c.Call.Return(attempts, blocked)
	return _c
}

func (_c *MockTwoFARateLimiter_Inc_Call) RunAndReturn(run func(userID domain.UserID) (int, bool)) *MockTwoFARateLimiter_Inc_Call {
	_c.Call.Return(run)
	return _c
}

// IsBlocked provides a mock function for the type MockTwoFARateLimiter
func (_mock *MockTwoFARateLimiter) IsBlocked(userID domain.UserID) bool {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for IsBlocked")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(domain.UserID) bool); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockTwoFARateLimiter_IsBlocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBlocked'
type MockTwoFARateLimiter_IsBlocked_Call struct {
	*mock.Call
}

// IsBlocked is a helper method to define mock.On call
//   - userID domain.UserID
func (_e *MockTwoFARateLimiter_Expecter) IsBlocked(userID interface{}) *MockTwoFARateLimiter_IsBlocked_Call {
	return &MockTwoFARateLimiter_IsBlocked_Call{Call: _e.mock.On("IsBlocked", userID)}
}

func (_c *MockTwoFARateLimiter_IsBlocked_Call) Run(run func(userID domain.UserID)) *MockTwoFARateLimiter_IsBlocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.UserID
		if args[0] != nil {
			arg0 = args[0].(domain.UserID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTwoFARateLimiter_IsBlocked_Call) Return(b bool) *MockTwoFARateLimiter_IsBlocked_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockTwoFARateLimiter_IsBlocked_Call) RunAndReturn(run func(userID domain.UserID) bool) *MockTwoFARateLimiter_IsBlocked_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function for the type MockTwoFARateLimiter
func (_mock *MockTwoFARateLimiter) Reset(userID domain.UserID) {
	_mock.Called(userID)
	return
}

// MockTwoFARateLimiter_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockTwoFARateLimiter_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - userID domain.UserID
func (_e *MockTwoFARateLimiter_Expecter) Reset(userID interface{}) *MockTwoFARateLimiter_Reset_Call {
	return &MockTwoFARateLimiter_Reset_Call{Call: _e.mock.On("Reset", userID)}
}

func (_c *MockTwoFARateLimiter_Reset_Call) Run(run func(userID domain.UserID)) *MockTwoFARateLimiter_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.UserID
		if args[0] != nil {
			arg0 = args[0].(domain.UserID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTwoFARateLimiter_Reset_Call) Return() *MockTwoFARateLimiter_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTwoFARateLimiter_Reset_Call) RunAndReturn(run func(userID domain.UserID)) *MockTwoFARateLimiter_Reset_Call {
	_c.Run(run)
	return _c
}
