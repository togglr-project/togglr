// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"
	"time"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuditLogRepository creates a new instance of MockAuditLogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditLogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditLogRepository {
	mock := &MockAuditLogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuditLogRepository is an autogenerated mock type for the AuditLogRepository type
type MockAuditLogRepository struct {
	mock.Mock
}

type MockAuditLogRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditLogRepository) EXPECT() *MockAuditLogRepository_Expecter {
	return &MockAuditLogRepository_Expecter{mock: &_m.Mock}
}

// ListChanges provides a mock function for the type MockAuditLogRepository
func (_mock *MockAuditLogRepository) ListChanges(ctx context.Context, filter domain.ChangesListFilter) (domain.ChangesListResult, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListChanges")
	}

	var r0 domain.ChangesListResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ChangesListFilter) (domain.ChangesListResult, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ChangesListFilter) domain.ChangesListResult); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		r0 = ret.Get(0).(domain.ChangesListResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ChangesListFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuditLogRepository_ListChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChanges'
type MockAuditLogRepository_ListChanges_Call struct {
	*mock.Call
}

// ListChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.ChangesListFilter
func (_e *MockAuditLogRepository_Expecter) ListChanges(ctx interface{}, filter interface{}) *MockAuditLogRepository_ListChanges_Call {
	return &MockAuditLogRepository_ListChanges_Call{Call: _e.mock.On("ListChanges", ctx, filter)}
}

func (_c *MockAuditLogRepository_ListChanges_Call) Run(run func(ctx context.Context, filter domain.ChangesListFilter)) *MockAuditLogRepository_ListChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ChangesListFilter
		if args[1] != nil {
			arg1 = args[1].(domain.ChangesListFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuditLogRepository_ListChanges_Call) Return(changesListResult domain.ChangesListResult, err error) *MockAuditLogRepository_ListChanges_Call {
	_c.Call.Return(changesListResult, err)
	return _c
}

func (_c *MockAuditLogRepository_ListChanges_Call) RunAndReturn(run func(ctx context.Context, filter domain.ChangesListFilter) (domain.ChangesListResult, error)) *MockAuditLogRepository_ListChanges_Call {
	_c.Call.Return(run)
	return _c
}

// ListSince provides a mock function for the type MockAuditLogRepository
func (_mock *MockAuditLogRepository) ListSince(ctx context.Context, since time.Time) ([]domain.AuditLog, error) {
	ret := _mock.Called(ctx, since)

	if len(ret) == 0 {
		panic("no return value specified for ListSince")
	}

	var r0 []domain.AuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) ([]domain.AuditLog, error)); ok {
		return returnFunc(ctx, since)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) []domain.AuditLog); ok {
		r0 = returnFunc(ctx, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = returnFunc(ctx, since)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuditLogRepository_ListSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSince'
type MockAuditLogRepository_ListSince_Call struct {
	*mock.Call
}

// ListSince is a helper method to define mock.On call
//   - ctx context.Context
//   - since time.Time
func (_e *MockAuditLogRepository_Expecter) ListSince(ctx interface{}, since interface{}) *MockAuditLogRepository_ListSince_Call {
	return &MockAuditLogRepository_ListSince_Call{Call: _e.mock.On("ListSince", ctx, since)}
}

func (_c *MockAuditLogRepository_ListSince_Call) Run(run func(ctx context.Context, since time.Time)) *MockAuditLogRepository_ListSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuditLogRepository_ListSince_Call) Return(auditLogs []domain.AuditLog, err error) *MockAuditLogRepository_ListSince_Call {
	_c.Call.Return(auditLogs, err)
	return _c
}

func (_c *MockAuditLogRepository_ListSince_Call) RunAndReturn(run func(ctx context.Context, since time.Time) ([]domain.AuditLog, error)) *MockAuditLogRepository_ListSince_Call {
	_c.Call.Return(run)
	return _c
}
