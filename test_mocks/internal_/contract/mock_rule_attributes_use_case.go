// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRuleAttributesUseCase creates a new instance of MockRuleAttributesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuleAttributesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuleAttributesUseCase {
	mock := &MockRuleAttributesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRuleAttributesUseCase is an autogenerated mock type for the RuleAttributesUseCase type
type MockRuleAttributesUseCase struct {
	mock.Mock
}

type MockRuleAttributesUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuleAttributesUseCase) EXPECT() *MockRuleAttributesUseCase_Expecter {
	return &MockRuleAttributesUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRuleAttributesUseCase
func (_mock *MockRuleAttributesUseCase) Create(ctx context.Context, name domain.RuleAttribute, description *string) (domain.RuleAttributeEntity, error) {
	ret := _mock.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.RuleAttributeEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleAttribute, *string) (domain.RuleAttributeEntity, error)); ok {
		return returnFunc(ctx, name, description)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleAttribute, *string) domain.RuleAttributeEntity); ok {
		r0 = returnFunc(ctx, name, description)
	} else {
		r0 = ret.Get(0).(domain.RuleAttributeEntity)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.RuleAttribute, *string) error); ok {
		r1 = returnFunc(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuleAttributesUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRuleAttributesUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - name domain.RuleAttribute
//   - description *string
func (_e *MockRuleAttributesUseCase_Expecter) Create(ctx interface{}, name interface{}, description interface{}) *MockRuleAttributesUseCase_Create_Call {
	return &MockRuleAttributesUseCase_Create_Call{Call: _e.mock.On("Create", ctx, name, description)}
}

func (_c *MockRuleAttributesUseCase_Create_Call) Run(run func(ctx context.Context, name domain.RuleAttribute, description *string)) *MockRuleAttributesUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RuleAttribute
		if args[1] != nil {
			arg1 = args[1].(domain.RuleAttribute)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRuleAttributesUseCase_Create_Call) Return(ruleAttributeEntity domain.RuleAttributeEntity, err error) *MockRuleAttributesUseCase_Create_Call {
	_c.Call.Return(ruleAttributeEntity, err)
	return _c
}

func (_c *MockRuleAttributesUseCase_Create_Call) RunAndReturn(run func(ctx context.Context, name domain.RuleAttribute, description *string) (domain.RuleAttributeEntity, error)) *MockRuleAttributesUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRuleAttributesUseCase
func (_mock *MockRuleAttributesUseCase) Delete(ctx context.Context, name domain.RuleAttribute) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RuleAttribute) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRuleAttributesUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRuleAttributesUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name domain.RuleAttribute
func (_e *MockRuleAttributesUseCase_Expecter) Delete(ctx interface{}, name interface{}) *MockRuleAttributesUseCase_Delete_Call {
	return &MockRuleAttributesUseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, name)}
}

func (_c *MockRuleAttributesUseCase_Delete_Call) Run(run func(ctx context.Context, name domain.RuleAttribute)) *MockRuleAttributesUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RuleAttribute
		if args[1] != nil {
			arg1 = args[1].(domain.RuleAttribute)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRuleAttributesUseCase_Delete_Call) Return(err error) *MockRuleAttributesUseCase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRuleAttributesUseCase_Delete_Call) RunAndReturn(run func(ctx context.Context, name domain.RuleAttribute) error) *MockRuleAttributesUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRuleAttributesUseCase
func (_mock *MockRuleAttributesUseCase) List(ctx context.Context) ([]domain.RuleAttributeEntity, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.RuleAttributeEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.RuleAttributeEntity, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.RuleAttributeEntity); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RuleAttributeEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuleAttributesUseCase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRuleAttributesUseCase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRuleAttributesUseCase_Expecter) List(ctx interface{}) *MockRuleAttributesUseCase_List_Call {
	return &MockRuleAttributesUseCase_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockRuleAttributesUseCase_List_Call) Run(run func(ctx context.Context)) *MockRuleAttributesUseCase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuleAttributesUseCase_List_Call) Return(ruleAttributeEntitys []domain.RuleAttributeEntity, err error) *MockRuleAttributesUseCase_List_Call {
	_c.Call.Return(ruleAttributeEntitys, err)
	return _c
}

func (_c *MockRuleAttributesUseCase_List_Call) RunAndReturn(run func(ctx context.Context) ([]domain.RuleAttributeEntity, error)) *MockRuleAttributesUseCase_List_Call {
	_c.Call.Return(run)
	return _c
}
