// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureAlgorithmsRepository creates a new instance of MockFeatureAlgorithmsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureAlgorithmsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureAlgorithmsRepository {
	mock := &MockFeatureAlgorithmsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureAlgorithmsRepository is an autogenerated mock type for the FeatureAlgorithmsRepository type
type MockFeatureAlgorithmsRepository struct {
	mock.Mock
}

type MockFeatureAlgorithmsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureAlgorithmsRepository) EXPECT() *MockFeatureAlgorithmsRepository_Expecter {
	return &MockFeatureAlgorithmsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) Create(ctx context.Context, featureAlgorithm domain.FeatureAlgorithmDTO) error {
	ret := _mock.Called(ctx, featureAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureAlgorithmDTO) error); ok {
		r0 = returnFunc(ctx, featureAlgorithm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureAlgorithmsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFeatureAlgorithmsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - featureAlgorithm domain.FeatureAlgorithmDTO
func (_e *MockFeatureAlgorithmsRepository_Expecter) Create(ctx interface{}, featureAlgorithm interface{}) *MockFeatureAlgorithmsRepository_Create_Call {
	return &MockFeatureAlgorithmsRepository_Create_Call{Call: _e.mock.On("Create", ctx, featureAlgorithm)}
}

func (_c *MockFeatureAlgorithmsRepository_Create_Call) Run(run func(ctx context.Context, featureAlgorithm domain.FeatureAlgorithmDTO)) *MockFeatureAlgorithmsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureAlgorithmDTO
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureAlgorithmDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_Create_Call) Return(err error) *MockFeatureAlgorithmsRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, featureAlgorithm domain.FeatureAlgorithmDTO) error) *MockFeatureAlgorithmsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) Delete(ctx context.Context, id domain.FeatureAlgorithmID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureAlgorithmID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureAlgorithmsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFeatureAlgorithmsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureAlgorithmID
func (_e *MockFeatureAlgorithmsRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockFeatureAlgorithmsRepository_Delete_Call {
	return &MockFeatureAlgorithmsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockFeatureAlgorithmsRepository_Delete_Call) Run(run func(ctx context.Context, id domain.FeatureAlgorithmID)) *MockFeatureAlgorithmsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureAlgorithmID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureAlgorithmID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_Delete_Call) Return(err error) *MockFeatureAlgorithmsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureAlgorithmID) error) *MockFeatureAlgorithmsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByFeatureIDWithEnvID provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) DeleteByFeatureIDWithEnvID(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) error {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFeatureIDWithEnvID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByFeatureIDWithEnvID'
type MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call struct {
	*mock.Call
}

// DeleteByFeatureIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureAlgorithmsRepository_Expecter) DeleteByFeatureIDWithEnvID(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call {
	return &MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call{Call: _e.mock.On("DeleteByFeatureIDWithEnvID", ctx, featureID, envID)}
}

func (_c *MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call) Return(err error) *MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) error) *MockFeatureAlgorithmsRepository_DeleteByFeatureIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFeatureIDWithEnvID provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) GetByFeatureIDWithEnvID(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for GetByFeatureIDWithEnvID")
	}

	var r0 domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) (domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx, featureID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		r0 = ret.Get(0).(domain.FeatureAlgorithm)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, featureID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFeatureIDWithEnvID'
type MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call struct {
	*mock.Call
}

// GetByFeatureIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureAlgorithmsRepository_Expecter) GetByFeatureIDWithEnvID(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call {
	return &MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call{Call: _e.mock.On("GetByFeatureIDWithEnvID", ctx, featureID, envID)}
}

func (_c *MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call) Return(featureAlgorithm domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call {
	_c.Call.Return(featureAlgorithm, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) (domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsRepository_GetByFeatureIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) GetByID(ctx context.Context, id domain.FeatureAlgorithmID) (domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureAlgorithmID) (domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureAlgorithmID) domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.FeatureAlgorithm)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureAlgorithmID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockFeatureAlgorithmsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FeatureAlgorithmID
func (_e *MockFeatureAlgorithmsRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockFeatureAlgorithmsRepository_GetByID_Call {
	return &MockFeatureAlgorithmsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockFeatureAlgorithmsRepository_GetByID_Call) Run(run func(ctx context.Context, id domain.FeatureAlgorithmID)) *MockFeatureAlgorithmsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureAlgorithmID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureAlgorithmID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_GetByID_Call) Return(featureAlgorithm domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsRepository_GetByID_Call {
	_c.Call.Return(featureAlgorithm, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id domain.FeatureAlgorithmID) (domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) ListAll(ctx context.Context) ([]domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockFeatureAlgorithmsRepository_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeatureAlgorithmsRepository_Expecter) ListAll(ctx interface{}) *MockFeatureAlgorithmsRepository_ListAll_Call {
	return &MockFeatureAlgorithmsRepository_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockFeatureAlgorithmsRepository_ListAll_Call) Run(run func(ctx context.Context)) *MockFeatureAlgorithmsRepository_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListAll_Call) Return(featureAlgorithms []domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsRepository_ListAll_Call {
	_c.Call.Return(featureAlgorithms, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListAll_Call) RunAndReturn(run func(ctx context.Context) ([]domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsRepository_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllExtended provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) ListAllExtended(ctx context.Context) ([]domain.FeatureAlgorithmExtended, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAllExtended")
	}

	var r0 []domain.FeatureAlgorithmExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.FeatureAlgorithmExtended, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.FeatureAlgorithmExtended); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithmExtended)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_ListAllExtended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllExtended'
type MockFeatureAlgorithmsRepository_ListAllExtended_Call struct {
	*mock.Call
}

// ListAllExtended is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeatureAlgorithmsRepository_Expecter) ListAllExtended(ctx interface{}) *MockFeatureAlgorithmsRepository_ListAllExtended_Call {
	return &MockFeatureAlgorithmsRepository_ListAllExtended_Call{Call: _e.mock.On("ListAllExtended", ctx)}
}

func (_c *MockFeatureAlgorithmsRepository_ListAllExtended_Call) Run(run func(ctx context.Context)) *MockFeatureAlgorithmsRepository_ListAllExtended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListAllExtended_Call) Return(featureAlgorithmExtendeds []domain.FeatureAlgorithmExtended, err error) *MockFeatureAlgorithmsRepository_ListAllExtended_Call {
	_c.Call.Return(featureAlgorithmExtendeds, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListAllExtended_Call) RunAndReturn(run func(ctx context.Context) ([]domain.FeatureAlgorithmExtended, error)) *MockFeatureAlgorithmsRepository_ListAllExtended_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFeatureID provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) ListByFeatureID(ctx context.Context, featureID domain.FeatureID) ([]domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx, featureID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFeatureID")
	}

	var r0 []domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) ([]domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx, featureID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID) []domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx, featureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID) error); ok {
		r1 = returnFunc(ctx, featureID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_ListByFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFeatureID'
type MockFeatureAlgorithmsRepository_ListByFeatureID_Call struct {
	*mock.Call
}

// ListByFeatureID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
func (_e *MockFeatureAlgorithmsRepository_Expecter) ListByFeatureID(ctx interface{}, featureID interface{}) *MockFeatureAlgorithmsRepository_ListByFeatureID_Call {
	return &MockFeatureAlgorithmsRepository_ListByFeatureID_Call{Call: _e.mock.On("ListByFeatureID", ctx, featureID)}
}

func (_c *MockFeatureAlgorithmsRepository_ListByFeatureID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID)) *MockFeatureAlgorithmsRepository_ListByFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListByFeatureID_Call) Return(featureAlgorithms []domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsRepository_ListByFeatureID_Call {
	_c.Call.Return(featureAlgorithms, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListByFeatureID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID) ([]domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsRepository_ListByFeatureID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFeatureIDWithEnvID provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) ListByFeatureIDWithEnvID(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) ([]domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for ListByFeatureIDWithEnvID")
	}

	var r0 []domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) ([]domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx, featureID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) []domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, featureID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFeatureIDWithEnvID'
type MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call struct {
	*mock.Call
}

// ListByFeatureIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureAlgorithmsRepository_Expecter) ListByFeatureIDWithEnvID(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call {
	return &MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call{Call: _e.mock.On("ListByFeatureIDWithEnvID", ctx, featureID, envID)}
}

func (_c *MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call) Return(featureAlgorithms []domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call {
	_c.Call.Return(featureAlgorithms, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) ([]domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsRepository_ListByFeatureIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectIDWithEnvID provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) ListByProjectIDWithEnvID(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) ([]domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx, projectID, envID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectIDWithEnvID")
	}

	var r0 []domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) ([]domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx, projectID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, domain.EnvironmentID) []domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx, projectID, envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, projectID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectIDWithEnvID'
type MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call struct {
	*mock.Call
}

// ListByProjectIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - envID domain.EnvironmentID
func (_e *MockFeatureAlgorithmsRepository_Expecter) ListByProjectIDWithEnvID(ctx interface{}, projectID interface{}, envID interface{}) *MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call {
	return &MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call{Call: _e.mock.On("ListByProjectIDWithEnvID", ctx, projectID, envID)}
}

func (_c *MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID)) *MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call) Return(featureAlgorithms []domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call {
	_c.Call.Return(featureAlgorithms, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, envID domain.EnvironmentID) ([]domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsRepository_ListByProjectIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// ListEnabled provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) ListEnabled(ctx context.Context) ([]domain.FeatureAlgorithm, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListEnabled")
	}

	var r0 []domain.FeatureAlgorithm
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.FeatureAlgorithm, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.FeatureAlgorithm); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_ListEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEnabled'
type MockFeatureAlgorithmsRepository_ListEnabled_Call struct {
	*mock.Call
}

// ListEnabled is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeatureAlgorithmsRepository_Expecter) ListEnabled(ctx interface{}) *MockFeatureAlgorithmsRepository_ListEnabled_Call {
	return &MockFeatureAlgorithmsRepository_ListEnabled_Call{Call: _e.mock.On("ListEnabled", ctx)}
}

func (_c *MockFeatureAlgorithmsRepository_ListEnabled_Call) Run(run func(ctx context.Context)) *MockFeatureAlgorithmsRepository_ListEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListEnabled_Call) Return(featureAlgorithms []domain.FeatureAlgorithm, err error) *MockFeatureAlgorithmsRepository_ListEnabled_Call {
	_c.Call.Return(featureAlgorithms, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListEnabled_Call) RunAndReturn(run func(ctx context.Context) ([]domain.FeatureAlgorithm, error)) *MockFeatureAlgorithmsRepository_ListEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// ListExtendedByFeatureIDWithEnvID provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) ListExtendedByFeatureIDWithEnvID(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) ([]domain.FeatureAlgorithmExtended, error) {
	ret := _mock.Called(ctx, featureID, envID)

	if len(ret) == 0 {
		panic("no return value specified for ListExtendedByFeatureIDWithEnvID")
	}

	var r0 []domain.FeatureAlgorithmExtended
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) ([]domain.FeatureAlgorithmExtended, error)); ok {
		return returnFunc(ctx, featureID, envID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID) []domain.FeatureAlgorithmExtended); ok {
		r0 = returnFunc(ctx, featureID, envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithmExtended)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID) error); ok {
		r1 = returnFunc(ctx, featureID, envID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExtendedByFeatureIDWithEnvID'
type MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call struct {
	*mock.Call
}

// ListExtendedByFeatureIDWithEnvID is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
func (_e *MockFeatureAlgorithmsRepository_Expecter) ListExtendedByFeatureIDWithEnvID(ctx interface{}, featureID interface{}, envID interface{}) *MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call {
	return &MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call{Call: _e.mock.On("ListExtendedByFeatureIDWithEnvID", ctx, featureID, envID)}
}

func (_c *MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID)) *MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call) Return(featureAlgorithmExtendeds []domain.FeatureAlgorithmExtended, err error) *MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call {
	_c.Call.Return(featureAlgorithmExtendeds, err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID) ([]domain.FeatureAlgorithmExtended, error)) *MockFeatureAlgorithmsRepository_ListExtendedByFeatureIDWithEnvID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFeatureAlgorithmsRepository
func (_mock *MockFeatureAlgorithmsRepository) Update(ctx context.Context, featureAlgorithm domain.FeatureAlgorithm) error {
	ret := _mock.Called(ctx, featureAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureAlgorithm) error); ok {
		r0 = returnFunc(ctx, featureAlgorithm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureAlgorithmsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFeatureAlgorithmsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - featureAlgorithm domain.FeatureAlgorithm
func (_e *MockFeatureAlgorithmsRepository_Expecter) Update(ctx interface{}, featureAlgorithm interface{}) *MockFeatureAlgorithmsRepository_Update_Call {
	return &MockFeatureAlgorithmsRepository_Update_Call{Call: _e.mock.On("Update", ctx, featureAlgorithm)}
}

func (_c *MockFeatureAlgorithmsRepository_Update_Call) Run(run func(ctx context.Context, featureAlgorithm domain.FeatureAlgorithm)) *MockFeatureAlgorithmsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureAlgorithm
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureAlgorithm)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_Update_Call) Return(err error) *MockFeatureAlgorithmsRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureAlgorithmsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, featureAlgorithm domain.FeatureAlgorithm) error) *MockFeatureAlgorithmsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
