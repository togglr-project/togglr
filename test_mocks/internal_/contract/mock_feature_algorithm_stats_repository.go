// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockFeatureAlgorithmStatsRepository creates a new instance of MockFeatureAlgorithmStatsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureAlgorithmStatsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureAlgorithmStatsRepository {
	mock := &MockFeatureAlgorithmStatsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureAlgorithmStatsRepository is an autogenerated mock type for the FeatureAlgorithmStatsRepository type
type MockFeatureAlgorithmStatsRepository struct {
	mock.Mock
}

type MockFeatureAlgorithmStatsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureAlgorithmStatsRepository) EXPECT() *MockFeatureAlgorithmStatsRepository_Expecter {
	return &MockFeatureAlgorithmStatsRepository_Expecter{mock: &_m.Mock}
}

// InsertBatch provides a mock function for the type MockFeatureAlgorithmStatsRepository
func (_mock *MockFeatureAlgorithmStatsRepository) InsertBatch(ctx context.Context, records []domain.FeatureAlgorithmStats) error {
	ret := _mock.Called(ctx, records)

	if len(ret) == 0 {
		panic("no return value specified for InsertBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.FeatureAlgorithmStats) error); ok {
		r0 = returnFunc(ctx, records)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeatureAlgorithmStatsRepository_InsertBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertBatch'
type MockFeatureAlgorithmStatsRepository_InsertBatch_Call struct {
	*mock.Call
}

// InsertBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - records []domain.FeatureAlgorithmStats
func (_e *MockFeatureAlgorithmStatsRepository_Expecter) InsertBatch(ctx interface{}, records interface{}) *MockFeatureAlgorithmStatsRepository_InsertBatch_Call {
	return &MockFeatureAlgorithmStatsRepository_InsertBatch_Call{Call: _e.mock.On("InsertBatch", ctx, records)}
}

func (_c *MockFeatureAlgorithmStatsRepository_InsertBatch_Call) Run(run func(ctx context.Context, records []domain.FeatureAlgorithmStats)) *MockFeatureAlgorithmStatsRepository_InsertBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.FeatureAlgorithmStats
		if args[1] != nil {
			arg1 = args[1].([]domain.FeatureAlgorithmStats)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmStatsRepository_InsertBatch_Call) Return(err error) *MockFeatureAlgorithmStatsRepository_InsertBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeatureAlgorithmStatsRepository_InsertBatch_Call) RunAndReturn(run func(ctx context.Context, records []domain.FeatureAlgorithmStats) error) *MockFeatureAlgorithmStatsRepository_InsertBatch_Call {
	_c.Call.Return(run)
	return _c
}

// LoadAll provides a mock function for the type MockFeatureAlgorithmStatsRepository
func (_mock *MockFeatureAlgorithmStatsRepository) LoadAll(ctx context.Context) ([]domain.FeatureAlgorithmStats, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadAll")
	}

	var r0 []domain.FeatureAlgorithmStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.FeatureAlgorithmStats, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.FeatureAlgorithmStats); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeatureAlgorithmStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmStatsRepository_LoadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadAll'
type MockFeatureAlgorithmStatsRepository_LoadAll_Call struct {
	*mock.Call
}

// LoadAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeatureAlgorithmStatsRepository_Expecter) LoadAll(ctx interface{}) *MockFeatureAlgorithmStatsRepository_LoadAll_Call {
	return &MockFeatureAlgorithmStatsRepository_LoadAll_Call{Call: _e.mock.On("LoadAll", ctx)}
}

func (_c *MockFeatureAlgorithmStatsRepository_LoadAll_Call) Run(run func(ctx context.Context)) *MockFeatureAlgorithmStatsRepository_LoadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmStatsRepository_LoadAll_Call) Return(featureAlgorithmStatss []domain.FeatureAlgorithmStats, err error) *MockFeatureAlgorithmStatsRepository_LoadAll_Call {
	_c.Call.Return(featureAlgorithmStatss, err)
	return _c
}

func (_c *MockFeatureAlgorithmStatsRepository_LoadAll_Call) RunAndReturn(run func(ctx context.Context) ([]domain.FeatureAlgorithmStats, error)) *MockFeatureAlgorithmStatsRepository_LoadAll_Call {
	_c.Call.Return(run)
	return _c
}

// LoadByFeatureEnvAlg provides a mock function for the type MockFeatureAlgorithmStatsRepository
func (_mock *MockFeatureAlgorithmStatsRepository) LoadByFeatureEnvAlg(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, algSlug string) (domain.FeatureAlgorithmStats, error) {
	ret := _mock.Called(ctx, featureID, envID, algSlug)

	if len(ret) == 0 {
		panic("no return value specified for LoadByFeatureEnvAlg")
	}

	var r0 domain.FeatureAlgorithmStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID, string) (domain.FeatureAlgorithmStats, error)); ok {
		return returnFunc(ctx, featureID, envID, algSlug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FeatureID, domain.EnvironmentID, string) domain.FeatureAlgorithmStats); ok {
		r0 = returnFunc(ctx, featureID, envID, algSlug)
	} else {
		r0 = ret.Get(0).(domain.FeatureAlgorithmStats)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.FeatureID, domain.EnvironmentID, string) error); ok {
		r1 = returnFunc(ctx, featureID, envID, algSlug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadByFeatureEnvAlg'
type MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call struct {
	*mock.Call
}

// LoadByFeatureEnvAlg is a helper method to define mock.On call
//   - ctx context.Context
//   - featureID domain.FeatureID
//   - envID domain.EnvironmentID
//   - algSlug string
func (_e *MockFeatureAlgorithmStatsRepository_Expecter) LoadByFeatureEnvAlg(ctx interface{}, featureID interface{}, envID interface{}, algSlug interface{}) *MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call {
	return &MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call{Call: _e.mock.On("LoadByFeatureEnvAlg", ctx, featureID, envID, algSlug)}
}

func (_c *MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call) Run(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, algSlug string)) *MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FeatureID
		if args[1] != nil {
			arg1 = args[1].(domain.FeatureID)
		}
		var arg2 domain.EnvironmentID
		if args[2] != nil {
			arg2 = args[2].(domain.EnvironmentID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call) Return(featureAlgorithmStats domain.FeatureAlgorithmStats, err error) *MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call {
	_c.Call.Return(featureAlgorithmStats, err)
	return _c
}

func (_c *MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call) RunAndReturn(run func(ctx context.Context, featureID domain.FeatureID, envID domain.EnvironmentID, algSlug string) (domain.FeatureAlgorithmStats, error)) *MockFeatureAlgorithmStatsRepository_LoadByFeatureEnvAlg_Call {
	_c.Call.Return(run)
	return _c
}
