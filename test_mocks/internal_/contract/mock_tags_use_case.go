// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	"github.com/rom8726/etoggle/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTagsUseCase creates a new instance of MockTagsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagsUseCase {
	mock := &MockTagsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTagsUseCase is an autogenerated mock type for the TagsUseCase type
type MockTagsUseCase struct {
	mock.Mock
}

type MockTagsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagsUseCase) EXPECT() *MockTagsUseCase_Expecter {
	return &MockTagsUseCase_Expecter{mock: &_m.Mock}
}

// CreateTag provides a mock function for the type MockTagsUseCase
func (_mock *MockTagsUseCase) CreateTag(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string) (domain.Tag, error) {
	ret := _mock.Called(ctx, projectID, categoryID, name, slug, description, color)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 domain.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, *domain.CategoryID, string, string, *string, *string) (domain.Tag, error)); ok {
		return returnFunc(ctx, projectID, categoryID, name, slug, description, color)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, *domain.CategoryID, string, string, *string, *string) domain.Tag); ok {
		r0 = returnFunc(ctx, projectID, categoryID, name, slug, description, color)
	} else {
		r0 = ret.Get(0).(domain.Tag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, *domain.CategoryID, string, string, *string, *string) error); ok {
		r1 = returnFunc(ctx, projectID, categoryID, name, slug, description, color)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsUseCase_CreateTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTag'
type MockTagsUseCase_CreateTag_Call struct {
	*mock.Call
}

// CreateTag is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - categoryID *domain.CategoryID
//   - name string
//   - slug string
//   - description *string
//   - color *string
func (_e *MockTagsUseCase_Expecter) CreateTag(ctx interface{}, projectID interface{}, categoryID interface{}, name interface{}, slug interface{}, description interface{}, color interface{}) *MockTagsUseCase_CreateTag_Call {
	return &MockTagsUseCase_CreateTag_Call{Call: _e.mock.On("CreateTag", ctx, projectID, categoryID, name, slug, description, color)}
}

func (_c *MockTagsUseCase_CreateTag_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string)) *MockTagsUseCase_CreateTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 *domain.CategoryID
		if args[2] != nil {
			arg2 = args[2].(*domain.CategoryID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		var arg6 *string
		if args[6] != nil {
			arg6 = args[6].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockTagsUseCase_CreateTag_Call) Return(tag domain.Tag, err error) *MockTagsUseCase_CreateTag_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockTagsUseCase_CreateTag_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string) (domain.Tag, error)) *MockTagsUseCase_CreateTag_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTagsFromCategories provides a mock function for the type MockTagsUseCase
func (_mock *MockTagsUseCase) CreateTagsFromCategories(ctx context.Context, projectID domain.ProjectID) error {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CreateTagsFromCategories")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID) error); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagsUseCase_CreateTagsFromCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTagsFromCategories'
type MockTagsUseCase_CreateTagsFromCategories_Call struct {
	*mock.Call
}

// CreateTagsFromCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
func (_e *MockTagsUseCase_Expecter) CreateTagsFromCategories(ctx interface{}, projectID interface{}) *MockTagsUseCase_CreateTagsFromCategories_Call {
	return &MockTagsUseCase_CreateTagsFromCategories_Call{Call: _e.mock.On("CreateTagsFromCategories", ctx, projectID)}
}

func (_c *MockTagsUseCase_CreateTagsFromCategories_Call) Run(run func(ctx context.Context, projectID domain.ProjectID)) *MockTagsUseCase_CreateTagsFromCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagsUseCase_CreateTagsFromCategories_Call) Return(err error) *MockTagsUseCase_CreateTagsFromCategories_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagsUseCase_CreateTagsFromCategories_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID) error) *MockTagsUseCase_CreateTagsFromCategories_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTag provides a mock function for the type MockTagsUseCase
func (_mock *MockTagsUseCase) DeleteTag(ctx context.Context, id domain.TagID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagsUseCase_DeleteTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTag'
type MockTagsUseCase_DeleteTag_Call struct {
	*mock.Call
}

// DeleteTag is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.TagID
func (_e *MockTagsUseCase_Expecter) DeleteTag(ctx interface{}, id interface{}) *MockTagsUseCase_DeleteTag_Call {
	return &MockTagsUseCase_DeleteTag_Call{Call: _e.mock.On("DeleteTag", ctx, id)}
}

func (_c *MockTagsUseCase_DeleteTag_Call) Run(run func(ctx context.Context, id domain.TagID)) *MockTagsUseCase_DeleteTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TagID
		if args[1] != nil {
			arg1 = args[1].(domain.TagID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagsUseCase_DeleteTag_Call) Return(err error) *MockTagsUseCase_DeleteTag_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagsUseCase_DeleteTag_Call) RunAndReturn(run func(ctx context.Context, id domain.TagID) error) *MockTagsUseCase_DeleteTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetTag provides a mock function for the type MockTagsUseCase
func (_mock *MockTagsUseCase) GetTag(ctx context.Context, id domain.TagID) (domain.Tag, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTag")
	}

	var r0 domain.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID) (domain.Tag, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID) domain.Tag); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Tag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TagID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsUseCase_GetTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTag'
type MockTagsUseCase_GetTag_Call struct {
	*mock.Call
}

// GetTag is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.TagID
func (_e *MockTagsUseCase_Expecter) GetTag(ctx interface{}, id interface{}) *MockTagsUseCase_GetTag_Call {
	return &MockTagsUseCase_GetTag_Call{Call: _e.mock.On("GetTag", ctx, id)}
}

func (_c *MockTagsUseCase_GetTag_Call) Run(run func(ctx context.Context, id domain.TagID)) *MockTagsUseCase_GetTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TagID
		if args[1] != nil {
			arg1 = args[1].(domain.TagID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagsUseCase_GetTag_Call) Return(tag domain.Tag, err error) *MockTagsUseCase_GetTag_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockTagsUseCase_GetTag_Call) RunAndReturn(run func(ctx context.Context, id domain.TagID) (domain.Tag, error)) *MockTagsUseCase_GetTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectTags provides a mock function for the type MockTagsUseCase
func (_mock *MockTagsUseCase) ListProjectTags(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID) ([]domain.Tag, error) {
	ret := _mock.Called(ctx, projectID, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectTags")
	}

	var r0 []domain.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, *domain.CategoryID) ([]domain.Tag, error)); ok {
		return returnFunc(ctx, projectID, categoryID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, *domain.CategoryID) []domain.Tag); ok {
		r0 = returnFunc(ctx, projectID, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, *domain.CategoryID) error); ok {
		r1 = returnFunc(ctx, projectID, categoryID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsUseCase_ListProjectTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectTags'
type MockTagsUseCase_ListProjectTags_Call struct {
	*mock.Call
}

// ListProjectTags is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - categoryID *domain.CategoryID
func (_e *MockTagsUseCase_Expecter) ListProjectTags(ctx interface{}, projectID interface{}, categoryID interface{}) *MockTagsUseCase_ListProjectTags_Call {
	return &MockTagsUseCase_ListProjectTags_Call{Call: _e.mock.On("ListProjectTags", ctx, projectID, categoryID)}
}

func (_c *MockTagsUseCase_ListProjectTags_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID)) *MockTagsUseCase_ListProjectTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 *domain.CategoryID
		if args[2] != nil {
			arg2 = args[2].(*domain.CategoryID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagsUseCase_ListProjectTags_Call) Return(tags []domain.Tag, err error) *MockTagsUseCase_ListProjectTags_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockTagsUseCase_ListProjectTags_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, categoryID *domain.CategoryID) ([]domain.Tag, error)) *MockTagsUseCase_ListProjectTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTag provides a mock function for the type MockTagsUseCase
func (_mock *MockTagsUseCase) UpdateTag(ctx context.Context, id domain.TagID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string) (domain.Tag, error) {
	ret := _mock.Called(ctx, id, categoryID, name, slug, description, color)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTag")
	}

	var r0 domain.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID, *domain.CategoryID, string, string, *string, *string) (domain.Tag, error)); ok {
		return returnFunc(ctx, id, categoryID, name, slug, description, color)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TagID, *domain.CategoryID, string, string, *string, *string) domain.Tag); ok {
		r0 = returnFunc(ctx, id, categoryID, name, slug, description, color)
	} else {
		r0 = ret.Get(0).(domain.Tag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TagID, *domain.CategoryID, string, string, *string, *string) error); ok {
		r1 = returnFunc(ctx, id, categoryID, name, slug, description, color)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsUseCase_UpdateTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTag'
type MockTagsUseCase_UpdateTag_Call struct {
	*mock.Call
}

// UpdateTag is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.TagID
//   - categoryID *domain.CategoryID
//   - name string
//   - slug string
//   - description *string
//   - color *string
func (_e *MockTagsUseCase_Expecter) UpdateTag(ctx interface{}, id interface{}, categoryID interface{}, name interface{}, slug interface{}, description interface{}, color interface{}) *MockTagsUseCase_UpdateTag_Call {
	return &MockTagsUseCase_UpdateTag_Call{Call: _e.mock.On("UpdateTag", ctx, id, categoryID, name, slug, description, color)}
}

func (_c *MockTagsUseCase_UpdateTag_Call) Run(run func(ctx context.Context, id domain.TagID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string)) *MockTagsUseCase_UpdateTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TagID
		if args[1] != nil {
			arg1 = args[1].(domain.TagID)
		}
		var arg2 *domain.CategoryID
		if args[2] != nil {
			arg2 = args[2].(*domain.CategoryID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		var arg6 *string
		if args[6] != nil {
			arg6 = args[6].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockTagsUseCase_UpdateTag_Call) Return(tag domain.Tag, err error) *MockTagsUseCase_UpdateTag_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockTagsUseCase_UpdateTag_Call) RunAndReturn(run func(ctx context.Context, id domain.TagID, categoryID *domain.CategoryID, name string, slug string, description *string, color *string) (domain.Tag, error)) *MockTagsUseCase_UpdateTag_Call {
	_c.Call.Return(run)
	return _c
}
