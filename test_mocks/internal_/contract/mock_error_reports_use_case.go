// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcontract

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockErrorReportsUseCase creates a new instance of MockErrorReportsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorReportsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorReportsUseCase {
	mock := &MockErrorReportsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockErrorReportsUseCase is an autogenerated mock type for the ErrorReportsUseCase type
type MockErrorReportsUseCase struct {
	mock.Mock
}

type MockErrorReportsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorReportsUseCase) EXPECT() *MockErrorReportsUseCase_Expecter {
	return &MockErrorReportsUseCase_Expecter{mock: &_m.Mock}
}

// GetFeatureHealth provides a mock function for the type MockErrorReportsUseCase
func (_mock *MockErrorReportsUseCase) GetFeatureHealth(ctx context.Context, projectID domain.ProjectID, featureKey string, envKey string) (domain.FeatureHealth, error) {
	ret := _mock.Called(ctx, projectID, featureKey, envKey)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureHealth")
	}

	var r0 domain.FeatureHealth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) (domain.FeatureHealth, error)); ok {
		return returnFunc(ctx, projectID, featureKey, envKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string) domain.FeatureHealth); ok {
		r0 = returnFunc(ctx, projectID, featureKey, envKey)
	} else {
		r0 = ret.Get(0).(domain.FeatureHealth)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, string) error); ok {
		r1 = returnFunc(ctx, projectID, featureKey, envKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockErrorReportsUseCase_GetFeatureHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureHealth'
type MockErrorReportsUseCase_GetFeatureHealth_Call struct {
	*mock.Call
}

// GetFeatureHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - featureKey string
//   - envKey string
func (_e *MockErrorReportsUseCase_Expecter) GetFeatureHealth(ctx interface{}, projectID interface{}, featureKey interface{}, envKey interface{}) *MockErrorReportsUseCase_GetFeatureHealth_Call {
	return &MockErrorReportsUseCase_GetFeatureHealth_Call{Call: _e.mock.On("GetFeatureHealth", ctx, projectID, featureKey, envKey)}
}

func (_c *MockErrorReportsUseCase_GetFeatureHealth_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, featureKey string, envKey string)) *MockErrorReportsUseCase_GetFeatureHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockErrorReportsUseCase_GetFeatureHealth_Call) Return(featureHealth domain.FeatureHealth, err error) *MockErrorReportsUseCase_GetFeatureHealth_Call {
	_c.Call.Return(featureHealth, err)
	return _c
}

func (_c *MockErrorReportsUseCase_GetFeatureHealth_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, featureKey string, envKey string) (domain.FeatureHealth, error)) *MockErrorReportsUseCase_GetFeatureHealth_Call {
	_c.Call.Return(run)
	return _c
}

// ReportError provides a mock function for the type MockErrorReportsUseCase
func (_mock *MockErrorReportsUseCase) ReportError(ctx context.Context, projectID domain.ProjectID, featureKey string, envKey string, reqCtx map[domain.RuleAttribute]any, reportType string, reportMsg string) (bool, error) {
	ret := _mock.Called(ctx, projectID, featureKey, envKey, reqCtx, reportType, reportMsg)

	if len(ret) == 0 {
		panic("no return value specified for ReportError")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string, map[domain.RuleAttribute]any, string, string) (bool, error)); ok {
		return returnFunc(ctx, projectID, featureKey, envKey, reqCtx, reportType, reportMsg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectID, string, string, map[domain.RuleAttribute]any, string, string) bool); ok {
		r0 = returnFunc(ctx, projectID, featureKey, envKey, reqCtx, reportType, reportMsg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectID, string, string, map[domain.RuleAttribute]any, string, string) error); ok {
		r1 = returnFunc(ctx, projectID, featureKey, envKey, reqCtx, reportType, reportMsg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockErrorReportsUseCase_ReportError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportError'
type MockErrorReportsUseCase_ReportError_Call struct {
	*mock.Call
}

// ReportError is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID domain.ProjectID
//   - featureKey string
//   - envKey string
//   - reqCtx map[domain.RuleAttribute]any
//   - reportType string
//   - reportMsg string
func (_e *MockErrorReportsUseCase_Expecter) ReportError(ctx interface{}, projectID interface{}, featureKey interface{}, envKey interface{}, reqCtx interface{}, reportType interface{}, reportMsg interface{}) *MockErrorReportsUseCase_ReportError_Call {
	return &MockErrorReportsUseCase_ReportError_Call{Call: _e.mock.On("ReportError", ctx, projectID, featureKey, envKey, reqCtx, reportType, reportMsg)}
}

func (_c *MockErrorReportsUseCase_ReportError_Call) Run(run func(ctx context.Context, projectID domain.ProjectID, featureKey string, envKey string, reqCtx map[domain.RuleAttribute]any, reportType string, reportMsg string)) *MockErrorReportsUseCase_ReportError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectID
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 map[domain.RuleAttribute]any
		if args[4] != nil {
			arg4 = args[4].(map[domain.RuleAttribute]any)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockErrorReportsUseCase_ReportError_Call) Return(accepted bool, err error) *MockErrorReportsUseCase_ReportError_Call {
	_c.Call.Return(accepted, err)
	return _c
}

func (_c *MockErrorReportsUseCase_ReportError_Call) RunAndReturn(run func(ctx context.Context, projectID domain.ProjectID, featureKey string, envKey string, reqCtx map[domain.RuleAttribute]any, reportType string, reportMsg string) (bool, error)) *MockErrorReportsUseCase_ReportError_Call {
	_c.Call.Return(run)
	return _c
}
