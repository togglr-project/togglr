// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockusers

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/togglr-project/togglr/internal/domain"
)

// NewMockAuthProvider creates a new instance of MockAuthProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthProvider {
	mock := &MockAuthProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthProvider is an autogenerated mock type for the AuthProvider type
type MockAuthProvider struct {
	mock.Mock
}

type MockAuthProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthProvider) EXPECT() *MockAuthProvider_Expecter {
	return &MockAuthProvider_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthProvider
func (_mock *MockAuthProvider) Authenticate(ctx context.Context, username string, password string) (*domain.User, error) {
	ret := _mock.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.User, error)); ok {
		return returnFunc(ctx, username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = returnFunc(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthProvider_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthProvider_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockAuthProvider_Expecter) Authenticate(ctx interface{}, username interface{}, password interface{}) *MockAuthProvider_Authenticate_Call {
	return &MockAuthProvider_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, username, password)}
}

func (_c *MockAuthProvider_Authenticate_Call) Run(run func(ctx context.Context, username string, password string)) *MockAuthProvider_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAuthProvider_Authenticate_Call) Return(user *domain.User, err error) *MockAuthProvider_Authenticate_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthProvider_Authenticate_Call) RunAndReturn(run func(ctx context.Context, username string, password string) (*domain.User, error)) *MockAuthProvider_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// CanHandle provides a mock function for the type MockAuthProvider
func (_mock *MockAuthProvider) CanHandle(username string) bool {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for CanHandle")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(username)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockAuthProvider_CanHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanHandle'
type MockAuthProvider_CanHandle_Call struct {
	*mock.Call
}

// CanHandle is a helper method to define mock.On call
//   - username string
func (_e *MockAuthProvider_Expecter) CanHandle(username interface{}) *MockAuthProvider_CanHandle_Call {
	return &MockAuthProvider_CanHandle_Call{Call: _e.mock.On("CanHandle", username)}
}

func (_c *MockAuthProvider_CanHandle_Call) Run(run func(username string)) *MockAuthProvider_CanHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthProvider_CanHandle_Call) Return(b bool) *MockAuthProvider_CanHandle_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockAuthProvider_CanHandle_Call) RunAndReturn(run func(username string) bool) *MockAuthProvider_CanHandle_Call {
	_c.Call.Return(run)
	return _c
}
